2023-04-02 22:11:03,676 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-02 22:11:03,676 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework., Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs., Given a scenario, identify the options and considerations when importing and exporting data into development environments., Identify the capabilities of the declarative process automation features., Declare variables, constants, methods, and use modifiers and Apex interfaces., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:11:21,021 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-02 22:11:21,021 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework., Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs., Given a scenario, identify the options and considerations when importing and exporting data into development environments., Identify the capabilities of the declarative process automation features., Declare variables, constants, methods, and use modifiers and Apex interfaces., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:11:28,786 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-02 22:11:28,786 - INFO - No related goals found
2023-04-02 22:11:30,222 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-02 22:11:30,222 - INFO - No related goals found
2023-04-02 22:11:31,942 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-02 22:11:31,942 - INFO - No related goals found
2023-04-02 22:11:33,190 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-02 22:11:33,190 - INFO - No related goals found
2023-04-02 22:11:34,459 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-02 22:11:34,459 - INFO - No related goals found
2023-04-02 22:11:36,140 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-02 22:11:36,140 - INFO - No related goals found
2023-04-02 22:11:37,763 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-02 22:11:37,763 - INFO - No related goals found
2023-04-02 22:11:50,205 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-02 22:11:50,205 - INFO - Related goals: Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Identify the capabilities of the declarative process automation features., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:11:58,633 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-02 22:11:58,633 - INFO - No related goals found
2023-04-02 22:12:00,479 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-02 22:12:00,479 - INFO - Related goals: Declare variables, constants, methods, and use modifiers and Apex interfaces.
2023-04-02 22:12:03,188 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-02 22:12:03,188 - INFO - Related goals: Declare variables, constants, methods, and use modifiers and Apex interfaces.
2023-04-02 22:12:09,496 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-02 22:12:09,496 - INFO - No related goals found
2023-04-02 22:12:19,775 - INFO - Processed paragraph 14 in d1.txt: public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
2023-04-02 22:12:19,775 - INFO - Related goals: Declare variables, constants, methods, and use modifiers and Apex interfaces., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:12:23,308 - INFO - Processed paragraph 15 in d1.txt: The basic syntax for defining classes is:
2023-04-02 22:12:23,308 - INFO - No related goals found
2023-04-02 22:12:26,999 - INFO - Processed paragraph 16 in d1.txt: private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
2023-04-02 22:12:26,999 - INFO - No related goals found
2023-04-02 22:12:29,212 - INFO - Processed paragraph 17 in d1.txt: Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
2023-04-02 22:12:29,212 - INFO - Related goals: Declare variables, constants, methods, and use modifiers and Apex interfaces.
2023-04-02 22:12:30,887 - INFO - Processed paragraph 18 in d1.txt: Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
2023-04-02 22:12:30,887 - INFO - No related goals found
2023-04-02 22:12:32,941 - INFO - Processed paragraph 19 in d1.txt: Besides primitives, supported data types include sObjects, either as a generic sObject or a specific one, such as an Account or Contact. Remember, an sObject is just a Salesforce object. You can think of it as a table in a database. The sObject can be either a standard one that comes built in with Salesforce or a custom one that you define yourself.
2023-04-02 22:12:32,941 - INFO - Related goals: Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs.
2023-04-02 22:12:35,809 - INFO - Processed paragraph 20 in d1.txt: Additionally, a data type can be a typed list of values, also known as an enum. But watch out, because these aren’t the same enums you’re used to working with in .NET. In Apex, you can use enums with numbers, but you can’t define what these number values are. Also, the ordinal assignment starts at zero. For example, if you had an enum like the following.
2023-04-02 22:12:35,809 - INFO - No related goals found
2023-04-02 22:12:37,344 - INFO - Processed paragraph 21 in d1.txt: public enum myEnums {
            Enum1,
            Enum2,
            Enum3
 }
If you tried to access the ordinal value of the third enum, the value of the enumOrd variable would be 2.
2023-04-02 22:12:37,344 - INFO - Related goals: Declare variables, constants, methods, and use modifiers and Apex interfaces.
2023-04-02 22:12:40,617 - INFO - Processed paragraph 22 in d1.txt: Integer enumOrd = myEnums.Enum3.ordinal();
Working with Collections
.NET supports a large collection library with numerous types and extension methods. And here’s some good news. Apex has only the following three collections. Talk about simple, right?
2023-04-02 22:12:40,617 - INFO - Related goals: Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:12:45,430 - INFO - Processed paragraph 23 in d1.txt: List
A list is an ordered collection of elements that works much the same as a traditional array. In fact, arrays in Apex are synonymous with lists, and you can use them interchangeably. For example, the following is one way to declare a variable as a list of strings.
2023-04-02 22:12:45,430 - INFO - No related goals found
2023-04-02 22:12:55,569 - INFO - Processed paragraph 24 in d1.txt: List<String> myStrings =  new List<String>();
Alternatively, you can declare the myStrings variable as an array but assign it to a list rather than an array.
2023-04-02 22:12:55,569 - INFO - Related goals: Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:12:57,513 - INFO - Processed paragraph 25 in d1.txt: String[] myStrings = new List<String>();
Another thing you can do is declare the list and initialize its values, all in one step, such as the following.
2023-04-02 22:12:57,513 - INFO - No related goals found
2023-04-02 22:12:58,441 - INFO - Processed paragraph 26 in d1.txt: List<String> myStrings =  new List<String> {'String1', 'String2', 'String3' };
You can also add values to the list after it has been created, such as this:
2023-04-02 22:12:58,441 - INFO - No related goals found
2023-04-02 22:13:02,537 - INFO - Processed paragraph 27 in d1.txt: List<String> myStrings = new List<String>();
myStrings.add('String1');
myStrings.add('String2');
myStrings.add('String3');
You’ll probably create a lot of list variables in your Apex development, because the output of every SOQL query is a list. For example, you could create a list of Accounts using code such as the following:
2023-04-02 22:13:02,537 - INFO - Related goals: Given a scenario, use and apply Apex control flow statements.
2023-04-02 22:13:06,336 - INFO - Processed paragraph 28 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
Like arrays, lists have indexes that start at zero. So you could access the name of the first account in the list with code like this:
2023-04-02 22:13:06,336 - INFO - Related goals: Given a scenario, use and apply Apex control flow statements.
2023-04-02 22:13:11,310 - INFO - Processed paragraph 29 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
String firstAccount = myAccounts[0].Name;
Set
A set is an unordered collection of elements that does not contain duplicates. A set is commonly used to store ID values because the value are always unique. You could then use the set as part of a WHERE clause in a SOQL query. For example, here we’re creating a set that contains two unique IDs for Accounts. We then use the set in the SOQL query to return Accounts only for those IDs.
2023-04-02 22:13:11,310 - INFO - No related goals found
2023-04-02 22:13:15,737 - INFO - Processed paragraph 30 in d1.txt: Set<ID> accountIds = new
  Set<ID>{'001d000000BOaHSAA1','001d000000BOaHTAA1'};  
List<Account> accounts = [SELECT Name
  FROM Account WHERE Id IN :accountIds];    
Map
A map is a collection of key-value pairs. Each key maps to a single value. A map is useful when you need to quickly find something by a key. The key values must be unique, so you could have a map that contained ID values for the key and then mapped to an sObject. For example, you could use the following code to declare a map variable named accountMap that contains all Accounts mapped to their IDs.
2023-04-02 22:13:15,745 - INFO - Related goals: Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs.
2023-04-02 22:13:20,555 - INFO - Processed paragraph 31 in d1.txt: Map<Id, Account> accountMap = new Map<Id, Account>([SELECT Id, Name FROM Account]);
You could then access a specific Account record using the get method and code similar to the following.
2023-04-02 22:13:20,555 - INFO - Related goals: Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs.
2023-04-02 22:13:22,807 - INFO - Processed paragraph 32 in d1.txt: Id accId = '001d000000BOaHSAA1';
Account account = accountMap.get(accId);
Check out the official docs to learn more about the data types that Apex supports.
2023-04-02 22:13:22,807 - INFO - Related goals: Declare variables, constants, methods, and use modifiers and Apex interfaces.
2023-04-02 22:13:23,627 - INFO - Processed paragraph 33 in d1.txt: ASP.NET to Visualforce
If you’re an ASP.NET web forms developer, you’ll probably feel right at home with Visualforce. There are many similarities between the two., most notably, a clear separation of the markup from the code. You also use form fields to map code to properties defined in the controller.
2023-04-02 22:13:23,627 - INFO - No related goals found
2023-04-02 22:13:24,649 - INFO - Processed paragraph 34 in d1.txt: The bad news is that viewstate is just as much a pain with Visualforce as it is with ASP.NET due to the fact that HTTP is stateless. The good news is that there are ways around the viewstate limitations. Learn more by checking out the link in Resources.
2023-04-02 22:13:24,649 - INFO - No related goals found
2023-04-02 22:13:26,461 - INFO - Processed paragraph 35 in d1.txt: Visualforce is a framework for rendering HTML pages using an MVC paradigm. Now before you get all excited and start thinking, “Cool, Visualforce is like ASP.NET MVC. I love MVC.”, keep in mind that comparing the two is a bit like comparing apples and pumpkins. You can use either one to render web pages, and both separate the application logic from the markup and the database model, but they do so in different ways.
2023-04-02 22:13:26,461 - INFO - Related goals: Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component.
2023-04-02 22:13:27,621 - INFO - Processed paragraph 36 in d1.txt: To learn all about Visualforce, check out the Visualforce Basics module. For now, we just want to give you a basic idea of how it works by showing you an example. You can use the following markup code to render a simple page used to enter Contact data.
2023-04-02 22:13:27,621 - INFO - No related goals found
2023-04-02 22:13:31,101 - INFO - Processed paragraph 37 in d1.txt: <apex:page standardController="Contact">
  <apex:form>
    <apex:pageBlock title="Edit Contact" mode="Edit">
       <apex:pageBlockButtons >
         <apex:commandButton action="{!edit}" id="editButton" value="Edit"/>
         <apex:commandButton action="{!save}" id="saveButton" value="Save"/>
         <apex:commandButton action="{!cancel}" id="cancelButton" value="Cancel"/>
       </apex:pageBlockButtons>
       <apex:pageBlockSection >
          <apex:inputField value="{!contact.lastname}" />
          <apex:inputField value="{!contact.accountId}"/>
          <apex:inputField value="{!contact.phone}"/>
       </apex:pageBlockSection>
    </apex:pageBlock>
  </apex:form>
</apex:page>
The example uses what is known as a standard controller, which is part of the Lightning Platform. It’s basically system-generated code that allows you to quickly incorporate basic CRUD functionality in your Visualforce pages. But before you start getting worried, just know that you can create your own custom controllers to add in more complex functioning. Learn all about how standard and custom controllers work in the Visualforce Basics module. The rendered version of this page looks like the following:
2023-04-02 22:13:31,101 - INFO - Related goals: Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed.
2023-04-02 22:13:32,947 - INFO - Processed paragraph 38 in d1.txt: Screenshot of a custom Visualforce page used to edit contact information
2023-04-02 22:13:32,947 - INFO - Related goals: Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed.
2023-04-02 22:13:51,274 - INFO - Processed paragraph 39 in d1.txt: Note
Note
You probably know a bit about Lightning Components, and could be thinking, "Is Lightning like ASP.NET MVC?" The short answer is no. Lightning is a lighter weight way of delivering super fast and responsive web apps, but Lightning is a component-based framework. Learn all about it by visiting the Lightning Web Components Basics module.
2023-04-02 22:13:51,274 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework., Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs., Given a scenario, identify the options and considerations when importing and exporting data into development environments., Identify the capabilities of the declarative process automation features., Declare variables, constants, methods, and use modifiers and Apex interfaces., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:13:52,309 - INFO - Processed paragraph 40 in d1.txt: What Is Different?
Now that you know a little about how Apex is similar to .NET, let’s go over some differences. For starters, unlike C#, Apex is not case sensitive.
2023-04-02 22:13:52,309 - INFO - No related goals found
2023-04-02 22:13:56,397 - INFO - Processed paragraph 41 in d1.txt: Apex and Database are Tightly Coupled
Apex code and the Lightning Platform database are tightly coupled to the point where they are sometimes indistinguishable. Each standard or custom object in the database has a "mystical" representation via an Apex class that provides all sorts of functionality to make interacting with the database a snap. The class and its underlying object are essentially a mirror image of one another that is constantly in sync. For instance, whenever you create a new field in an object, a class member is automatically surfaced to reference the values in the database. It's also impossible to add a reference in your Apex code to a field that doesn't exist; the compiler will return an error and simply not save your code. The platform works hard to ensure these dependencies and won't let the database schema and your code become out of sync. Therefore, if you attempt to delete a custom object or a field that is referenced by Apex code, the platform will raise an error and disallow the action.
2023-04-02 22:13:56,397 - INFO - No related goals found
2023-04-02 22:13:58,445 - INFO - Processed paragraph 42 in d1.txt: Different Design Patterns
As a .NET developer, you are probably already familiar with design patterns. However, most of those patterns don’t work on the Lightning Platform. You learn more about this in the next units when we go over execution context and trigger design, but also consider checking out the links listed in Resources regarding Apex design patterns.
2023-04-02 22:13:58,445 - INFO - No related goals found
2023-04-02 22:13:59,877 - INFO - Processed paragraph 43 in d1.txt: What’s important to understand is that if you try to apply the same design strategies that you use in .NET to the Lightning Platform, you’ll likely encounter problems when you go to test and deploy your solutions. We suggest taking some time to learn about which design patterns work best in the Lightning Platform world before you start cranking out the code.
2023-04-02 22:13:59,877 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework.
2023-04-02 22:14:02,025 - INFO - Processed paragraph 44 in d1.txt: Unit Tests Are Required
We know you’re used to writing unit tests for your .NET applications and probably understand the benefits to using them. What is different on the Lightning Platform is that you must have 75% test coverage to deploy your Apex code to a production org.
2023-04-02 22:14:02,025 - INFO - Related goals: Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data.
2023-04-02 22:14:03,059 - INFO - Processed paragraph 45 in d1.txt: Not only does having unit tests promote the development of robust and error-free code, but they’re vital to the stability of the platform, because all tests are run before every major release. To learn more about unit testing, see An Introduction to Apex Code Test Methods.
2023-04-02 22:14:03,059 - INFO - No related goals found
2023-04-02 22:14:05,511 - INFO - Processed paragraph 46 in d1.txt: No Solution, Project, or Config Files
The Lightning Platform has no such thing as a solution or project file. You can create an application, but it’s not the same as creating a .NET application or assembly.
2023-04-02 22:14:05,511 - INFO - No related goals found
2023-04-02 22:14:06,430 - INFO - Processed paragraph 47 in d1.txt: An application on the Lightning Platform is just a loose collection of components, such as tabs, reports, dashboards, and pages. Several come built in with your Salesforce org, and in a few seconds, you can create your own by walking through a point-and-click wizard. You can even purchase apps created by third-parties on what is known as the AppExchange.
2023-04-02 22:14:06,430 - INFO - No related goals found
2023-04-02 22:14:08,072 - INFO - Processed paragraph 48 in d1.txt: All your code resides and executes in the cloud. There is also no such thing as a config file in the Lightning Platform world. Because the database is baked right in, you don’t need connection strings. And unlike ASP.NET MVC, you don’t need to configure routes. You can create custom settings in Salesforce, but these are added and managed declaratively.
2023-04-02 22:14:08,072 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework.
2023-04-02 22:14:08,912 - INFO - Processed paragraph 49 in d1.txt: A Much Smaller Class Library
The Apex class library is considerably smaller than the .NET Framework class library, so it’s easier and faster for you to come up to speed with Apex. But honestly, you might find it a bit frustrating when you try to look for comparative functionality that just doesn’t exist in Apex.
2023-04-02 22:14:08,912 - INFO - No related goals found
2023-04-02 22:14:10,443 - INFO - Processed paragraph 50 in d1.txt: Keep in mind that the Lightning Platform is built with the idea of providing rapid application development. It’s also different than the .NET platform, so you might find yourself looking for functionality that you’re used to working that simply doesn’t exist with the Lightning Platform. However, if you’re looking to build pixel-perfect, custom-coded applications, our Heroku Enterprise platform provides all the power and features you need.
2023-04-02 22:14:10,443 - INFO - No related goals found
2023-04-02 22:14:11,969 - INFO - Processed paragraph 51 in d1.txt: Development Tools
More than likely you have already signed up for a free Developer Edition (DE) org. Perhaps you’ve also opened and used the online Developer Console application.
2023-04-02 22:14:11,969 - INFO - No related goals found
2023-04-02 22:14:14,008 - INFO - Processed paragraph 52 in d1.txt: You can use Developer Console to edit and navigate source code, and it’s also helpful for debugging and troubleshooting. We’ll go over this more in a later unit, so stay tuned. If you’ve already gone through the first module about database basics, you know that you can also use Developer Console to execute SOQL and SOSL queries and view query plans. If you haven’t used Developer Console yet, don’t worry because we’ll be going through it shortly when we create an Apex class.
2023-04-02 22:14:14,008 - INFO - Related goals: Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
2023-04-02 22:14:15,544 - INFO - Processed paragraph 53 in d1.txt: As a .NET developer, you're probably familiar with Visual Studio Code. You will be happy to learn that we have Salesforce Extensions for VS Code that allow you to do custom development on your local machine. The extension is closely tied to Salesforce DX, which provides a modern source-driven development experience. You can learn more about Salesforce DX from the Get Started with Salesforce DX trail.
2023-04-02 22:14:15,544 - INFO - Related goals: Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
2023-04-02 22:14:17,262 - INFO - Processed paragraph 54 in d1.txt: And finally, we thought you would be interested to know about a powerful command-line interface to the Lightning Platform. If you’re one of those developers that just loves the command line, the Salesforce CLI is right up your alley.
2023-04-02 22:14:17,262 - INFO - No related goals found
2023-04-02 22:14:19,641 - INFO - Processed paragraph 55 in d1.txt: Handling Security
The good news here is that in the Lightning Platform you don’t have to worry about authentication or storing passwords and database connection strings. Identity is handled by the platform. You can control access to data at many different levels, including object level, record level, and field level. Security is also handled declaratively. In many cases, security is defined and set up by a Salesforce administrator. As a developer, it’s important to be aware of how it works. Learn more by checking out the Data Security module.
2023-04-02 22:14:19,641 - INFO - Related goals: Given a scenario, prevent user interface and data access security vulnerabilities., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
2023-04-02 22:14:20,564 - INFO - Processed paragraph 56 in d1.txt: What About Integration?
You can integrate with the platform in a number of ways, but you’ll probably use SOAP and REST the most. You can use them in either direction.
2023-04-02 22:14:20,564 - INFO - No related goals found
2023-04-02 22:14:21,688 - INFO - Processed paragraph 57 in d1.txt: You can create and expose web services using the Apex programming language, as well as invoke external web services from Apex. You can also react to incoming email messages and have automated outbound messages sent when certain events occur.
2023-04-02 22:14:21,688 - INFO - No related goals found
2023-04-02 22:14:24,349 - INFO - Processed paragraph 58 in d1.txt: If you really want to get your hands dirty, Salesforce offers both SOAP and REST APIs that provide direct access to the data in your org. Toolkits that wrap around the APIs are available, so you can use whatever language you prefer: .NET, Java, PHP, Objective C, Ruby, and JavaScript.
2023-04-02 22:14:24,349 - INFO - No related goals found
2023-04-02 22:14:25,271 - INFO - Processed paragraph 59 in d1.txt: Numerous third-party integration applications are also available on the AppExchange. Really, just about anything is possible. You can learn more about all the integration points by completing the Apex Integration module.
2023-04-02 22:14:25,271 - INFO - No related goals found
2023-04-02 22:14:26,497 - INFO - Processed paragraph 60 in d1.txt: Create an Apex Class
Now that you know more about how the Lightning Platform relates to the .NET platform, let’s jump right in and create an Apex class using Developer Console. The class we’ll create includes the public method sendMail. It includes a private helper method called inspectResults for inspecting the results of the email send call.
2023-04-02 22:14:26,505 - INFO - Related goals: Given a scenario, follow best practices to write Apex classes and triggers.
2023-04-02 22:14:28,615 - INFO - Processed paragraph 61 in d1.txt: From Setup in your Developer org, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > New > Apex Class.
Enter EmailManager as the class name and click OK.
Delete the existing code, and insert the following snippet:
public with sharing class EmailManager {
    // Public method
    public static void sendMail(String address, String subject, String body) {
        // Create an email message object
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {address};
        mail.setToAddresses(toAddresses);
        mail.setSubject(subject);
        mail.setPlainTextBody(body);
        // Pass this email message to the built-in sendEmail method
        // of the Messaging class
        Messaging.SendEmailResult[] results = Messaging.sendEmail(
            new Messaging.SingleEmailMessage[] { mail });
        // Call a helper method to inspect the returned results.
        inspectResults(results);
    }
    // Helper method
    private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
        Boolean sendResult = true;
        // sendEmail returns an array of result objects.
        // Iterate through the list to inspect results.
        // In this class, the methods send only one email,
        // so we should have only one result.
        for (Messaging.SendEmailResult res : results) {
            if (res.isSuccess()) {
                System.debug('Email sent successfully');
            } else {
                sendResult = false;
                System.debug('The following errors occurred: ' + res.getErrors());                 
            }
        }
        return sendResult;
    }
}   
Press Ctrl + S to save your class.
Note
Note
This simple example doesn’t implement the required object- or field-level security. See this snippet for a quickstart.
2023-04-02 22:14:28,615 - INFO - No related goals found
2023-04-02 22:14:44,327 - INFO - Processed paragraph 62 in d1.txt: Invoke a Method
Because we declared the public sendMail method as static, we can access it without creating an instance of the class. We can do so easily by using Anonymous Apex in Developer Console.
2023-04-02 22:14:44,327 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework., Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs., Given a scenario, identify the options and considerations when importing and exporting data into development environments., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:14:45,957 - INFO - Processed paragraph 63 in d1.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
EmailManager.sendMail('Your email address', 'Trailhead Tutorial', '123 body');
Make sure that the Open Log option is selected, and click Execute. A new tab shows you the execution log.
Select the Debug Only option so that you see only the debug statements displayed in the log. You should see a message telling you that the Email was sent successfully. You should also receive an email if you entered a valid email address.
Imagine if you had tried to accomplish that same task in .NET. Would it have been that easy to create a .NET application that sent emails? Come on, tell the truth.
2023-04-02 22:14:45,957 - INFO - No related goals found
2023-04-02 22:14:47,390 - INFO - Processed paragraph 0 in d2.txt: Understand Execution Context
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-02 22:14:47,390 - INFO - No related goals found
2023-04-02 22:15:06,923 - INFO - Processed paragraph 1 in d2.txt: Know which methods to use to invoke Apex
Write a trigger for a Salesforce object
Observe how execution context works by executing code in Developer Console
Understand how governor limits impact design patterns
Understand the importance of working with bulk operations
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-02 22:15:06,923 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework., Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs., Given a scenario, identify the options and considerations when importing and exporting data into development environments., Identify the capabilities of the declarative process automation features., Declare variables, constants, methods, and use modifiers and Apex interfaces., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:15:14,636 - INFO - Processed paragraph 2 in d2.txt: 
2023-04-02 22:15:14,636 - INFO - No related goals found
2023-04-02 22:15:20,703 - INFO - Processed paragraph 3 in d2.txt: (This clip starts at the 16:36 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-02 22:15:20,703 - INFO - No related goals found
2023-04-02 22:15:30,716 - INFO - Processed paragraph 4 in d2.txt: What Is Execution Context?
For ASP.NET applications, code is executed in the context of an application domain. In the Lightning Platform world, code executes within an execution context. In a nutshell, this context represents the time between when the code is executed and when it ends. The important thing for you to understand is that the Apex code you write is not always the only code that is executing.
2023-04-02 22:15:30,716 - INFO - Related goals: Identify the capabilities of the declarative process automation features., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:15:32,451 - INFO - Processed paragraph 5 in d2.txt: To understand how this works, you need to know all the ways Apex code can be executed on the platform.
2023-04-02 22:15:32,451 - INFO - Related goals: Given a scenario, identify the implications of governor limits on Apex transactions.
2023-04-02 22:15:33,675 - INFO - Processed paragraph 6 in d2.txt: Methods of Invoking Apex
2023-04-02 22:15:33,675 - INFO - No related goals found
2023-04-02 22:15:35,418 - INFO - Processed paragraph 7 in d2.txt: Method	Description
Database Trigger	Invoked for a specific event on a custom or standard object.
Anonymous Apex	Code snippets executed on the fly in Dev Console & other tools.
Asynchronous Apex	Occurs when executing a future or queueable Apex, running a batch job, or scheduling Apex to run at a specified interval.
Web Services	Code that is exposed via SOAP or REST web services.
Email Services	Code that is set up to process inbound email.
Visualforce or Lightning Pages	Visualforce controllers and Lightning components can execute Apex code automatically or when a user initiates an action, such as clicking a button. Lightning components can also be executed by Lightning processes and flows.
Besides invoking Apex code, actions, such as creating a new task, sending an email, performing a field update, or sending an outbound message, can all be triggered by one of the declarative platform features. These actions also run within an execution context.
2023-04-02 22:15:35,418 - INFO - Related goals: Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc.
2023-04-02 22:15:37,363 - INFO - Processed paragraph 8 in d2.txt: Another important consideration is the context of the user executing the Apex code. By default, Apex executes in system context. Apex code has access to all objects and fields. Object permissions, field-level security, and sharing rules aren’t applied for the current user. You can use the with sharing keyword to specify that the sharing rules for the current user be taken into account for a class. This topic is important, so check out Using the with sharing or without sharing keywords.
2023-04-02 22:15:37,363 - INFO - No related goals found
2023-04-02 22:15:39,220 - INFO - Processed paragraph 9 in d2.txt: Trigger Essentials
Before learning more about the execution context, let’s take a step back to introduce you to the world of database triggers. Similar to triggers in SQL Server, Apex database triggers execute programming logic before or after events to records in Salesforce. When defining the trigger, you can specify more than one of the following events:
2023-04-02 22:15:39,220 - INFO - Related goals: Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
2023-04-02 22:15:45,144 - INFO - Processed paragraph 10 in d2.txt: before insert
before update
before delete
after insert
after update
after delete
after undelete
The basic syntax for a trigger looks like the following:
2023-04-02 22:15:45,144 - INFO - No related goals found
2023-04-02 22:15:56,205 - INFO - Processed paragraph 11 in d2.txt: trigger TriggerName on ObjectName (trigger_events) {
   // code_block
}
Now, we know how much .NET developers love to solve problems with code, but we have a super big productivity tip for you here. You only want to resort to using a trigger when you are absolutely sure that the same thing cannot be accomplished with one of our point-and-click automation tools.
2023-04-02 22:15:56,205 - INFO - Related goals: Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Identify the capabilities of the declarative process automation features., Declare variables, constants, methods, and use modifiers and Apex interfaces., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:15:57,992 - INFO - Processed paragraph 12 in d2.txt: To make your life easier, the Salesforce platform includes a powerful automation tool, Flow Builder, for managing business logic without writing code. In most cases, tasks that could once upon a time only be accomplished with a trigger are now better suited for one of the automation tools.
2023-04-02 22:15:57,992 - INFO - Related goals: Given a scenario, use declarative functionality and Apex together to automate business logic.
2023-04-02 22:15:59,122 - INFO - Processed paragraph 13 in d2.txt: Note
Note
If you’re a developer new to the platform, definitely take the time to check out the Approve Records with Approval Processes module in the Developer Beginner trail before creating a trigger. We’re pretty sure that you don’t want to be known as the guy or gal who brought a lot of unnecessary technical overhead into the Salesforce org.
2023-04-02 22:15:59,122 - INFO - No related goals found
2023-04-02 22:16:04,606 - INFO - Processed paragraph 14 in d2.txt: Mark Execution Context
To better understand execution context, let’s walk through creating an Apex database trigger that creates an opportunity when a new account is entered. This trigger calls a method from a handler class, so we first need to create that.
2023-04-02 22:16:04,606 - INFO - Related goals: Given a scenario, use and apply Apex control flow statements., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:16:05,523 - INFO - Processed paragraph 15 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > New > Apex Class.
Enter AccountHandler for the class name and click OK.
Delete the existing code, and insert the following snippet:
public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            insert opp;
        }
    }
}
Press Ctrl + S to save your class.
Note
Note
It’s considered a best practice to use only one trigger per object, which you see in the following example. You can then use context-specific handler methods within triggers to create logic-less triggers. By adopting this practice, you can avoid the common pitfalls that new developers fall into. To learn more about these techniques, check out Trigger Frameworks and Apex Trigger Best Practices.
2023-04-02 22:16:05,523 - INFO - Related goals: Given a scenario, follow best practices to write Apex classes and triggers.
2023-04-02 22:16:06,547 - INFO - Processed paragraph 16 in d2.txt: So now that we have the handler class, we create the Account trigger.
2023-04-02 22:16:06,547 - INFO - No related goals found
2023-04-02 22:16:08,289 - INFO - Processed paragraph 17 in d2.txt: In Developer Console, select File > New > Apex Trigger.
Enter AccountTrigger as the name, and select Account as the sObject.
Click Submit.
Delete the existing code, and insert the following snippet:
trigger AccountTrigger on Account (before insert, before update, before
    delete, after insert, after update, after delete,  after undelete) {
    if (Trigger.isAfter && Trigger.isInsert) {
        AccountHandler.CreateNewOpportunity(Trigger.New);
    }
}
Press Ctrl + S to save your trigger.
To complete the walkthrough, we execute anonymous code to simulate a user entering a new Account using the Salesforce interface. Remember, Apex code can be executed a number of different ways.
2023-04-02 22:16:08,289 - INFO - Related goals: Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
2023-04-02 22:16:09,931 - INFO - Processed paragraph 18 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
Account acct = new Account(
    Name='Test Account 2',
    Phone='(415)555-8989',
    NumberOfEmployees=50,
    BillingCity='San Francisco');
insert acct;
Make sure that the Open Log option is selected and click Execute. A new tab shows the execution log. Keep it open so that you can examine it carefully.
Examining the Execution Log
Notice that the first line in the execution log marks the EXECUTION_STARTED event and that the last line is the EXECUTION_FINISHED event. Everything in between is the execution context.
2023-04-02 22:16:09,931 - INFO - Related goals: Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
2023-04-02 22:16:10,789 - INFO - Processed paragraph 19 in d2.txt: Let’s take a closer look at what happens. A CODE_UNIT_STARTED event marks when the code from the Execute Anonymous window was kicked off. This line is highlighted in red in the image below.
2023-04-02 22:16:10,789 - INFO - No related goals found
2023-04-02 22:16:18,535 - INFO - Processed paragraph 20 in d2.txt: Screenshot of the Debug Log in Developer Console, highlighting the code_unit_started events
2023-04-02 22:16:18,535 - INFO - No related goals found
2023-04-02 22:16:19,390 - INFO - Processed paragraph 21 in d2.txt: The second CODE_UNIT_STARTED line that is highlighted represents when code for the BeforeInsert event was executed.
2023-04-02 22:16:19,390 - INFO - No related goals found
2023-04-02 22:16:20,578 - INFO - Processed paragraph 22 in d2.txt: You can’t see this in the image, but if you’re following along with your own instance of Developer Console, scroll down further in the results and look for other instances of CODE_UNIT_STARTED. You should see at least one more instance representing when code for the AfterInsert event was executed. If you had created workflow rules that fired when a new account was created, they too would show up in the execution log. All this code operates under the same execution context, and thus, is subject to the same set of governor limits.
2023-04-02 22:16:20,578 - INFO - Related goals: Given a scenario, identify the implications of governor limits on Apex transactions.
2023-04-02 22:16:22,626 - INFO - Processed paragraph 23 in d2.txt: You may be asking yourself, why is this so important to understand? Well, because Salesforce is a multi-tenanted environment, those governor limits are vital in keeping each instance of a Salesforce org from consuming too many resources. Essentially, they keep the whole system from crashing.
2023-04-02 22:16:22,626 - INFO - Related goals: Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries.
2023-04-02 22:16:23,852 - INFO - Processed paragraph 24 in d2.txt: Working with Limits
And this brings us back to the subject of working with limits. The two limits you will probably be the most concerned with involve the number of SOQL queries or DML statements. These tend to trip up developers new to the platform, so we wanted to spend some extra time focusing on how to avoid them.
2023-04-02 22:16:23,852 - INFO - Related goals: Given a scenario, identify the implications of governor limits on Apex transactions.
2023-04-02 22:16:25,905 - INFO - Processed paragraph 25 in d2.txt: Note
Note
There are lots of limits to be aware of, and they tend to change with each major release. Additionally, it’s not uncommon for limits to get looser rather than tighter, so be sure to check out the latest by looking at the Execution Governors and Limits link in Resources.
2023-04-02 22:16:25,905 - INFO - No related goals found
2023-04-02 22:16:27,641 - INFO - Processed paragraph 26 in d2.txt: Working in Bulk
Many developers fall into a common trap of designing their code to work with a single record. They quickly learn that on the Lightning Platform this can be a huge mistake.
2023-04-02 22:16:27,641 - INFO - No related goals found
2023-04-02 22:16:28,869 - INFO - Processed paragraph 27 in d2.txt: Apex triggers can receive up to 200 records at once. Currently, the synchronous limit for the total number of SOQL queries is 100, and 150 for the total number of DML statements issued So, if you have a trigger that performs a SOQL query or DML statement inside of a loop and that trigger was fired for a bulk operation, guess what?
2023-04-02 22:16:28,869 - INFO - Related goals: Given a scenario, identify the implications of governor limits on Apex transactions.
2023-04-02 22:16:40,236 - INFO - Processed paragraph 28 in d2.txt: BOOM!!!
2023-04-02 22:16:40,236 - INFO - No related goals found
2023-04-02 22:16:41,669 - INFO - Processed paragraph 29 in d2.txt: That’s right, you’re going to get a limits error. It’s possible to deploy code and have it run fine for a while before the limit is discovered. The developer then has to quickly go back and figure out how to “bulkify” the code. It’s not uncommon for this second attempt to take longer than the initial design. To avoid this scenario, design your Apex code to handle bulk operations from the very start. Learn about ways to do this from the Bulk Apex Triggers module.
2023-04-02 22:16:41,669 - INFO - Related goals: Given a scenario, identify the implications of governor limits on Apex transactions.
2023-04-02 22:16:42,900 - INFO - Processed paragraph 30 in d2.txt: Maybe you noticed, maybe you didn’t, but the trigger handler code we created earlier didn’t use a bulk pattern, and therefore it’s prone to limits errors. To remind you, below is what the original code looked like.
2023-04-02 22:16:42,900 - INFO - No related goals found
2023-04-02 22:16:48,840 - INFO - Processed paragraph 31 in d2.txt: public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            insert opp;
        }
    }
}
Notice that the insert DML operation is inside the for loop. This is bad, very bad, and something to always avoid.
2023-04-02 22:16:48,840 - INFO - No related goals found
2023-04-02 22:16:49,955 - INFO - Processed paragraph 32 in d2.txt: Luckily for us, we can fix this code by changing it to write to a list variable inside of the loop and then insert the contents of the list in one step.
2023-04-02 22:16:49,955 - INFO - Related goals: Given a scenario, follow best practices to write Apex classes and triggers.
2023-04-02 22:16:55,084 - INFO - Processed paragraph 33 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > Open.
For the entity type, select Classes. Select AccountHandler as the entity.
Click Open.
Delete the existing code, and insert the following snippet:
public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        List<Opportunity> opps = new List<Opportunity>();
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            opps.add(opp);
        }
        if (opps.size() > 0) {
            insert opps;
        }
    }
}
Press Ctrl + S to save your class.
Now that we fixed the trigger handler code, let’s test to make sure that the trigger can handle a load of 200 records. As we’re sure you know, writing unit tests to ensure that the code works is a best practice.
2023-04-02 22:16:55,084 - INFO - Related goals: Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data.
2023-04-02 22:16:59,693 - INFO - Processed paragraph 34 in d2.txt: In Developer Console, select File > New > Apex Class.
Enter AccountTrigger_Test for the class name and click OK.
Delete the existing code, and insert the following snippet:
@isTest
private class AccountTrigger_Test {
    @isTest static void TestCreateNewAccountInBulk() {
        // Test Setup data
        // Create 200 new Accounts
        List<Account> accts = new List<Account>();
        for(Integer i=0; i < 200; i++) {
            Account acct = new Account(Name='Test Account ' + i);
            accts.add(acct);
        }              
        // Perform Test
        Test.startTest();
        insert accts;                               
        Test.stopTest();
        // Verify that 200 new Accounts were inserted
        List<Account> verifyAccts = [SELECT Id FROM Account];
        System.assertEquals(200, verifyAccts.size());    
        // Also verify that 200 new Opportunities were inserted
        List<Opportunity> verifyOpps = [SELECT Id FROM Opportunity];                              
        System.assertEquals(200, verifyOpps.size());                             
    }
}
Press Ctrl + S to save your class.
Select Test > New Run.
Select AccountTrigger_Test as the TestClass, and TestCreateNewAccountInBulk as the test method.
Click Run.
Select the Tests tab and verify that the test runs to completion with no failures, as indicated by a green checkmark in the Status column.
Note
Note
Although we haven’t yet talked about unit tests, don’t worry. They work much the same way in the Lightning Platform as they do in .NET, with just a few different keywords. You’ll catch on pretty quickly as to how they’re structured. Learn more about testing Apex triggers by checking out the link in Resources.
2023-04-02 22:16:59,693 - INFO - Related goals: Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data.
2023-04-02 22:17:01,952 - INFO - Processed paragraph 35 in d2.txt: Tell Me More
Apex uses a familiar try-catch-finally block to handle exceptions. But your catch statement and possible rollback could differ depending on where the Apex code is executed. Check out the link in Resources about best practices when dealing with try, catch, and rollback in Apex.
2023-04-02 22:17:01,952 - INFO - Related goals: Implement exception handling in Apex, including custom exceptions as needed.
2023-04-02 22:17:03,481 - INFO - Processed paragraph 36 in d2.txt: There is no such thing as an application or session variable in the Lightning Platform. If you need data to persist between classes, you do have static variables, but keep in mind that static variables in the Lightning Platform don’t work the same as they do in .NET. In the Lightning Platform world, a static variable can only persist information within a single execution context, although other options for maintaining data across trigger invocations are available. Check out the Advanced Apex links in Internet Resources to learn more.
2023-04-02 22:17:03,481 - INFO - Related goals: Declare variables, constants, methods, and use modifiers and Apex interfaces.
2023-04-02 22:17:04,510 - INFO - Processed paragraph 37 in d2.txt: When working with limits, there are many tradeoffs to consider, especially for developers of managed packages. By the way, Salesforce partners typically use managed packages to distribute and sell applications. In this module, we just skimmed the surface of what you need to know. If you’re serious about Apex development, check out the Advanced Apex links in Internet Resources.
2023-04-02 22:17:04,510 - INFO - No related goals found
2023-04-02 22:17:07,566 - INFO - Processed paragraph 0 in d3.txt: Use Asynchronous Apex
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-02 22:17:07,566 - INFO - No related goals found
2023-04-02 22:17:26,626 - INFO - Processed paragraph 1 in d3.txt: Know when to use Asynchronous Apex
Use future methods to handle a web callout
Work with the batchable interface to process a large number of records
Understand the advantages of using the queueable interface when you need to meet in the middle
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-02 22:17:26,626 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework., Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs., Given a scenario, identify the options and considerations when importing and exporting data into development environments., Identify the capabilities of the declarative process automation features., Declare variables, constants, methods, and use modifiers and Apex interfaces., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:17:32,258 - INFO - Processed paragraph 2 in d3.txt: 
2023-04-02 22:17:32,258 - INFO - No related goals found
2023-04-02 22:17:35,331 - INFO - Processed paragraph 3 in d3.txt: (This clip starts at the 32:07 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-02 22:17:35,331 - INFO - No related goals found
2023-04-02 22:17:37,177 - INFO - Processed paragraph 4 in d3.txt: When to Go Asynchronous
As a .NET developer, you probably have already been exposed to the world of asynchronous programming. We’ll assume that you know what it is and understand the benefits to using this type of programming model. What you might not know is when to use asynchronous programming on the Lightning Platform.
2023-04-02 22:17:37,177 - INFO - Related goals: Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:17:38,094 - INFO - Processed paragraph 5 in d3.txt: The following three reasons are usually behind choosing asynchronous programming.
2023-04-02 22:17:38,094 - INFO - No related goals found
2023-04-02 22:17:43,420 - INFO - Processed paragraph 6 in d3.txt: Processing a very large number of records. This reason is unique to the multi-tenanted world of the Lightning Platform where limits rule. The limits associated with asynchronous processes are higher than those with synchronous processes. Therefore, if you need to process thousands or even millions of records, asynchronous processing is your best bet.
Making callouts to external web services. Callouts can take a long time to process, but in the Lightning Platform, triggers can’t make callouts directly.
Creating a better and faster user experience by offloading some processing to asynchronous calls. Why do everything at once? If it can wait, let it.
Future Methods
In situations where you need to make a callout to a web service or want to offload simple processing to an asynchronous task, creating a future method could be the way to go.
2023-04-02 22:17:43,420 - INFO - Related goals: Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:17:44,305 - INFO - Processed paragraph 7 in d3.txt: Changing a method from synchronous to asynchronous processing is amazingly easy. Essentially, you just add the @future annotation to your method. Other than that, just make sure that the method is static and returns only a void type. For example, to create a method for performing a web service callout, we could do something like this:
2023-04-02 22:17:44,305 - INFO - No related goals found
2023-04-02 22:17:49,054 - INFO - Processed paragraph 8 in d3.txt: public class MyFutureClass {
    // Include callout=true when making callouts
    @future(callout=true)    
    static void myFutureMethod(Set<Id> ids) {
        // Get the list of contacts in the future method since
        // you cannot pass objects as arguments to future methods
        List<Contact> contacts = [SELECT Id, LastName, FirstName, Email
            FROM Contact WHERE Id IN :ids];
        // Loop through the results and call a method
        // which contains the code to do the actual callout
        for (Contact con: contacts) {
            String response = anotherClass.calloutMethod(con.Id,
                con.FirstName,
                con.LastName,
                con.Email);
            // May want to add some code here to log
            // the response to a custom object
        }
    }
}
We could then call it just like we would any other static method. Easy peasy!
2023-04-02 22:17:49,054 - INFO - No related goals found
2023-04-02 22:17:50,392 - INFO - Processed paragraph 9 in d3.txt: Future Limitations
Future methods have been around for several years. Although they offer a great option for Salesforce developers, they’re not without drawbacks. Here are some limitations to consider before using a future method.
2023-04-02 22:17:50,392 - INFO - No related goals found
2023-04-02 22:17:52,231 - INFO - Processed paragraph 10 in d3.txt: You can’t track execution because no Apex job ID is returned.
Parameters must be primitive data types, arrays of primitive data types, or collections of primitive data types. Future methods can’t take objects as arguments.
You can’t chain future methods and have one call another.
Although asynchronous calls are sometimes done to avoid limits, you still need to consider limits. Check out the link concerning Execution Governors and Limits in Resources.
2023-04-02 22:17:52,231 - INFO - No related goals found
2023-04-02 22:17:55,405 - INFO - Processed paragraph 11 in d3.txt: Batch or Scheduled Apex
Another long-used asynchronous tool is the batchable interface. The No. 1 reason to use it is if you need to process a large number of records. For example, if you want to clean up or archive up to 50 million records, the batchable interface is your answer. You can even schedule your batches to run at a particular time.
2023-04-02 22:17:55,405 - INFO - Related goals: Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc.
2023-04-02 22:17:58,784 - INFO - Processed paragraph 12 in d3.txt: To use it, your class implements the Database.Batchable interface. You also define start(), execute(), and finish() methods. You can then invoke a batch class using the Database.executeBatch method. For example, the following code creates a batchable class that processes all accounts in an org and then sends an email when it is done.
2023-04-02 22:17:58,784 - INFO - No related goals found
2023-04-02 22:18:02,676 - INFO - Processed paragraph 13 in d3.txt: global class MyBatchableClass implements
            Database.Batchable<sObject>,
            Database.Stateful {  
    // Used to record the total number of Accounts processed
    global Integer numOfRecs = 0;
    // Used to gather the records that will be passed to the interface method
    // This method will only be called once and will return either a
    // Database.QueryLocator object or an Iterable that contains the records
    // or objects passed to the job.            
    global Database.QueryLocator start(Database.BatchableContext bc) {
        return Database.getQueryLocator('SELECT Id, Name FROM Account');                
    }
    // This is where the actual processing occurs as data is chunked into
    // batches and the default batch size is 200.
    global void execute(Database.BatchableContext bc, List<Account> scope) {
        for (Account acc : scope) {
            // Do some processing here
            // and then increment the counter variable
            numOfRecs = numOfRecs + 1;
        }     
    }
    // Used to execute any post-processing that may need to happen. This
    // is called only once and after all the batches have finished.
    global void finish(Database.BatchableContext bc) {
        EmailManager.sendMail('someAddress@somewhere.com',
                              numOfRecs + ' Accounts were processed!',
                              'Meet me at the bar for drinks to celebrate');            
    }
}
You could then invoke the batch class using anonymous code such as this:
2023-04-02 22:18:02,676 - INFO - No related goals found
2023-04-02 22:18:04,488 - INFO - Processed paragraph 14 in d3.txt: MyBatchableClass myBatchObject = new MyBatchableClass();
Database.executeBatch(myBatchObject);
Note
Note
We didn’t specifically cover Scheduled Apex in this unit, but it’s similar to the batchable interface. It implements the schedulable interface, and you can use it to invoke Apex at specific times. Learn more about it by checking out the Asynchronous Apex  module.
2023-04-02 22:18:04,488 - INFO - No related goals found
2023-04-02 22:18:05,341 - INFO - Processed paragraph 15 in d3.txt: Batchable Limitations
The batchable interface is great, but as with just about everything, consider its limitations.
2023-04-02 22:18:05,341 - INFO - No related goals found
2023-04-02 22:18:07,079 - INFO - Processed paragraph 16 in d3.txt: Troubleshooting can be troublesome.
Jobs are queued and subject to server availability, which can sometimes take longer than anticipated.
Have we talked about limits yet?
And Then There Was Queueable Apex
For a long time, future methods and the batchable interface were the primary ways developers had to do asynchronous processing. But remember all those limitations we talked about? Well, they were causing problems for some developers, so there was an outcry for a better solution.
2023-04-02 22:18:07,079 - INFO - Related goals: Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
2023-04-02 22:18:08,602 - INFO - Processed paragraph 17 in d3.txt: In Winter ’15, Salesforce responded with Queueable Apex. It represents the best of future methods and the batchable interface, all rolled up into one super-duper asynchronous tool. Developers forced to use the slower batchable interface to get around limitations of future methods could now return to a tool that made more sense. Queueable Apex provides the following benefits to future methods.
2023-04-02 22:18:08,602 - INFO - No related goals found
2023-04-02 22:18:10,180 - INFO - Processed paragraph 18 in d3.txt: Non-primitive types - Classes can accept parameter variables of non-primitive data types, such as sObjects or custom Apex types.
Monitoring - When you submit your job, a jobId is returned that you can use to identify the job and monitor its progress.
Chaining jobs - You can chain one job to another job by starting a second job from a running job. Chaining jobs is useful for sequential processing.
So how does it work? Glad you asked.
2023-04-02 22:18:10,217 - INFO - No related goals found
2023-04-02 22:18:26,338 - INFO - Processed paragraph 19 in d3.txt: Because Queueable Apex includes the best of future methods, it’s much easier to implement than Batch Apex. It just doesn’t have those pesky limitations we talked about. To demonstrate how it works, let’s take the sample code that used a future method to do a web callout and implement it using Queueable Apex.
2023-04-02 22:18:26,338 - INFO - Related goals: Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework., Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries., Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs., Given a scenario, identify the options and considerations when importing and exporting data into development environments., Identify the capabilities of the declarative process automation features., Given a scenario, use and apply Apex control flow statements., Given a scenario, write SOSL, SOQL, and DML statements in Apex., Given a scenario, follow best practices to write Apex classes and triggers., Given a scenario, identify the implications of governor limits on Apex transactions., Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading., Implement exception handling in Apex, including custom exceptions as needed., Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed., Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component., Given a scenario, prevent user interface and data access security vulnerabilities., Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce., Describe the use cases and best practices for Lightning Web Component events., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:18:40,158 - INFO - Processed paragraph 20 in d3.txt: public class MyQueueableClass implements Queueable {
    private List<Contact> contacts;
    // Constructor for the class, where we pass
    // in the list of contacts that we want to process
    public MyQueueableClass(List<Contact> myContacts) {
        contacts = myContacts;
    }
    public void execute(QueueableContext context) {
        // Loop through the contacts passed in through
        // the constructor and call a method
        // which contains the code to do the actual callout
        for (Contact con: contacts) {
            String response = anotherClass.calloutMethod(con.Id,
                    con.FirstName,
                    con.LastName,
                    con.Email);
            // May still want to add some code here to log
            // the response to a custom object
        }
    }
}
To invoke Queueable Apex, you need something like the following:
2023-04-02 22:18:40,158 - INFO - Related goals: Implement exception handling in Apex, including custom exceptions as needed.
2023-04-02 22:18:45,894 - INFO - Processed paragraph 21 in d3.txt: List<Contact> contacts = [SELECT Id, LastName, FirstName, Email
    FROM Contact WHERE Is_Active__c = true];
Id jobId = System.enqueueJob(new MyQueueableClass(contacts));
Tell Me More
Along with queueable interfaces, Salesforce also introduced the Apex Flex Queue in Spring ’15, which eliminated the limitation of five concurrent batches. It also allows developers to monitor and manage the order of queued jobs. Check the links in Resources for more info.
2023-04-02 22:18:45,894 - INFO - Related goals: Given a scenario, use declarative functionality and Apex together to automate business logic., Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc., Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data., Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc., Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-02 22:18:47,123 - INFO - Processed paragraph 22 in d3.txt: This module introduced .NET developers to the asynchronous options available on the Lightning Platform. For a deep dive on this topic, including testing, monitoring jobs, and best practices, check out the Asynchronous Apex module.
2023-04-02 22:18:47,123 - INFO - No related goals found
2023-04-02 22:18:47,987 - INFO - Processed paragraph 0 in d4.txt: Debug and Run Diagnostics
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-02 22:18:47,987 - INFO - No related goals found
2023-04-02 22:18:49,678 - INFO - Processed paragraph 1 in d4.txt: Understand which debugging features are available on the Lightning Platform
Use the Log Inspector in Developer Console to examine debug logs
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-02 22:18:49,678 - INFO - No related goals found
2023-04-02 22:18:55,528 - INFO - Processed paragraph 2 in d4.txt: 
2023-04-02 22:18:55,528 - INFO - No related goals found
2023-04-02 22:18:58,498 - INFO - Processed paragraph 3 in d4.txt: (This clip starts at the 40:30 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-02 22:18:58,498 - INFO - No related goals found
2023-04-02 22:19:00,635 - INFO - Processed paragraph 4 in d4.txt: Taking a Step Back
We’re not going to try and tell you that debugging on the Lightning Platform is just as easy as it is in Visual Studio. To be perfectly honest, it’s not even close. Debugging in a multi-tenant cloud environment presents unique challenges. That doesn’t mean you can’t do debugging and diagnostic work on the Lightning Platform. It’s just that debugging is different from what you’re used to. The good news is that in this area Salesforce has made enormous strides recently, and more is coming with every release.
2023-04-02 22:19:00,635 - INFO - No related goals found
2023-04-02 22:19:03,327 - INFO - Processed paragraph 5 in d4.txt: Your Friend, the Debug Log
In the world of the Lightning Platform, the debug log is where you find most of what you need to debug and analyze your code. You’ve already seen how you can write to the debug log. That is done with something like the following.
2023-04-02 22:19:03,327 - INFO - Related goals: Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
2023-04-02 22:19:08,462 - INFO - Processed paragraph 6 in d4.txt: System.debug('My Debug Message');
You can also specify one of the following logging levels.
2023-04-02 22:19:08,462 - INFO - Related goals: Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
2023-04-02 22:19:09,438 - INFO - Processed paragraph 7 in d4.txt: NONE
ERROR
WARN
INFO
DEBUG
FINE
FINER
FINEST
These levels run from lowest to highest and are cumulative. So if you pick the finest level, you get all messages that are logged as error, warn, info, and so on. There are also several debug log categories, and the amount of information logged depends on the log level. Learn more about debugging for different users by checking out the links in Resources.
2023-04-02 22:19:09,438 - INFO - No related goals found
2023-04-02 22:19:15,038 - INFO - Processed paragraph 8 in d4.txt: And why is all this so important to know?
2023-04-02 22:19:15,038 - INFO - No related goals found
2023-04-02 22:19:17,331 - INFO - Processed paragraph 9 in d4.txt: Ok, so we know you’ve heard a lot about limits, but understanding limits are critical to your success, so bear with us. Each debug log must be 20 MB or smaller. If it exceeds this amount, you won’t see everything you need. Additionally, each org can retain up to 1,000 MB of debug logs. The oldest logs are overwritten.
2023-04-02 22:19:17,331 - INFO - Related goals: Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
2023-04-02 22:19:19,893 - INFO - Processed paragraph 10 in d4.txt: Because debug logs are your primary way of getting debug information about your application, you want to make sure to not exceed these limits. If you never see an error message, you can’t possibly do anything to address it. Check out the links in Resources about Advanced Apex Debugging and Best Practices for tips on how to avoid these kinds of issues.
2023-04-02 22:19:19,893 - INFO - Related goals: Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
2023-04-02 22:19:21,700 - INFO - Processed paragraph 11 in d4.txt: Use the Log Inspector
Developer Console has grown quite a bit in the past few releases. One of its more useful features is the Log Inspector. To see how it works, let’s walk through running some anonymous code and viewing the results.
2023-04-02 22:19:21,700 - INFO - No related goals found
2023-04-02 22:19:28,289 - INFO - Processed paragraph 12 in d4.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Change Log Levels.
Click the Add/Change link in General Trace Setting for You.
Select INFO as the debug level for all columns.
Click Done.
Click Done.
Select Debug > Perspective Manager.
Select All (Predefined) and click Set Default.
Click Yes to change this to your default perspective.
Close the Developer Console Perspective window.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
System.debug(LoggingLevel.INFO, 'My Info Debug Message');
System.debug(LoggingLevel.FINE, 'My Fine Debug Message');
List<Account> accts = [SELECT Id, Name FROM Account];
for(Account a : accts) {
    System.debug('Account Name: ' + a.name);
    System.debug('Account Id: ' + a.Id);
}
Make sure that Open Log is selected, and click Execute.
Select Debug > Switch Perspective > All (Predefined).
Examine the results in the Timeline and Executed Units tabs.
Under Execution Log, select the Filter option, and enter FINE. Because we set the debug level to INFO for Apex Code, no results appear.
Select Debug > Change Log Levels.
Click the Add/Change link in General Trace Setting for You.
Change the DebugLevel for ApexCode and Profiling to FINEST.
Click Done.
Click Done.
Select Debug > Open Execute Anonymous Window.
Leave the code that is currently there, and click Execute.
Under Execution Log, select the Filter option, and enter FINE. The filter search is case sensitive. You now see "My Fine Debug Message" displayed. You should also notice a size difference between the two latest logs in the Logs tab.
Set Checkpoints
As a .NET developer, you’re used to setting breakpoints in your applications. But in a cloud-based, multi-tenanted environment where everyone is sharing resources, allowing everyone to halt execution and keep database connections open is disastrous.
2023-04-02 22:19:28,289 - INFO - No related goals found
2023-04-02 22:19:34,232 - INFO - Processed paragraph 13 in d4.txt: Checkpoints are similar to breakpoints in that they reveal a lot of detailed execution information about a line of code. They just don’t stop execution on that line.
2023-04-02 22:19:34,232 - INFO - No related goals found
2023-04-02 22:19:35,245 - INFO - Processed paragraph 14 in d4.txt: To see how they work, let’s walk through setting a checkpoint on a line of code that you created in an earlier unit on Understanding Execution Context. If you haven’t created the handler and trigger code for the AccountTrigger, go back to that unit and complete that section before continuing.
2023-04-02 22:19:35,245 - INFO - No related goals found
2023-04-02 22:19:36,990 - INFO - Processed paragraph 15 in d4.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select File > Open.
Select Classes as the entity type, and AccountHandler as the entity.
Click Open.
Position your cursor over line 10 in the left margin and click once. A red dot appears next to the line number.
Double-click the latest entry in the Logs panel to open the debug log.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
Account acct = new Account(
    Name='Test Account 3',
    Phone='(415)555-8989',
    NumberOfEmployees=30,
    BillingCity='San Francisco');
insert acct;
Make sure that Open Log is selected, and click Execute.
Click the Checkpoints tab, and double-click the first entry that appears. The Checkpoint Inspector appears.
On the Symbols tab, expand the nodes within the execution tree. Notice the Key and Value columns.
Click the Heap tab. Notice the Count and Total Size columns.
What's Next?
Now that you have a grasp of Apex basics you are ready to continue to your Salesforce journey. Head on over to our Developer Beginner Trail to leverage your existing development skills to build apps fast on the Salesforce Platform.
2023-04-02 22:19:36,990 - INFO - Related goals: Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
2023-04-02 22:19:44,262 - INFO - Processed paragraph 16 in d4.txt: Resources
Debug Log in the Apex Code Developer’s Guide
Working with Logs in the Apex Code Developer’s Guide
Examples of Using the Log Inspector
Setting Checkpoints in Apex Code
2023-04-02 22:19:44,262 - INFO - No related goals found
2023-04-03 20:46:32,502 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:46:32,503 - INFO - No related goals found
2023-04-03 20:46:33,107 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 20:46:33,108 - INFO - No related goals found
2023-04-03 20:46:34,013 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 20:46:34,013 - INFO - No related goals found
2023-04-03 20:46:34,906 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 20:46:34,906 - INFO - No related goals found
2023-04-03 20:46:35,924 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 20:46:35,924 - INFO - No related goals found
2023-04-03 20:46:37,240 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 20:46:37,240 - INFO - No related goals found
2023-04-03 20:46:38,301 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 20:46:38,302 - INFO - No related goals found
2023-04-03 20:46:39,518 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 20:46:39,518 - INFO - No related goals found
2023-04-03 20:46:40,375 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-03 20:46:40,375 - INFO - No related goals found
2023-04-03 20:46:41,200 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-03 20:46:41,200 - INFO - No related goals found
2023-04-03 20:46:42,171 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-03 20:46:42,171 - INFO - No related goals found
2023-04-03 20:46:43,031 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-03 20:46:43,031 - INFO - No related goals found
2023-04-03 20:46:43,867 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-03 20:46:43,868 - INFO - No related goals found
2023-04-03 20:46:45,817 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-03 20:46:45,818 - INFO - No related goals found
2023-04-03 20:46:46,751 - INFO - Processed paragraph 14 in d1.txt: public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
2023-04-03 20:46:46,751 - INFO - No related goals found
2023-04-03 20:46:48,322 - INFO - Processed paragraph 15 in d1.txt: The basic syntax for defining classes is:
2023-04-03 20:46:48,322 - INFO - No related goals found
2023-04-03 20:46:49,021 - INFO - Processed paragraph 16 in d1.txt: private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
2023-04-03 20:46:49,021 - INFO - No related goals found
2023-04-03 20:46:49,975 - INFO - Processed paragraph 17 in d1.txt: Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
2023-04-03 20:46:49,975 - INFO - No related goals found
2023-04-03 20:46:50,842 - INFO - Processed paragraph 18 in d1.txt: Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
2023-04-03 20:46:50,843 - INFO - No related goals found
2023-04-03 20:46:51,465 - INFO - Processed paragraph 19 in d1.txt: Besides primitives, supported data types include sObjects, either as a generic sObject or a specific one, such as an Account or Contact. Remember, an sObject is just a Salesforce object. You can think of it as a table in a database. The sObject can be either a standard one that comes built in with Salesforce or a custom one that you define yourself.
2023-04-03 20:46:51,465 - INFO - No related goals found
2023-04-03 20:46:52,078 - INFO - Processed paragraph 20 in d1.txt: Additionally, a data type can be a typed list of values, also known as an enum. But watch out, because these aren’t the same enums you’re used to working with in .NET. In Apex, you can use enums with numbers, but you can’t define what these number values are. Also, the ordinal assignment starts at zero. For example, if you had an enum like the following.
2023-04-03 20:46:52,078 - INFO - No related goals found
2023-04-03 20:46:53,018 - INFO - Processed paragraph 21 in d1.txt: public enum myEnums {
            Enum1,
            Enum2,
            Enum3
 }
If you tried to access the ordinal value of the third enum, the value of the enumOrd variable would be 2.
2023-04-03 20:46:53,018 - INFO - No related goals found
2023-04-03 20:46:53,876 - INFO - Processed paragraph 22 in d1.txt: Integer enumOrd = myEnums.Enum3.ordinal();
Working with Collections
.NET supports a large collection library with numerous types and extension methods. And here’s some good news. Apex has only the following three collections. Talk about simple, right?
2023-04-03 20:46:53,876 - INFO - No related goals found
2023-04-03 20:46:54,734 - INFO - Processed paragraph 23 in d1.txt: List
A list is an ordered collection of elements that works much the same as a traditional array. In fact, arrays in Apex are synonymous with lists, and you can use them interchangeably. For example, the following is one way to declare a variable as a list of strings.
2023-04-03 20:46:54,735 - INFO - No related goals found
2023-04-03 20:47:47,873 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:47:47,873 - INFO - No related goals found
2023-04-03 20:47:48,805 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 20:47:48,805 - INFO - No related goals found
2023-04-03 20:47:49,734 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 20:47:49,734 - INFO - No related goals found
2023-04-03 20:47:50,631 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 20:47:50,632 - INFO - No related goals found
2023-04-03 20:47:51,520 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 20:47:51,520 - INFO - No related goals found
2023-04-03 20:47:52,421 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 20:47:52,422 - INFO - No related goals found
2023-04-03 20:47:53,351 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 20:47:53,352 - INFO - No related goals found
2023-04-03 20:47:54,215 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 20:47:54,215 - INFO - No related goals found
2023-04-03 20:47:55,124 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-03 20:47:55,124 - INFO - No related goals found
2023-04-03 20:47:55,687 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-03 20:47:55,687 - INFO - No related goals found
2023-04-03 20:47:56,574 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-03 20:47:56,574 - INFO - No related goals found
2023-04-03 20:47:57,801 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-03 20:47:57,801 - INFO - No related goals found
2023-04-03 20:47:58,379 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-03 20:47:58,379 - INFO - No related goals found
2023-04-03 20:48:00,179 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-03 20:48:00,179 - INFO - No related goals found
2023-04-03 20:48:01,146 - INFO - Processed paragraph 14 in d1.txt: public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
2023-04-03 20:48:01,146 - INFO - No related goals found
2023-04-03 20:48:02,190 - INFO - Processed paragraph 15 in d1.txt: The basic syntax for defining classes is:
2023-04-03 20:48:02,190 - INFO - No related goals found
2023-04-03 20:48:03,173 - INFO - Processed paragraph 16 in d1.txt: private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
2023-04-03 20:48:03,173 - INFO - No related goals found
2023-04-03 20:48:03,757 - INFO - Processed paragraph 17 in d1.txt: Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
2023-04-03 20:48:03,757 - INFO - No related goals found
2023-04-03 20:48:04,656 - INFO - Processed paragraph 18 in d1.txt: Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
2023-04-03 20:48:04,657 - INFO - No related goals found
2023-04-03 20:49:26,792 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 20:49:27,817 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:49:27,817 - INFO - No related goals found
2023-04-03 20:49:27,818 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 20:49:28,679 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 20:49:28,680 - INFO - No related goals found
2023-04-03 20:49:28,681 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""
"""
2023-04-03 20:49:29,814 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 20:49:29,814 - INFO - No related goals found
2023-04-03 20:49:29,815 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
"""
2023-04-03 20:49:30,688 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 20:49:30,688 - INFO - No related goals found
2023-04-03 20:49:30,689 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
"""
2023-04-03 20:49:31,599 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 20:49:31,599 - INFO - No related goals found
2023-04-03 20:49:31,601 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
"""
2023-04-03 20:49:32,486 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 20:49:32,486 - INFO - No related goals found
2023-04-03 20:49:32,487 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
"""
2023-04-03 20:49:34,025 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 20:49:34,025 - INFO - No related goals found
2023-04-03 20:49:34,027 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
"""
2023-04-03 20:49:34,953 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 20:49:34,953 - INFO - No related goals found
2023-04-03 20:49:34,955 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
"""
2023-04-03 20:49:36,678 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-03 20:49:36,678 - INFO - No related goals found
2023-04-03 20:49:36,680 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
"""
2023-04-03 20:49:37,556 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-03 20:49:37,556 - INFO - No related goals found
2023-04-03 20:49:37,557 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
"""
2023-04-03 20:49:38,647 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-03 20:49:38,647 - INFO - No related goals found
2023-04-03 20:49:38,648 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
"""
2023-04-03 20:49:39,607 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-03 20:49:39,607 - INFO - No related goals found
2023-04-03 20:49:39,608 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
"""
2023-04-03 20:49:40,203 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-03 20:49:40,203 - INFO - No related goals found
2023-04-03 20:49:40,205 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""For example, here is what an Apex class named HelloWorld would look like.
"""
2023-04-03 20:49:41,917 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-03 20:49:41,917 - INFO - No related goals found
2023-04-03 20:49:41,918 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
"""
2023-04-03 20:49:42,789 - INFO - Processed paragraph 14 in d1.txt: public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
2023-04-03 20:49:42,789 - INFO - No related goals found
2023-04-03 20:49:42,791 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""The basic syntax for defining classes is:
"""
2023-04-03 20:49:43,714 - INFO - Processed paragraph 15 in d1.txt: The basic syntax for defining classes is:
2023-04-03 20:49:43,714 - INFO - No related goals found
2023-04-03 20:49:43,715 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
"""
2023-04-03 20:49:44,615 - INFO - Processed paragraph 16 in d1.txt: private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
2023-04-03 20:49:44,615 - INFO - No related goals found
2023-04-03 20:49:44,617 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
"""
2023-04-03 20:49:46,495 - INFO - Processed paragraph 17 in d1.txt: Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
2023-04-03 20:49:46,495 - INFO - No related goals found
2023-04-03 20:49:46,497 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
"""
2023-04-03 20:49:47,604 - INFO - Processed paragraph 18 in d1.txt: Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
2023-04-03 20:49:47,605 - INFO - No related goals found
2023-04-03 20:49:47,606 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Besides primitives, supported data types include sObjects, either as a generic sObject or a specific one, such as an Account or Contact. Remember, an sObject is just a Salesforce object. You can think of it as a table in a database. The sObject can be either a standard one that comes built in with Salesforce or a custom one that you define yourself.
"""
2023-04-03 20:49:48,173 - INFO - Processed paragraph 19 in d1.txt: Besides primitives, supported data types include sObjects, either as a generic sObject or a specific one, such as an Account or Contact. Remember, an sObject is just a Salesforce object. You can think of it as a table in a database. The sObject can be either a standard one that comes built in with Salesforce or a custom one that you define yourself.
2023-04-03 20:49:48,173 - INFO - No related goals found
2023-04-03 20:49:48,174 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""['Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]', 'Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]', 'Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]', 'Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]', 'Identify the capabilities of the declarative process automation features. [5]', 'Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]', 'Given a scenario, use and apply Apex control flow statements. [7]', 'Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]', 'Given a scenario, follow best practices to write Apex classes and triggers. [9]', 'Given a scenario, identify the implications of governor limits on Apex transactions. [10]', 'Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]', 'Implement exception handling in Apex, including custom exceptions as needed. [12]', 'Given a scenario, use declarative functionality and Apex together to automate business logic. [13]', 'Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]', 'Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]', 'Given a scenario, prevent user interface and data access security vulnerabilities. [16]', 'Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]', 'Describe the use cases and best practices for Lightning Web Component events. [17]', 'Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]', 'Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]', 'Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]', 'Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]', 'Describe the environments, requirements, and process for deploying code and associated configurations. [22]']
"""

Paragraph:
"""Additionally, a data type can be a typed list of values, also known as an enum. But watch out, because these aren’t the same enums you’re used to working with in .NET. In Apex, you can use enums with numbers, but you can’t define what these number values are. Also, the ordinal assignment starts at zero. For example, if you had an enum like the following.
"""
2023-04-03 20:52:25,790 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 20:52:26,872 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:52:26,872 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , c, o, o, n,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i, c,  , c, s, t, o, i, a, t, i, o, n, s,  , i, n, c, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , c, r, e, a, t, e,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, c, l, d, i, n, g,  , o, e, c, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, e,  , p, r, o, c, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, c, l, a, r, e,  , a, r, i, a, l, e, s,  , c, o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, c, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, c, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, c, l, d, i, n, g,  , c, s, t, o,  , e, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , d, e, c, l, a, r, a, t, i, e,  , f, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , c, o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , c, s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, c, e, .,  , e, s, c, r, i, e,  , t, h, e,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , c, t, i, o, n, s,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, e, c, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , c, o, n, t, r, o, l, l, e, r, s,  , c, l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  ,  , a, l, e, s, f, o, r, c, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, c, e, s, s, e, s,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, s,  , a, n, d,  , a, t, c, h,  , o, s,  , e, t, c, .,  , e, s, c, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:52:26,874 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 20:52:27,847 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 20:52:27,847 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:52:27,851 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""
"""
2023-04-03 20:52:30,926 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 20:52:30,926 - INFO - Related goals: n, e, r, s, t, a, n,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n,  , e, s, i, g, n,  , f, r, a, e, w, o, r, s, ,,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, w, o, r, .,  , [, 1, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, e, n, t, i, f,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s, ,,  , i, n, l, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s, ,,  , f, o, r, l, a,  , f, i, e, l, s, ,,  , a, n,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , [, 2, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , e, t, e, r, i, n, e, ,,  , r, e, a, t, e, ,,  , a, n,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , a, t, a,  , o, e, l,  , i, n, l, i, n, g,  , o, e, t, s, ,,  , f, i, e, l, s, ,,  , r, e, l, a, t, i, o, n, s, h, i, p, s, ,,  , a, n,  , e, t, e, r, n, a, l,  , s, .,  , [, 3, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, e, n, t, i, f,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n,  , o, n, s, i, e, r, a, t, i, o, n, s,  , w, h, e, n,  , i, p, o, r, t, i, n, g,  , a, n,  , e, p, o, r, t, i, n, g,  , a, t, a,  , i, n, t, o,  , e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , [, 4, ], e, n, t, i, f,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , [, 5, ], e, l, a, r, e,  , a, r, i, a, l, e, s, ,,  , o, n, s, t, a, n, t, s, ,,  , e, t, h, o, s, ,,  , a, n,  , s, e,  , o, i, f, i, e, r, s,  , a, n,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , [, 6, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , s, e,  , a, n,  , a, p, p, l,  , p, e,  , o, n, t, r, o, l,  , f, l, o, w,  , s, t, a, t, e, e, n, t, s, .,  , [, 7, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , w, r, i, t, e,  , ,,  , ,,  , a, n,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , [, 8, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , f, o, l, l, o, w,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , w, r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n,  , t, r, i, g, g, e, r, s, .,  , [, 9, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, e, n, t, i, f,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , [, 1, 0, ], e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, w, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, ,,  , t, h, e,  , s, a, e,  , o, r, e, r,  , o, f,  , e, e, t, i, o, n, ,,  , a, n,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, o, r,  , a, s, a, i, n, g, .,  , [, 1, 1, ], p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, l, i, n, g,  , i, n,  , p, e, ,,  , i, n, l, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, e, .,  , [, 1, 2, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , s, e,  , e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t,  , a, n,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , [, 1, 3, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, s, p, l, a,  , o, n, t, e, n, t,  , o, r,  , o, i, f,  , a, l, e, s, f, o, r, e,  , a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, e, .,  , [, 1, 4, ], e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, w, o, r, ,,  , i, t, s,  , e, n, e, f, i, t, s, ,,  , a, n,  , t, h, e,  , t, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , w, e,  , o, p, o, n, e, n, t, .,  , [, 1, 5, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n,  , a, t, a,  , a, e, s, s,  , s, e, r, i, t,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , [, 1, 6, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, s, p, l, a,  , a, n,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s, ,,  , i, n, l, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s, ,,  , l, o, w, ,,  , a, n,  , i, s, a, l, f, o, r, e, .,  , [, 1, 6, ], e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , [, 1, 7, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , w, o, r,  , w, i, t, h,  , a, r, i, o, s,  , t, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s, ,,  , i, n, l, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s, ,,  , l, o, w, ,,  , e, t,  , e, s, t,  , t, i, o, n, s, ,,  , e, t, .,  , [, 1, 8, ], r, i, t, e,  , a, n,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s, ,,  , o, n, t, r, o, l, l, e, r, s, ,,  , l, a, s, s, e, s, ,,  , f, l, o, w, s, ,,  , a, n,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , a, t, a, .,  , [, 1, 9, ], i, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , n, o, w,  , h, o, w,  , a, n,  , w, h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  , ,,  , a, l, e, s, f, o, r, e,  , ,,  , a, n,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , [, 2, 0, ], e, s, r, i, e,  , h, o, w,  , t, o,  , a, p, p, r, o, a, h,  , e, g, g, i, n, g,  , s, s, t, e,  , i, s, s, e, s,  , a, n,  , o, n, i, t, o, r, i, n, g,  , f, l, o, w, s, ,,  , p, r, o, e, s, s, e, s, ,,  , a, n,  , a, s, n, h, r, o, n, o, s,  , a, n,  , a, t, h,  , o, s, ,,  , e, t, .,  , [, 2, 1, ], e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s, ,,  , r, e, i, r, e, e, n, t, s, ,,  , a, n,  , p, r, o, e, s, s,  , f, o, r,  , e, p, l, o, i, n, g,  , o, e,  , a, n,  , a, s, s, o, i, a, t, e,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  , [, 2, 2, ]
2023-04-03 20:52:30,928 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
"""
2023-04-03 20:52:31,814 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 20:52:31,814 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:52:31,816 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
"""
2023-04-03 20:52:32,715 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 20:52:32,716 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:52:32,718 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
"""
2023-04-03 20:52:33,607 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 20:52:33,607 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:52:33,609 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
"""
2023-04-03 20:52:34,521 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 20:52:34,522 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:52:34,523 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
"""
2023-04-03 20:52:35,364 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 20:52:35,364 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:52:35,367 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between brackets at the end. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
"""
2023-04-03 20:53:22,737 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between square brackets. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 20:53:23,618 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:53:23,618 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , c, o, o, n,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i, c,  , c, s, t, o, i, a, t, i, o, n, s,  , i, n, c, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , c, r, e, a, t, e,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, c, l, d, i, n, g,  , o, e, c, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, e,  , p, r, o, c, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, c, l, a, r, e,  , a, r, i, a, l, e, s,  , c, o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, c, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, c, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, c, l, d, i, n, g,  , c, s, t, o,  , e, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , d, e, c, l, a, r, a, t, i, e,  , f, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , c, o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , c, s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, c, e, .,  , e, s, c, r, i, e,  , t, h, e,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , c, t, i, o, n, s,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, e, c, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , c, o, n, t, r, o, l, l, e, r, s,  , c, l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  ,  , a, l, e, s, f, o, r, c, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, c, e, s, s, e, s,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, s,  , a, n, d,  , a, t, c, h,  , o, s,  , e, t, c, .,  , e, s, c, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:53:23,620 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between square brackets. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 20:53:24,440 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 20:53:24,440 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:53:24,442 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between square brackets. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""
"""
2023-04-03 20:53:25,374 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 20:53:25,375 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:53:25,377 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between square brackets. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
"""
2023-04-03 20:53:26,362 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 20:53:26,363 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:53:26,366 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between square brackets. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
"""
2023-04-03 20:53:27,255 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 20:53:27,255 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:53:27,257 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between square brackets. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
"""
2023-04-03 20:53:28,169 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 20:53:28,169 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:53:28,171 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals have an identifier between square brackets. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
"""
2023-04-03 20:55:35,431 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 20:55:36,782 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:55:36,783 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, m, m, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, v, e,  , v, e, r, s, s,  , p, r, o, g, r, a, m, m, a, t, i,  , s, t, o, m, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , f, o, r, m, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, m, m, a, r, i, e, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, m, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, v, e,  , p, r, o, e, s, s,  , a, t, o, m, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , v, a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , m, e, t, h, o, d, s,  , a, n, d,  , s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , m, p, l, e, m, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o, m,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, v, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, m, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, m, p, o, n, e, n, t, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, v, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , v, l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o, m,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, m, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , i, m, p, l, e, m, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , v, a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, m, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , v, a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, v, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s,  , r, e, i, r, e, m, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:36,785 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 20:55:37,704 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 20:55:37,704 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:37,707 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""
"""
2023-04-03 20:55:38,685 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 20:55:38,686 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, s,  , s, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , c, o, m, m, o, n,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, v, e,  , v, e, r, s, s,  , p, r, o, g, r, a, m, m, a, t, i, c,  , c, s, t, o, m, i, a, t, i, o, n, s,  , i, n, c, l, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , f, o, r, m, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, m, m, a, r, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, e, t, e, r, m, i, n, e,  , c, r, e, a, t, e,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, c, l, d, i, n, g,  , o, e, c, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, v, e,  , p, r, o, c, e, s, s,  , a, t, o, m, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, c, l, a, r, e,  , v, a, r, i, a, l, e, s,  , c, o, n, s, t, a, n, t, s,  , m, e, t, h, o, d, s,  , a, n, d,  , s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, c, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, e, c, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , m, p, l, e, m, e, n, t,  , e, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, c, l, d, i, n, g,  , c, s, t, o, m,  , e, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , d, e, c, l, a, r, a, t, i, v, e,  , f, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, m, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , c, o, m, p, o, n, e, n, t, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , p, r, e, v, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, r, i, t, y,  , v, l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , c, s, t, o, m,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, c, e, .,  , e, s, c, r, i, e,  , t, h, e,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, m, p, l, e, m, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , v, a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , c, t, i, o, n, s,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, e, c, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , c, o, n, t, r, o, l, l, e, r, s,  , c, l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , s, i, n, g,  , v, a, r, i, o, s,  , s, o, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  ,  , a, l, e, s, f, o, r, c, e,  ,  , a, n, d,  , e, v, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, c, e, s, s, e, s,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, s,  , a, n, d,  , a, t, c, h,  , o, s,  , e, t, c, .,  , e, s, c, r, i, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s,  , r, e, i, r, e, m, e, n, t, s,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:38,687 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
"""
2023-04-03 20:55:39,652 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 20:55:39,652 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:39,654 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
"""
2023-04-03 20:55:40,585 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 20:55:40,585 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:40,587 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
"""
2023-04-03 20:55:41,458 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 20:55:41,458 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:41,460 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
"""
2023-04-03 20:55:42,434 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 20:55:42,435 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:42,437 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
"""
2023-04-03 20:55:43,311 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 20:55:43,311 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:43,314 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
"""
2023-04-03 20:55:44,206 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-03 20:55:44,207 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:55:44,208 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets. 
Example: This is a learning goal [23]
 For the example the identifier is 23. Answer with a comma separated list of these identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
"""
2023-04-03 20:56:58,343 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 20:56:59,549 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:56:59,550 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, -, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , [, 1, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, v, e,  , v, e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, -, p,  , s, a, r, i, e, s, .,  , [, 2, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , [, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, e, n, t,  , e, n, v, i, r, o, n, e, n, t, s, .,  , [, ], d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, v, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , [, ], e, l, a, r, e,  , v, a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , [, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , [, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , [, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , [, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , [, 1, ], e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , [, 1, 1, ], p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , [, 1, 2, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, v, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , [, 1, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , [, 1, ], e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , [, 1, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, v, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , v, l, n, e, r, a, i, l, i, t, i, e, s, .,  , [, 1, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , [, 1, ], e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , [, 1, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , v, a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , [, 1, ], r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , v, a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , [, 1, ], i, v, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, v, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , [, 2, ], e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , [, 2, 1, ], e, s, r, i, e,  , t, h, e,  , e, n, v, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  , [, 2, 2, ]
2023-04-03 20:56:59,553 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 20:57:00,461 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 20:57:00,462 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:00,464 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""
"""
2023-04-03 20:57:01,455 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 20:57:01,455 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , c, o, o, n,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i, c,  , c, s, t, o, i, a, t, i, o, n, s,  , i, n, c, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , c, r, e, a, t, e,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, c, l, d, i, n, g,  , o, e, c, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, e,  , p, r, o, c, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, c, l, a, r, e,  , a, r, i, a, l, e, s,  , c, o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, c, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, c, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, c, l, d, i, n, g,  , c, s, t, o,  , e, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , d, e, c, l, a, r, a, t, i, e,  , f, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , c, o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , c, s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, c, e, .,  , e, s, c, r, i, e,  , t, h, e,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , c, t, i, o, n, s,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, e, c, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , c, o, n, t, r, o, l, l, e, r, s,  , c, l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  ,  , a, l, e, s, f, o, r, c, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, c, e, s, s, e, s,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, s,  , a, n, d,  , a, t, c, h,  , o, s,  , e, t, c, .,  , e, s, c, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:01,457 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
"""
2023-04-03 20:57:02,362 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 20:57:02,362 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:02,364 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
"""
2023-04-03 20:57:03,662 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 20:57:03,662 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, -, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , [, 1, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, -, p,  , s, a, r, i, e, s, .,  , [, 2, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , [, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , [, ], d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , [, ], e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , [, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , [, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , [, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , [, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , [, 1, ], e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , [, 1, 1, ], p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , [, 1, 2, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , [, 1, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , [, 1, ], e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , [, 1, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , [, 1, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , [, 1, ], e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , [, 1, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , [, 1, ], r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , [, 1, ], i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , [, 2, ], e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , [, 2, 1, ], e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  , [, 2, 2, ]
2023-04-03 20:57:03,664 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
"""
2023-04-03 20:57:04,893 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 20:57:04,893 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:04,895 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
"""
2023-04-03 20:57:05,748 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 20:57:05,748 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:05,750 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
"""
2023-04-03 20:57:06,808 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 20:57:06,808 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:06,810 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
"""
2023-04-03 20:57:07,864 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-03 20:57:07,864 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, m, m, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, m, m, a, t, i,  , s, t, o, m, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, m, i, t, s,  , f, o, r, m, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, m, m, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, m, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, m, e, n, t,  , e, n, i, r, o, n, m, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, m, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , m, e, t, h, o, d, s,  , a, n, d,  , s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , m, p, l, e, m, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o, m,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, m, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, m, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o, m,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, m, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, m, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, m, p, l, e, m, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, m, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, m, e, n, t, s,  , r, e, i, r, e, m, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:07,866 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
"""
2023-04-03 20:57:08,775 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-03 20:57:08,776 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:08,777 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
"""
2023-04-03 20:57:09,687 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-03 20:57:09,688 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:09,689 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
"""
2023-04-03 20:57:10,595 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-03 20:57:10,595 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:10,597 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
"""
2023-04-03 20:57:11,543 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-03 20:57:11,543 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, s,  , s, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , c, o, m, m, o, n,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, m, m, a, t, i, c,  , c, s, t, o, m, i, a, t, i, o, n, s,  , i, n, c, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, m, i, t, s,  , f, o, r, m, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, m, m, a, r, i, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, e, t, e, r, m, i, n, e,  , c, r, e, a, t, e,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, c, l, d, i, n, g,  , o, e, c, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, m, e, n, t,  , e, n, i, r, o, n, m, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, e,  , p, r, o, c, e, s, s,  , a, t, o, m, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, c, l, a, r, e,  , a, r, i, a, l, e, s,  , c, o, n, s, t, a, n, t, s,  , m, e, t, h, o, d, s,  , a, n, d,  , s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, c, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, c, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , m, p, l, e, m, e, n, t,  , e, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, c, l, d, i, n, g,  , c, s, t, o, m,  , e, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , s, e,  , d, e, c, l, a, r, a, t, i, e,  , f, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, m, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , c, o, m, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , c, s, t, o, m,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, c, e, .,  , e, s, c, r, i, e,  , t, h, e,  , s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, m, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, m, p, l, e, m, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , c, t, i, o, n, s,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, e, c, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , c, o, n, t, r, o, l, l, e, r, s,  , c, l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, c, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  ,  , a, l, e, s, f, o, r, c, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, c, e, s, s, e, s,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, s,  , a, n, d,  , a, t, c, h,  , o, s,  , e, t, c, .,  , e, s, c, r, i, e,  , t, h, e,  , e, n, i, r, o, n, m, e, n, t, s,  , r, e, i, r, e, m, e, n, t, s,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:11,545 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""For example, here is what an Apex class named HelloWorld would look like.
"""
2023-04-03 20:57:13,153 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-03 20:57:13,153 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 20:57:13,155 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
"""
2023-04-03 20:58:15,011 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 20:58:18,039 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:58:18,040 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, u, l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, s,  , s, u, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, u, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , c, o, m, m, o, n,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, v, e,  , v, e, r, s, u, s,  , p, r, o, g, r, a, m, m, a, t, i, c,  , c, u, s, t, o, m, i, a, t, i, o, n, s,  , i, n, c, l, u, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , f, o, r, m, u, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, u, p,  , s, u, m, m, a, r, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, e, t, e, r, m, i, n, e,  , c, r, e, a, t, e,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, c, l, u, d, i, n, g,  , o, e, c, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, v, e,  , p, r, o, c, e, s, s,  , a, u, t, o, m, a, t, i, o, n,  , f, e, a, t, u, r, e, s, .,  , e, c, l, a, r, e,  , v, a, r, i, a, l, e, s,  , c, o, n, s, t, a, n, t, s,  , m, e, t, h, o, d, s,  , a, n, d,  , u, s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, c, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , u, s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, e, c, u, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, u, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , m, p, l, e, m, e, n, t,  , e, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, c, l, u, d, i, n, g,  , c, u, s, t, o, m,  , e, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , u, s, e,  , d, e, c, l, a, r, a, t, i, v, e,  , f, u, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, u, t, o, m, a, t, e,  , u, s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , u, s, i, n, g,  , a,  , i, s, u, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , c, o, m, p, o, n, e, n, t, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , p, r, e, v, e, n, t,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, u, r, i, t, y,  , v, u, l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , u, s, e,  , a,  , c, u, s, t, o, m,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, u, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, u, a, l, f, o, r, c, e, .,  , e, s, c, r, i, e,  , t, h, e,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, m, p, l, e, m, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , v, a, r, i, o, u, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, u, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , c, t, i, o, n, s,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, e, c, u, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , c, o, n, t, r, o, l, l, e, r, s,  , c, l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , u, s, i, n, g,  , v, a, r, i, o, u, s,  , s, o, u, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , u, s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, u, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  ,  , a, l, e, s, f, o, r, c, e,  ,  , a, n, d,  , e, v, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, u, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, u, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, c, e, s, s, e, s,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, u, s,  , a, n, d,  , a, t, c, h,  , o, s,  , e, t, c, .,  , e, s, c, r, i, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s,  , r, e, u, i, r, e, m, e, n, t, s,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, u, r, a, t, i, o, n, s, .,  
2023-04-03 20:58:18,042 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 20:58:21,401 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 20:58:21,402 - INFO - Related goals
2023-04-03 20:58:21,404 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""
"""
2023-04-03 20:58:27,366 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 20:58:27,366 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, u, l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, s, ,,  , s, u, h,  , a, s,  ,  , a, r, h, i, t, e, t, u, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , o, m, m, o, n,  , u, s, e,  , a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, v, e,  , v, e, r, s, u, s,  , p, r, o, g, r, a, m, m, a, t, i,  , u, s, t, o, m, i, a, t, i, o, n, s, ,,  , i, n, l, u, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s, ,,  , f, o, r, m, u, l, a,  , f, i, e, l, d, s, ,,  , a, n, d,  , r, o, l, l, u, p,  , s, u, m, m, a, r, i, e, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , d, e, t, e, r, m, i, n, e, ,,  , r, e, a, t, e, ,,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, l, u, d, i, n, g,  , o, b, e, t, s, ,,  , f, i, e, l, d, s, ,,  , r, e, l, a, t, i, o, n, s, h, i, p, s, ,,  , a, n, d,  , e, x, t, e, r, n, a, l,  , I, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, x, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , I, d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, b, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, v, e,  , p, r, o, e, s, s,  , a, u, t, o, m, a, t, i, o, n,  , f, e, a, t, u, r, e, s, .,  , e, l, a, r, e,  , v, a, r, i, a, b, l, e, s, ,,  , o, n, s, t, a, n, t, s, ,,  , m, e, t, h, o, d, s, ,,  , a, n, d,  , u, s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e, x,  , i, n, t, e, r, f, a, e, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , u, s, e,  , a, n, d,  , a, p, p, l, y,  , p, e, x,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , r, i, t, e,  , ,,  , ,,  , a, n, d,  ,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, x, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , f, o, l, l, o,  , b, e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e, x,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e, x,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, b, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , b, e, t, e, e, n,  , p, e, x,  , t, r, a, n, s, a, t, i, o, n, s, ,,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, x, e, u, t, i, o, n, ,,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, u, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , I, m, p, l, e, m, e, n, t,  , e, x, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e, x, ,,  , i, n, l, u, d, i, n, g,  , u, s, t, o, m,  , e, x, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , u, s, e,  , d, e, l, a, r, a, t, i, v, e,  , f, u, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e, x,  , t, o, g, e, t, h, e, r,  , t, o,  , a, u, t, o, m, a, t, e,  , b, u, s, i, n, e, s, s,  , l, o, g, i, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , u, s, i, n, g,  , a,  , i, s, u, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, x, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, b, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r, ,,  , i, t, s,  , b, e, n, e, f, i, t, s, ,,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , b, e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e, b,  , o, m, p, o, n, e, n, t, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , p, r, e, v, e, n, t,  , u, s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, u, r, i, t, y,  , v, u, l, n, e, r, a, b, i, l, i, t, i, e, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , d, i, s, p, l, a, y,  , a, n, d,  , u, s, e,  , a,  , u, s, t, o, m,  , u, s, e, r,  , i, n, t, e, r, f, a, e,  , o, m, p, o, n, e, n, t, s, ,,  , i, n, l, u, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s, ,,  , l, o, ,,  , a, n, d,  , i, s, u, a, l, f, o, r, e, .,  , e, s, r, i, b, e,  , t, h, e,  , u, s, e,  , a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e, b,  , o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , i, m, p, l, e, m, e, n, t,  , p, e, x,  , t, o,  , o, r,  , i, t, h,  , v, a, r, i, o, u, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, m, p, o, n, e, n, t, s, ,,  , i, n, l, u, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s, ,,  , l, o, ,,  , e, x, t,  , e, s, t,  , t, i, o, n, s, ,,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, x, e, u, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s, ,,  , o, n, t, r, o, l, l, e, r, s, ,,  , l, a, s, s, e, s, ,,  , f, l, o, s, ,,  , a, n, d,  , p, r, o, e, s, s, e, s,  , u, s, i, n, g,  , v, a, r, i, o, u, s,  , s, o, u, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, v, e, n,  , a,  , s, e, n, a, r, i, o, ,,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , u, s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, u, h,  , a, s,  , a, l, e, s, f, o, r, e,  , ,,  , a, l, e, s, f, o, r, e,  , I, ,,  , a, n, d,  , e, v, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, b, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, b, u, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, u, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s, ,,  , p, r, o, e, s, s, e, s, ,,  , a, n, d,  , a, s, y, n, h, r, o, n, o, u, s,  , a, n, d,  , b, a, t, h,  , o, b, s, ,,  , e, t, .,  , e, s, r, i, b, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s, ,,  , r, e, u, i, r, e, m, e, n, t, s, ,,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, u, r, a, t, i, o, n, s, .,  
2023-04-03 20:58:27,368 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
"""
2023-04-03 20:58:28,620 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 20:58:28,621 - INFO - Related goals
2023-04-03 20:58:28,622 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
"""
2023-04-03 20:58:30,984 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 20:58:30,984 - INFO - Related goals
2023-04-03 20:58:30,986 - INFO - Which of the following learning goals if any does this paragraph relate to? The learning goals are on separate lines and have an identifier between square brackets.
Example: This is a learning goal [23]
For the example the identifier is 23. Answer with a list of such identifiers. 

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
"""
2023-04-03 20:59:36,131 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 20:59:49,128 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 20:59:49,128 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, u, l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, w, o, r, k, s, ,,  , s, u, c, h,  , a, s,  , C,  , a, r, c, h, i, t, e, c, t, u, r, e,  , a, n, d,  , L, i, g, h, t, n, i, n, g,  , C, o, m, p, o, n, e, n, t,  , F, r, a, m, e, w, o, r, k, .,  , 1, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , c, o, m, m, o, n,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, v, e,  , v, e, r, s, u, s,  , p, r, o, g, r, a, m, m, a, t, i, c,  , c, u, s, t, o, m, i, a, t, i, o, n, s, ,,  , i, n, c, l, u, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s, ,,  , f, o, r, m, u, l, a,  , f, i, e, l, d, s, ,,  , a, n, d,  , r, o, l, l, u, p,  , s, u, m, m, a, r, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, e, t, e, r, m, i, n, e, ,,  , c, r, e, a, t, e, ,,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, c, l, u, d, i, n, g,  , o, b, e, c, t, s, ,,  , f, i, e, l, d, s, ,,  , r, e, l, a, t, i, o, n, s, h, i, p, s, ,,  , a, n, d,  , e, t, e, r, n, a, l,  , I, D, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , w, h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , I, d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, b, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, v, e,  , p, r, o, c, e, s, s,  , a, u, t, o, m, a, t, i, o, n,  , f, e, a, t, u, r, e, s, .,  , 5, D, e, c, l, a, r, e,  , v, a, r, i, a, b, l, e, s, ,,  , c, o, n, s, t, a, n, t, s, ,,  , m, e, t, h, o, d, s, ,,  , a, n, d,  , u, s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, c, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , u, s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , c, o, n, t, r, o, l,  , f, l, o, w,  , s, t, a, t, e, m, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , w, r, i, t, e,  , L, ,,  , L, ,,  , a, n, d,  , D, L,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , f, o, l, l, o, w,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , w, r, i, t, e,  , p, e,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , 1, D, e, s, c, r, i, b, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , b, e, t, w, e, e, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, ,,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, e, c, u, t, i, o, n, ,,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, u, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , 1, 1, I, m, p, l, e, m, e, n, t,  , e, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e, ,,  , i, n, c, l, u, d, i, n, g,  , c, u, s, t, o, m,  , e, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , 1, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , u, s, e,  , d, e, c, l, a, r, a, t, i, v, e,  , f, u, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, u, t, o, m, a, t, e,  , b, u, s, i, n, e, s, s,  , l, o, g, i, c, .,  , 1, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , u, s, i, n, g,  , a,  , i, s, u, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , 1, D, e, s, c, r, i, b, e,  , t, h, e,  , L, i, g, h, t, n, i, n, g,  , C, o, m, p, o, n, e, n, t,  , f, r, a, m, e, w, o, r, k, ,,  , i, t, s,  , b, e, n, e, f, i, t, s, ,,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , b, e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , L, i, g, h, t, n, i, n, g,  , w, e, b,  , c, o, m, p, o, n, e, n, t, .,  , 1, 5, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , p, r, e, v, e, n, t,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, u, r, i, t, y,  , v, u, l, n, e, r, a, b, i, l, i, t, i, e, s, .,  , 1, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, i, s, p, l, a, y,  , a, n, d,  , u, s, e,  , a,  , c, u, s, t, o, m,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, m, p, o, n, e, n, t, s, ,,  , i, n, c, l, u, d, i, n, g,  , L, i, g, h, t, n, i, n, g,  , C, o, m, p, o, n, e, n, t, s, ,,  , F, l, o, w, ,,  , a, n, d,  , i, s, u, a, l, f, o, r, c, e, .,  , 1, D, e, s, c, r, i, b, e,  , t, h, e,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , L, i, g, h, t, n, i, n, g,  , e, b,  , C, o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , 1, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, m, p, l, e, m, e, n, t,  , p, e,  , t, o,  , w, o, r, k,  , w, i, t, h,  , v, a, r, i, o, u, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, m, p, o, n, e, n, t, s, ,,  , i, n, c, l, u, d, i, n, g,  , L, i, g, h, t, n, i, n, g,  , C, o, m, p, o, n, e, n, t, s, ,,  , F, l, o, w, ,,  , N, e, t,  , e, s, t,  , c, t, i, o, n, s, ,,  , e, t, c, .,  , 1, r, i, t, e,  , a, n, d,  , e, e, c, u, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s, ,,  , c, o, n, t, r, o, l, l, e, r, s, ,,  , c, l, a, s, s, e, s, ,,  , f, l, o, w, s, ,,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , u, s, i, n, g,  , v, a, r, i, o, u, s,  , s, o, u, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , 1, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , k, n, o, w,  , h, o, w,  , a, n, d,  , w, h, e, n,  , t, o,  , u, s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , D, e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, u, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  , D, ,,  , a, l, e, s, f, o, r, c, e,  , C, L, I, ,,  , a, n, d,  , D, e, v, e, l, o, p, e, r,  , C, o, n, s, o, l, e, .,  , D, e, s, c, r, i, b, e,  , h, o, w,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, b, u, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, u, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, w, s, ,,  , p, r, o, c, e, s, s, e, s, ,,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, u, s,  , a, n, d,  , b, a, t, c, h,  , o, b, s, ,,  , e, t, c, .,  , 1, D, e, s, c, r, i, b, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s, ,,  , r, e, u, i, r, e, m, e, n, t, s, ,,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, u, r, a, t, i, o, n, s, .,  
2023-04-03 20:59:49,130 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 21:00:12,099 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 21:00:13,686 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:00:13,687 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, s, ,,  , s, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , c, o, m, m, o, n,  , s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, v, e,  , v, e, r, s, s,  , p, r, o, g, r, a, m, m, a, t, i, c,  , c, s, t, o, m, i, a, t, i, o, n, s, ,,  , i, n, c, l, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s, ,,  , f, o, r, m, l, a,  , f, i, e, l, d, s, ,,  , a, n, d,  , r, o, l, l, p,  , s, m, m, a, r, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, e, t, e, r, m, i, n, e, ,,  , c, r, e, a, t, e, ,,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, c, l, d, i, n, g,  , o, b, j, e, c, t, s, ,,  , f, i, e, l, d, s, ,,  , r, e, l, a, t, i, o, n, s, h, i, p, s, ,,  , a, n, d,  , e, x, t, e, r, n, a, l,  , s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, x, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, b, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, v, e,  , p, r, o, c, e, s, s,  , a, t, o, m, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, c, l, a, r, e,  , v, a, r, i, a, b, l, e, s, ,,  , c, o, n, s, t, a, n, t, s, ,,  , m, e, t, h, o, d, s, ,,  , a, n, d,  , s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e, x,  , i, n, t, e, r, f, a, c, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e, x,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , r, i, t, e,  , S, S, ,,  , S, ,,  , a, n, d,  ,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, x, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , f, o, l, l, o,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e, x,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e, x,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, b, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , b, e, t, e, e, n,  , p, e, x,  , t, r, a, n, s, a, c, t, i, o, n, s, ,,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, x, e, c, t, i, o, n, ,,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , m, p, l, e, m, e, n, t,  , e, x, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e, x, ,,  , i, n, c, l, d, i, n, g,  , c, s, t, o, m,  , e, x, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , s, e,  , d, e, c, l, a, r, a, t, i, v, e,  , f, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e, x,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, m, a, t, e,  , b, s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , S, a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, x, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, b, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r, ,,  , i, t, s,  , b, e, n, e, f, i, t, s, ,,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , b, e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e, b,  , c, o, m, p, o, n, e, n, t, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , p, r, e, v, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, r, i, t, y,  , v, l, n, e, r, a, b, i, l, i, t, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , c, s, t, o, m,  , s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, m, p, o, n, e, n, t, s, ,,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s, ,,  , l, o, ,,  , a, n, d,  , i, s, a, l, f, o, r, c, e, .,  , e, s, c, r, i, b, e,  , t, h, e,  , s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e, b,  , o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, m, p, l, e, m, e, n, t,  , p, e, x,  , t, o,  , o, r,  , i, t, h,  , v, a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, m, p, o, n, e, n, t, s, ,,  , i, n, c, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s, ,,  , l, o, ,,  , e, x, t,  , e, s, t,  , c, t, i, o, n, s, ,,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, x, e, c, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s, ,,  , c, o, n, t, r, o, l, l, e, r, s, ,,  , c, l, a, s, s, e, s, ,,  , f, l, o, s, ,,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , s, i, n, g,  , v, a, r, i, o, s,  , s, o, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , S, a, l, e, s, f, o, r, c, e,  , e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, c, h,  , a, s,  , S, a, l, e, s, f, o, r, c, e,  , ,,  , S, a, l, e, s, f, o, r, c, e,  , ,,  , a, n, d,  , e, v, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, b, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, b, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s, ,,  , p, r, o, c, e, s, s, e, s, ,,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, s,  , a, n, d,  , b, a, t, c, h,  , j, o, b, s, ,,  , e, t, c, .,  , e, s, c, r, i, b, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s, ,,  , r, e, i, r, e, m, e, n, t, s, ,,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 21:00:13,689 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 21:00:14,557 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:00:14,557 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 21:00:14,561 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""
"""
2023-04-03 21:00:35,376 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 21:00:35,376 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, u, l, t, i, -, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, w, o, r, k, s, ,,  , s, u, c, h,  , a, s,  , M, V, C,  , a, r, c, h, i, t, e, c, t, u, r, e,  , a, n, d,  , L, i, g, h, t, n, i, n, g,  , C, o, m, p, o, n, e, n, t,  , F, r, a, m, e, w, o, r, k, .,  , [, 1, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , c, o, m, m, o, n,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, v, e,  , v, e, r, s, u, s,  , p, r, o, g, r, a, m, m, a, t, i, c,  , c, u, s, t, o, m, i, z, a, t, i, o, n, s, ,,  , i, n, c, l, u, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s, ,,  , f, o, r, m, u, l, a,  , f, i, e, l, d, s, ,,  , a, n, d,  , r, o, l, l, -, u, p,  , s, u, m, m, a, r, i, e, s, .,  , [, 2, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, e, t, e, r, m, i, n, e, ,,  , c, r, e, a, t, e, ,,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, c, l, u, d, i, n, g,  , o, b, j, e, c, t, s, ,,  , f, i, e, l, d, s, ,,  , r, e, l, a, t, i, o, n, s, h, i, p, s, ,,  , a, n, d,  , e, x, t, e, r, n, a, l,  , I, D, s, .,  , [, 3, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , w, h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, x, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , [, 4, ], 
, I, d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, b, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, v, e,  , p, r, o, c, e, s, s,  , a, u, t, o, m, a, t, i, o, n,  , f, e, a, t, u, r, e, s, .,  , [, 5, ], 
, D, e, c, l, a, r, e,  , v, a, r, i, a, b, l, e, s, ,,  , c, o, n, s, t, a, n, t, s, ,,  , m, e, t, h, o, d, s, ,,  , a, n, d,  , u, s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , A, p, e, x,  , i, n, t, e, r, f, a, c, e, s, .,  , [, 6, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , u, s, e,  , a, n, d,  , a, p, p, l, y,  , A, p, e, x,  , c, o, n, t, r, o, l,  , f, l, o, w,  , s, t, a, t, e, m, e, n, t, s, .,  , [, 7, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , w, r, i, t, e,  , S, O, S, L, ,,  , S, O, Q, L, ,,  , a, n, d,  , D, M, L,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , A, p, e, x, .,  , [, 8, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , f, o, l, l, o, w,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , w, r, i, t, e,  , A, p, e, x,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , [, 9, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , A, p, e, x,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , [, 1, 0, ], 
, D, e, s, c, r, i, b, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , b, e, t, w, e, e, n,  , A, p, e, x,  , t, r, a, n, s, a, c, t, i, o, n, s, ,,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, x, e, c, u, t, i, o, n, ,,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, u, r, s, i, o, n,  , a, n, d, /, o, r,  , c, a, s, c, a, d, i, n, g, .,  , [, 1, 1, ], 
, I, m, p, l, e, m, e, n, t,  , e, x, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , A, p, e, x, ,,  , i, n, c, l, u, d, i, n, g,  , c, u, s, t, o, m,  , e, x, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , [, 1, 2, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , u, s, e,  , d, e, c, l, a, r, a, t, i, v, e,  , f, u, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , A, p, e, x,  , t, o, g, e, t, h, e, r,  , t, o,  , a, u, t, o, m, a, t, e,  , b, u, s, i, n, e, s, s,  , l, o, g, i, c, .,  , [, 1, 3, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , S, a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , u, s, i, n, g,  , a,  , V, i, s, u, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, x, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , [, 1, 4, ], 
, D, e, s, c, r, i, b, e,  , t, h, e,  , L, i, g, h, t, n, i, n, g,  , C, o, m, p, o, n, e, n, t,  , f, r, a, m, e, w, o, r, k, ,,  , i, t, s,  , b, e, n, e, f, i, t, s, ,,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , b, e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , L, i, g, h, t, n, i, n, g,  , w, e, b,  , c, o, m, p, o, n, e, n, t, .,  , [, 1, 5, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , p, r, e, v, e, n, t,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, u, r, i, t, y,  , v, u, l, n, e, r, a, b, i, l, i, t, i, e, s, .,  , [, 1, 6, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , d, i, s, p, l, a, y,  , a, n, d,  , u, s, e,  , a,  , c, u, s, t, o, m,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, m, p, o, n, e, n, t, s, ,,  , i, n, c, l, u, d, i, n, g,  , L, i, g, h, t, n, i, n, g,  , C, o, m, p, o, n, e, n, t, s, ,,  , F, l, o, w, ,,  , a, n, d,  , V, i, s, u, a, l, f, o, r, c, e, .,  , [, 1, 6, ], 
, D, e, s, c, r, i, b, e,  , t, h, e,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , L, i, g, h, t, n, i, n, g,  , W, e, b,  , C, o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , [, 1, 7, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , i, m, p, l, e, m, e, n, t,  , A, p, e, x,  , t, o,  , w, o, r, k,  , w, i, t, h,  , v, a, r, i, o, u, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, m, p, o, n, e, n, t, s, ,,  , i, n, c, l, u, d, i, n, g,  , L, i, g, h, t, n, i, n, g,  , C, o, m, p, o, n, e, n, t, s, ,,  , F, l, o, w, ,,  , N, e, x, t,  , B, e, s, t,  , A, c, t, i, o, n, s, ,,  , e, t, c, .,  , [, 1, 8, ], 
, W, r, i, t, e,  , a, n, d,  , e, x, e, c, u, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s, ,,  , c, o, n, t, r, o, l, l, e, r, s, ,,  , c, l, a, s, s, e, s, ,,  , f, l, o, w, s, ,,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , u, s, i, n, g,  , v, a, r, i, o, u, s,  , s, o, u, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , [, 1, 9, ], 
, G, i, v, e, n,  , a,  , s, c, e, n, a, r, i, o, ,,  , k, n, o, w,  , h, o, w,  , a, n, d,  , w, h, e, n,  , t, o,  , u, s, e,  , t, h, e,  , S, a, l, e, s, f, o, r, c, e,  , D, e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, u, c, h,  , a, s,  , S, a, l, e, s, f, o, r, c, e,  , D, X, ,,  , S, a, l, e, s, f, o, r, c, e,  , C, L, I, ,,  , a, n, d,  , D, e, v, e, l, o, p, e, r,  , C, o, n, s, o, l, e, .,  , [, 2, 0, ], 
, D, e, s, c, r, i, b, e,  , h, o, w,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, b, u, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, u, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, w, s, ,,  , p, r, o, c, e, s, s, e, s, ,,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, u, s,  , a, n, d,  , b, a, t, c, h,  , j, o, b, s, ,,  , e, t, c, .,  , [, 2, 1, ], 
, D, e, s, c, r, i, b, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s, ,,  , r, e, q, u, i, r, e, m, e, n, t, s, ,,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, u, r, a, t, i, o, n, s, .,  , [, 2, 2, ]
2023-04-03 21:00:35,378 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
"""
2023-04-03 21:00:37,286 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 21:00:37,287 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, u, l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, k, s,  , s, u, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, u, r, e,  , a, n, d,  , L, i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, k, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , c, o, m, m, o, n,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, v, e,  , v, e, r, s, u, s,  , p, r, o, g, r, a, m, m, a, t, i, c,  , c, u, s, t, o, m, i, a, t, i, o, n, s,  , i, n, c, l, u, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , f, o, r, m, u, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, u, p,  , s, u, m, m, a, r, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, e, t, e, r, m, i, n, e,  , c, r, e, a, t, e,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, c, l, u, d, i, n, g,  , o, b, e, c, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, x, t, e, r, n, a, l,  , I, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, x, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , I, d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, b, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, v, e,  , p, r, o, c, e, s, s,  , a, u, t, o, m, a, t, i, o, n,  , f, e, a, t, u, r, e, s, .,  , e, c, l, a, r, e,  , v, a, r, i, a, b, l, e, s,  , c, o, n, s, t, a, n, t, s,  , m, e, t, h, o, d, s,  , a, n, d,  , u, s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e, x,  , i, n, t, e, r, f, a, c, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , u, s, e,  , a, n, d,  , a, p, p, l, y,  , p, e, x,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , r, i, t, e,  , L,  , L,  , a, n, d,  , L,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, x, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , f, o, l, l, o,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e, x,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e, x,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, b, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , b, e, t, e, e, n,  , p, e, x,  , t, r, a, n, s, a, c, t, i, o, n, s,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, x, e, c, u, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, u, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , I, m, p, l, e, m, e, n, t,  , e, x, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e, x,  , i, n, c, l, u, d, i, n, g,  , c, u, s, t, o, m,  , e, x, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , u, s, e,  , d, e, c, l, a, r, a, t, i, v, e,  , f, u, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e, x,  , t, o, g, e, t, h, e, r,  , t, o,  , a, u, t, o, m, a, t, e,  , b, u, s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , u, s, i, n, g,  , a,  , i, s, u, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, x, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, b, e,  , t, h, e,  , L, i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r, k,  , i, t, s,  , b, e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , b, e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , L, i, g, h, t, n, i, n, g,  , e, b,  , c, o, m, p, o, n, e, n, t, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , p, r, e, v, e, n, t,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, u, r, i, t, y,  , v, u, l, n, e, r, a, b, i, l, i, t, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , u, s, e,  , a,  , c, u, s, t, o, m,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, u, d, i, n, g,  , L, i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, u, a, l, f, o, r, c, e, .,  , e, s, c, r, i, b, e,  , t, h, e,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , L, i, g, h, t, n, i, n, g,  , e, b,  , o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, m, p, l, e, m, e, n, t,  , p, e, x,  , t, o,  , o, r, k,  , i, t, h,  , v, a, r, i, o, u, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, u, d, i, n, g,  , L, i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , e, x, t,  , e, s, t,  , c, t, i, o, n, s,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, x, e, c, u, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , c, o, n, t, r, o, l, l, e, r, s,  , c, l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , u, s, i, n, g,  , v, a, r, i, o, u, s,  , s, o, u, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , k, n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , u, s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, u, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  ,  , a, l, e, s, f, o, r, c, e,  , L, I,  , a, n, d,  , e, v, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, b, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, b, u, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, u, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, c, e, s, s, e, s,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, u, s,  , a, n, d,  , b, a, t, c, h,  , o, b, s,  , e, t, c, .,  , e, s, c, r, i, b, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s,  , r, e, u, i, r, e, m, e, n, t, s,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, u, r, a, t, i, o, n, s, .,  
2023-04-03 21:00:37,289 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
"""
2023-04-03 21:00:38,263 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 21:00:38,263 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 21:00:38,265 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
"""
2023-04-03 21:00:39,198 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 21:00:39,198 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , l, t, i, t, e, n, a, n, t,  , o, n, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, e, o, r, s,  , s, h,  , a, s,  ,  , a, r, h, i, t, e, t, r, e,  , a, n, d,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , r, a, e, o, r, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , o, o, n,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , d, e, l, a, r, a, t, i, e,  , e, r, s, s,  , p, r, o, g, r, a, a, t, i,  , s, t, o, i, a, t, i, o, n, s,  , i, n, l, d, i, n, g,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , f, o, r, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, p,  , s, a, r, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, e, t, e, r, i, n, e,  , r, e, a, t, e,  , a, n, d,  , a, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , o, d, e, l,  , i, n, l, d, i, n, g,  , o, e, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, e, l, o, p, e, n, t,  , e, n, i, r, o, n, e, n, t, s, .,  , d, e, n, t, i, f, y,  , t, h, e,  , a, p, a, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, l, a, r, a, t, i, e,  , p, r, o, e, s, s,  , a, t, o, a, t, i, o, n,  , f, e, a, t, r, e, s, .,  , e, l, a, r, e,  , a, r, i, a, l, e, s,  , o, n, s, t, a, n, t, s,  , e, t, h, o, d, s,  , a, n, d,  , s, e,  , o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , r, i, t, e,  ,  ,  , a, n, d,  ,  , s, t, a, t, e, e, n, t, s,  , i, n,  , p, e, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , f, o, l, l, o,  , e, s, t,  , p, r, a, t, i, e, s,  , t, o,  , r, i, t, e,  , p, e,  , l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, p, l, i, a, t, i, o, n, s,  , o, f,  , g, o, e, r, n, o, r,  , l, i, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s, .,  , e, s, r, i, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, t, i, o, n, s,  , t, h, e,  , s, a, e,  , o, r, d, e, r,  , o, f,  , e, e, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, r, s, i, o, n,  , a, n, d, o, r,  , a, s, a, d, i, n, g, .,  , p, l, e, e, n, t,  , e, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, l, d, i, n, g,  , s, t, o,  , e, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , s, e,  , d, e, l, a, r, a, t, i, e,  , f, n, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, t, o, a, t, e,  , s, i, n, e, s, s,  , l, o, g, i, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , o, n, t, e, n, t,  , o, r,  , o, d, i, f, y,  , a, l, e, s, f, o, r, e,  , d, a, t, a,  , s, i, n, g,  , a,  , i, s, a, l, f, o, r, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, r, i, e,  , t, h, e,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t,  , f, r, a, e, o, r,  , i, t, s,  , e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , o, n, t, e, n, t,  , t, h, a, t,  , a, n,  , e,  , o, n, t, a, i, n, e, d,  , i, n,  , a,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , p, r, e, e, n, t,  , s, e, r,  , i, n, t, e, r, f, a, e,  , a, n, d,  , d, a, t, a,  , a, e, s, s,  , s, e, r, i, t, y,  , l, n, e, r, a, i, l, i, t, i, e, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , s, e,  , a,  , s, t, o,  , s, e, r,  , i, n, t, e, r, f, a, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, a, l, f, o, r, e, .,  , e, s, r, i, e,  , t, h, e,  , s, e,  , a, s, e, s,  , a, n, d,  , e, s, t,  , p, r, a, t, i, e, s,  , f, o, r,  , i, g, h, t, n, i, n, g,  , e,  , o, p, o, n, e, n, t,  , e, e, n, t, s, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , i, p, l, e, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , a, r, i, o, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , o, p, o, n, e, n, t, s,  , i, n, l, d, i, n, g,  , i, g, h, t, n, i, n, g,  , o, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , t, i, o, n, s,  , e, t, .,  , r, i, t, e,  , a, n, d,  , e, e, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , o, n, t, r, o, l, l, e, r, s,  , l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, e, s, s, e, s,  , s, i, n, g,  , a, r, i, o, s,  , s, o, r, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, e, n,  , a,  , s, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , s, e,  , t, h, e,  , a, l, e, s, f, o, r, e,  , e, e, l, o, p, e, r,  , t, o, o, l, s,  , s, h,  , a, s,  , a, l, e, s, f, o, r, e,  ,  , a, l, e, s, f, o, r, e,  ,  , a, n, d,  , e, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, r, i, e,  , h, o,  , t, o,  , a, p, p, r, o, a, h,  , d, e, g, g, i, n, g,  , s, y, s, t, e,  , i, s, s, e, s,  , a, n, d,  , o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, e, s, s, e, s,  , a, n, d,  , a, s, y, n, h, r, o, n, o, s,  , a, n, d,  , a, t, h,  , o, s,  , e, t, .,  , e, s, r, i, e,  , t, h, e,  , e, n, i, r, o, n, e, n, t, s,  , r, e, i, r, e, e, n, t, s,  , a, n, d,  , p, r, o, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , o, d, e,  , a, n, d,  , a, s, s, o, i, a, t, e, d,  , o, n, f, i, g, r, a, t, i, o, n, s, .,  
2023-04-03 21:00:39,200 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
"""
2023-04-03 21:00:40,739 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 21:00:40,739 - INFO - Related goals: n, d, e, r, s, t, a, n, d,  , m, u, l, t, i, t, e, n, a, n, t,  , c, o, n, c, e, p, t, s,  , a, n, d,  , d, e, s, i, g, n,  , f, r, a, m, e, o, r, s,  , s, u, c, h,  , a, s,  ,  , a, r, c, h, i, t, e, c, t, u, r, e,  , a, n, d,  , L, i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , r, a, m, e, o, r, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , c, o, m, m, o, n,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , d, e, c, l, a, r, a, t, i, v, e,  , v, e, r, s, u, s,  , p, r, o, g, r, a, m, m, a, t, i, c,  , c, u, s, t, o, m, i, a, t, i, o, n, s,  , i, n, c, l, u, d, i, n, g,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , f, o, r, m, u, l, a,  , f, i, e, l, d, s,  , a, n, d,  , r, o, l, l, u, p,  , s, u, m, m, a, r, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, e, t, e, r, m, i, n, e,  , c, r, e, a, t, e,  , a, n, d,  , a, c, c, e, s, s,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , d, a, t, a,  , m, o, d, e, l,  , i, n, c, l, u, d, i, n, g,  , o, b, e, c, t, s,  , f, i, e, l, d, s,  , r, e, l, a, t, i, o, n, s, h, i, p, s,  , a, n, d,  , e, t, e, r, n, a, l,  , I, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , o, p, t, i, o, n, s,  , a, n, d,  , c, o, n, s, i, d, e, r, a, t, i, o, n, s,  , h, e, n,  , i, m, p, o, r, t, i, n, g,  , a, n, d,  , e, p, o, r, t, i, n, g,  , d, a, t, a,  , i, n, t, o,  , d, e, v, e, l, o, p, m, e, n, t,  , e, n, v, i, r, o, n, m, e, n, t, s, .,  , I, d, e, n, t, i, f, y,  , t, h, e,  , c, a, p, a, b, i, l, i, t, i, e, s,  , o, f,  , t, h, e,  , d, e, c, l, a, r, a, t, i, v, e,  , p, r, o, c, e, s, s,  , a, u, t, o, m, a, t, i, o, n,  , f, e, a, t, u, r, e, s, .,  , e, c, l, a, r, e,  , v, a, r, i, a, b, l, e, s,  , c, o, n, s, t, a, n, t, s,  , m, e, t, h, o, d, s,  , a, n, d,  , u, s, e,  , m, o, d, i, f, i, e, r, s,  , a, n, d,  , p, e,  , i, n, t, e, r, f, a, c, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , u, s, e,  , a, n, d,  , a, p, p, l, y,  , p, e,  , c, o, n, t, r, o, l,  , f, l, o,  , s, t, a, t, e, m, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , r, i, t, e,  , L,  , L,  , a, n, d,  , L,  , s, t, a, t, e, m, e, n, t, s,  , i, n,  , p, e, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , f, o, l, l, o,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , t, o,  , r, i, t, e,  , p, e,  , c, l, a, s, s, e, s,  , a, n, d,  , t, r, i, g, g, e, r, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, d, e, n, t, i, f, y,  , t, h, e,  , i, m, p, l, i, c, a, t, i, o, n, s,  , o, f,  , g, o, v, e, r, n, o, r,  , l, i, m, i, t, s,  , o, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s, .,  , e, s, c, r, i, b, e,  , t, h, e,  , r, e, l, a, t, i, o, n, s, h, i, p,  , b, e, t, e, e, n,  , p, e,  , t, r, a, n, s, a, c, t, i, o, n, s,  , t, h, e,  , s, a, v, e,  , o, r, d, e, r,  , o, f,  , e, e, c, u, t, i, o, n,  , a, n, d,  , t, h, e,  , p, o, t, e, n, t, i, a, l,  , f, o, r,  , r, e, c, u, r, s, i, o, n,  , a, n, d, o, r,  , c, a, s, c, a, d, i, n, g, .,  , I, m, p, l, e, m, e, n, t,  , e, c, e, p, t, i, o, n,  , h, a, n, d, l, i, n, g,  , i, n,  , p, e,  , i, n, c, l, u, d, i, n, g,  , c, u, s, t, o, m,  , e, c, e, p, t, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , u, s, e,  , d, e, c, l, a, r, a, t, i, v, e,  , f, u, n, c, t, i, o, n, a, l, i, t, y,  , a, n, d,  , p, e,  , t, o, g, e, t, h, e, r,  , t, o,  , a, u, t, o, m, a, t, e,  , b, u, s, i, n, e, s, s,  , l, o, g, i, c, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , c, o, n, t, e, n, t,  , o, r,  , m, o, d, i, f, y,  , a, l, e, s, f, o, r, c, e,  , d, a, t, a,  , u, s, i, n, g,  , a,  , i, s, u, a, l, f, o, r, c, e,  , p, a, g, e,  , a, n, d,  , t, h, e,  , a, p, p, r, o, p, r, i, a, t, e,  , c, o, n, t, r, o, l, l, e, r, s,  , o, r,  , e, t, e, n, s, i, o, n, s,  , a, s,  , n, e, e, d, e, d, .,  , e, s, c, r, i, b, e,  , t, h, e,  , L, i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t,  , f, r, a, m, e, o, r,  , i, t, s,  , b, e, n, e, f, i, t, s,  , a, n, d,  , t, h, e,  , t, y, p, e, s,  , o, f,  , c, o, n, t, e, n, t,  , t, h, a, t,  , c, a, n,  , b, e,  , c, o, n, t, a, i, n, e, d,  , i, n,  , a,  , L, i, g, h, t, n, i, n, g,  , e, b,  , c, o, m, p, o, n, e, n, t, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , p, r, e, v, e, n, t,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , a, n, d,  , d, a, t, a,  , a, c, c, e, s, s,  , s, e, c, u, r, i, t, y,  , v, u, l, n, e, r, a, b, i, l, i, t, i, e, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , d, i, s, p, l, a, y,  , a, n, d,  , u, s, e,  , a,  , c, u, s, t, o, m,  , u, s, e, r,  , i, n, t, e, r, f, a, c, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, u, d, i, n, g,  , L, i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , a, n, d,  , i, s, u, a, l, f, o, r, c, e, .,  , e, s, c, r, i, b, e,  , t, h, e,  , u, s, e,  , c, a, s, e, s,  , a, n, d,  , b, e, s, t,  , p, r, a, c, t, i, c, e, s,  , f, o, r,  , L, i, g, h, t, n, i, n, g,  , e, b,  , o, m, p, o, n, e, n, t,  , e, v, e, n, t, s, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , i, m, p, l, e, m, e, n, t,  , p, e,  , t, o,  , o, r,  , i, t, h,  , v, a, r, i, o, u, s,  , t, y, p, e, s,  , o, f,  , p, a, g, e,  , c, o, m, p, o, n, e, n, t, s,  , i, n, c, l, u, d, i, n, g,  , L, i, g, h, t, n, i, n, g,  , o, m, p, o, n, e, n, t, s,  , l, o,  , e, t,  , e, s, t,  , c, t, i, o, n, s,  , e, t, c, .,  , r, i, t, e,  , a, n, d,  , e, e, c, u, t, e,  , t, e, s, t, s,  , f, o, r,  , t, r, i, g, g, e, r, s,  , c, o, n, t, r, o, l, l, e, r, s,  , c, l, a, s, s, e, s,  , f, l, o, s,  , a, n, d,  , p, r, o, c, e, s, s, e, s,  , u, s, i, n, g,  , v, a, r, i, o, u, s,  , s, o, u, r, c, e, s,  , o, f,  , t, e, s, t,  , d, a, t, a, .,  , i, v, e, n,  , a,  , s, c, e, n, a, r, i, o,  , n, o,  , h, o,  , a, n, d,  , h, e, n,  , t, o,  , u, s, e,  , t, h, e,  , a, l, e, s, f, o, r, c, e,  , e, v, e, l, o, p, e, r,  , t, o, o, l, s,  , s, u, c, h,  , a, s,  , a, l, e, s, f, o, r, c, e,  ,  , a, l, e, s, f, o, r, c, e,  , L, I,  , a, n, d,  , e, v, e, l, o, p, e, r,  , o, n, s, o, l, e, .,  , e, s, c, r, i, b, e,  , h, o,  , t, o,  , a, p, p, r, o, a, c, h,  , d, e, b, u, g, g, i, n, g,  , s, y, s, t, e, m,  , i, s, s, u, e, s,  , a, n, d,  , m, o, n, i, t, o, r, i, n, g,  , f, l, o, s,  , p, r, o, c, e, s, s, e, s,  , a, n, d,  , a, s, y, n, c, h, r, o, n, o, u, s,  , a, n, d,  , b, a, t, c, h,  , o, b, s,  , e, t, c, .,  , e, s, c, r, i, b, e,  , t, h, e,  , e, n, v, i, r, o, n, m, e, n, t, s,  , r, e, u, i, r, e, m, e, n, t, s,  , a, n, d,  , p, r, o, c, e, s, s,  , f, o, r,  , d, e, p, l, o, y, i, n, g,  , c, o, d, e,  , a, n, d,  , a, s, s, o, c, i, a, t, e, d,  , c, o, n, f, i, g, u, r, a, t, i, o, n, s, .,  
2023-04-03 21:00:40,741 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
"""
2023-04-03 21:04:46,554 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
"""
2023-04-03 21:04:49,061 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:04:49,062 - INFO - No related goals found
2023-04-03 21:04:49,063 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
"""
2023-04-03 21:04:52,348 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:04:52,348 - INFO - No related goals found
2023-04-03 21:04:52,349 - INFO - Which of the following learning goals if any does this paragraph relate to?

Learning goals:
"""
Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework. [1]
Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
Given a scenario, identify the options and considerations when importing and exporting data into development environments. [4]
Identify the capabilities of the declarative process automation features. [5]
Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
Given a scenario, use and apply Apex control flow statements. [7]
Given a scenario, write SOSL, SOQL, and DML statements in Apex. [8]
Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, identify the implications of governor limits on Apex transactions. [10]
Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
Implement exception handling in Apex, including custom exceptions as needed. [12]
Given a scenario, use declarative functionality and Apex together to automate business logic. [13]
Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
Given a scenario, prevent user interface and data access security vulnerabilities. [16]
Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
Describe the use cases and best practices for Lightning Web Component events. [17]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
Describe the environments, requirements, and process for deploying code and associated configurations. [22]
"""

Paragraph:
"""
"""
2023-04-03 21:06:10,438 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:06:10,444 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:06:10,444 - INFO - No related goals found
2023-04-03 21:06:11,361 - INFO - This paragraph does not relate to any of the learning goals mentioned.
2023-04-03 21:06:11,372 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:06:11,373 - INFO - No related goals found
2023-04-03 21:06:17,053 - INFO - This paragraph relates to various learning goals such as understanding multi-tenant concepts and design frameworks, identifying common use cases for customizations, determining and creating appropriate data models, identifying options and considerations for importing and exporting data, identifying capabilities of process automation features, declaring variables and methods, applying Apex control flow statements, following best practices for writing Apex classes and triggers, implementing exception handling, using declarative functions and Apex together to automate business logic, displaying and using custom user interface components, writing and executing tests for various sources of test data, knowing when to use Salesforce developer tools, and describing how to approach debugging system issues and deploying code and configurations.
2023-04-03 21:06:17,064 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 21:06:17,065 - INFO - No related goals found
2023-04-03 21:06:17,981 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:06:17,992 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 21:06:17,993 - INFO - No related goals found
2023-04-03 21:06:18,823 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:06:18,836 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 21:06:18,836 - INFO - No related goals found
2023-04-03 21:06:19,650 - INFO - None of the learning goals listed are related to the given paragraph.
2023-04-03 21:06:19,664 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 21:06:19,664 - INFO - No related goals found
2023-04-03 21:06:20,588 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:06:20,602 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 21:06:20,603 - INFO - No related goals found
2023-04-03 21:06:22,193 - INFO - The provided paragraph does not relate to any of the learning goals listed in the given passage. It is a general statement about exploring the architecture of the platform.
2023-04-03 21:06:22,205 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 21:06:22,205 - INFO - No related goals found
2023-04-03 21:06:23,126 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:06:23,138 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-03 21:06:23,138 - INFO - No related goals found
2023-04-03 21:06:24,704 - INFO - The paragraph does not relate to any of the learning goals mentioned. It just provides some general advice on understanding the need for code on the Lightning Platform.
2023-04-03 21:06:24,717 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-03 21:06:24,717 - INFO - No related goals found
2023-04-03 21:06:25,614 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:06:25,627 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-03 21:06:25,627 - INFO - No related goals found
2023-04-03 21:06:26,801 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:06:26,814 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-03 21:06:26,814 - INFO - No related goals found
2023-04-03 21:06:28,609 - INFO - The paragraph does not relate to any of the learning goals mentioned in the provided list. It only provides general information on object-oriented design principles and the features of Apex that support these principles.
2023-04-03 21:06:29,445 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-03 21:06:29,445 - INFO - No related goals found
2023-04-03 21:06:31,124 - INFO - The paragraph does not relate to any of the learning goals listed. It is a standalone statement that does not offer any information related to Salesforce development or certification exam content.
2023-04-03 21:06:31,169 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-03 21:06:31,169 - INFO - No related goals found
2023-04-03 21:06:32,729 - INFO - The paragraph does not relate to any of the learning goals listed. It provides an example of a simple Apex class to showcase the similarity between Apex and C#.
2023-04-03 21:06:32,776 - INFO - Processed paragraph 14 in d1.txt: public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
2023-04-03 21:06:32,776 - INFO - No related goals found
2023-04-03 21:06:34,287 - INFO - This paragraph does not relate to any of the learning goals listed. It is not providing information related to Salesforce certification exam content.
2023-04-03 21:06:34,331 - INFO - Processed paragraph 15 in d1.txt: The basic syntax for defining classes is:
2023-04-03 21:06:34,331 - INFO - No related goals found
2023-04-03 21:06:35,850 - INFO - The paragraph does not relate to any of the learning goals provided. It is just a brief introduction to the syntax of class declaration in Apex language.
2023-04-03 21:06:35,897 - INFO - Processed paragraph 16 in d1.txt: private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
2023-04-03 21:06:35,897 - INFO - No related goals found
2023-04-03 21:06:37,856 - INFO - The paragraph does not relate to any of the learning goals listed. It is focused on outlining the data types supported by Apex, such as primitive types and the ID data type used for record identifiers.
2023-04-03 21:06:37,901 - INFO - Processed paragraph 17 in d1.txt: Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
2023-04-03 21:06:37,902 - INFO - No related goals found
2023-04-03 21:06:38,814 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:06:38,858 - INFO - Processed paragraph 18 in d1.txt: Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
2023-04-03 21:06:38,858 - INFO - No related goals found
2023-04-03 21:06:41,270 - INFO - The paragraph does not relate to any of the learning goals mentioned in the provided list. The paragraph provides an explanation of sObjects, which is a fundamental concept in Salesforce development, but it does not specifically cover any of the listed learning goals.
2023-04-03 21:06:41,319 - INFO - Processed paragraph 19 in d1.txt: Besides primitives, supported data types include sObjects, either as a generic sObject or a specific one, such as an Account or Contact. Remember, an sObject is just a Salesforce object. You can think of it as a table in a database. The sObject can be either a standard one that comes built in with Salesforce or a custom one that you define yourself.
2023-04-03 21:06:41,319 - INFO - No related goals found
2023-04-03 21:06:43,504 - INFO - None of the learning goals listed in the paragraph relate to the content of the given paragraph. The paragraph talks about the use of enums in Apex programming and does not address any of the learning goals listed.
2023-04-03 21:06:43,517 - INFO - Processed paragraph 20 in d1.txt: Additionally, a data type can be a typed list of values, also known as an enum. But watch out, because these aren’t the same enums you’re used to working with in .NET. In Apex, you can use enums with numbers, but you can’t define what these number values are. Also, the ordinal assignment starts at zero. For example, if you had an enum like the following.
2023-04-03 21:06:43,517 - INFO - No related goals found
2023-04-03 21:06:45,343 - INFO - The paragraph does not relate to any of the learning goals provided in the given list. It is not related to Salesforce development or any certification exam that covers Salesforce-specific knowledge.
2023-04-03 21:06:45,357 - INFO - Processed paragraph 21 in d1.txt: public enum myEnums {
            Enum1,
            Enum2,
            Enum3
 }
If you tried to access the ordinal value of the third enum, the value of the enumOrd variable would be 2.
2023-04-03 21:06:45,357 - INFO - No related goals found
2023-04-03 21:06:47,274 - INFO - The paragraph does not relate to any of the learning goals provided. It contains information about the collection library in Apex and does not address any of the topics listed in the learning goals.
2023-04-03 21:06:47,289 - INFO - Processed paragraph 22 in d1.txt: Integer enumOrd = myEnums.Enum3.ordinal();
Working with Collections
.NET supports a large collection library with numerous types and extension methods. And here’s some good news. Apex has only the following three collections. Talk about simple, right?
2023-04-03 21:06:47,289 - INFO - No related goals found
2023-04-03 21:06:50,116 - INFO - The paragraph does not relate to any of the learning goals listed. The paragraph is discussing the concept of a list in Apex, which is not one of the learning goals listed. The learning goals listed are focused on specific concepts and skills related to the Salesforce platform and development using Apex.
2023-04-03 21:06:50,132 - INFO - Processed paragraph 23 in d1.txt: List
A list is an ordered collection of elements that works much the same as a traditional array. In fact, arrays in Apex are synonymous with lists, and you can use them interchangeably. For example, the following is one way to declare a variable as a list of strings.
2023-04-03 21:06:50,132 - INFO - No related goals found
2023-04-03 21:06:51,861 - INFO - The paragraph does not relate to any of the learning goals mentioned in the given list. It is a basic example of declaring a variable as a list of strings in Apex programming language.
2023-04-03 21:06:51,875 - INFO - Processed paragraph 24 in d1.txt: List<String> myStrings =  new List<String>();
Alternatively, you can declare the myStrings variable as an array but assign it to a list rather than an array.
2023-04-03 21:06:51,875 - INFO - No related goals found
2023-04-03 21:06:53,655 - INFO - The paragraph does not relate to any of the learning goals mentioned in the provided list. It is not related to Salesforce development and does not provide any information related to the objectives of the certification exam.
2023-04-03 21:06:53,670 - INFO - Processed paragraph 25 in d1.txt: String[] myStrings = new List<String>();
Another thing you can do is declare the list and initialize its values, all in one step, such as the following.
2023-04-03 21:06:53,670 - INFO - No related goals found
2023-04-03 21:06:56,520 - INFO - The paragraph does not relate to any of the stated learning goals. It is a code example discussing how to add values to a list in Apex, but it does not provide information on multi-tenant concepts, programmatic customizations, data modeling, process automation, or any of the other topics listed in the learning goals.
2023-04-03 21:06:56,535 - INFO - Processed paragraph 26 in d1.txt: List<String> myStrings =  new List<String> {'String1', 'String2', 'String3' };
You can also add values to the list after it has been created, such as this:
2023-04-03 21:06:56,535 - INFO - No related goals found
2023-04-03 21:06:58,022 - INFO - The paragraph does not relate to any of the learning goals listed. It simply provides an example of how to create a list variable in Apex development.
2023-04-03 21:06:58,037 - INFO - Processed paragraph 27 in d1.txt: List<String> myStrings = new List<String>();
myStrings.add('String1');
myStrings.add('String2');
myStrings.add('String3');
You’ll probably create a lot of list variables in your Apex development, because the output of every SOQL query is a list. For example, you could create a list of Accounts using code such as the following:
2023-04-03 21:06:58,037 - INFO - No related goals found
2023-04-03 21:06:59,565 - INFO - The paragraph does not relate to any of the learning goals listed. It simply provides an example of accessing data from a list in Apex programming.
2023-04-03 21:06:59,580 - INFO - Processed paragraph 28 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
Like arrays, lists have indexes that start at zero. So you could access the name of the first account in the list with code like this:
2023-04-03 21:06:59,580 - INFO - No related goals found
2023-04-03 21:07:00,848 - INFO - The paragraph does not relate to any of the learning goals provided in the given list.
2023-04-03 21:07:00,864 - INFO - Processed paragraph 29 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
String firstAccount = myAccounts[0].Name;
Set
A set is an unordered collection of elements that does not contain duplicates. A set is commonly used to store ID values because the value are always unique. You could then use the set as part of a WHERE clause in a SOQL query. For example, here we’re creating a set that contains two unique IDs for Accounts. We then use the set in the SOQL query to return Accounts only for those IDs.
2023-04-03 21:07:00,865 - INFO - No related goals found
2023-04-03 21:07:03,043 - INFO - The paragraph does not relate to any of the learning goals listed. It provides an example of creating a map in Salesforce Apex programming language, but does not pertain to any specific learning objective from the list.
2023-04-03 21:07:03,054 - INFO - Processed paragraph 30 in d1.txt: Set<ID> accountIds = new
  Set<ID>{'001d000000BOaHSAA1','001d000000BOaHTAA1'};  
List<Account> accounts = [SELECT Name
  FROM Account WHERE Id IN :accountIds];    
Map
A map is a collection of key-value pairs. Each key maps to a single value. A map is useful when you need to quickly find something by a key. The key values must be unique, so you could have a map that contained ID values for the key and then mapped to an sObject. For example, you could use the following code to declare a map variable named accountMap that contains all Accounts mapped to their IDs.
2023-04-03 21:07:03,055 - INFO - No related goals found
2023-04-03 21:07:05,166 - INFO - This paragraph does not relate to any of the learning goals provided in the given list. It provides a code snippet for accessing a specific Account record using the get method on a Map collection that has already been initialized with a query.
2023-04-03 21:07:05,180 - INFO - Processed paragraph 31 in d1.txt: Map<Id, Account> accountMap = new Map<Id, Account>([SELECT Id, Name FROM Account]);
You could then access a specific Account record using the get method and code similar to the following.
2023-04-03 21:07:05,181 - INFO - No related goals found
2023-04-03 21:07:06,406 - INFO - The paragraph does not relate to any of the learning goals listed in the provided list.
2023-04-03 21:07:06,420 - INFO - Processed paragraph 32 in d1.txt: Id accId = '001d000000BOaHSAA1';
Account account = accountMap.get(accId);
Check out the official docs to learn more about the data types that Apex supports.
2023-04-03 21:07:06,421 - INFO - No related goals found
2023-04-03 21:07:07,337 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:07:07,350 - INFO - Processed paragraph 33 in d1.txt: ASP.NET to Visualforce
If you’re an ASP.NET web forms developer, you’ll probably feel right at home with Visualforce. There are many similarities between the two., most notably, a clear separation of the markup from the code. You also use form fields to map code to properties defined in the controller.
2023-04-03 21:07:07,350 - INFO - No related goals found
2023-04-03 21:07:08,622 - INFO - The paragraph does not relate to any of the learning goals mentioned in the given list.
2023-04-03 21:07:08,633 - INFO - Processed paragraph 34 in d1.txt: The bad news is that viewstate is just as much a pain with Visualforce as it is with ASP.NET due to the fact that HTTP is stateless. The good news is that there are ways around the viewstate limitations. Learn more by checking out the link in Resources.
2023-04-03 21:07:08,634 - INFO - No related goals found
2023-04-03 21:07:09,800 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:07:09,812 - INFO - Processed paragraph 35 in d1.txt: Visualforce is a framework for rendering HTML pages using an MVC paradigm. Now before you get all excited and start thinking, “Cool, Visualforce is like ASP.NET MVC. I love MVC.”, keep in mind that comparing the two is a bit like comparing apples and pumpkins. You can use either one to render web pages, and both separate the application logic from the markup and the database model, but they do so in different ways.
2023-04-03 21:07:09,813 - INFO - No related goals found
2023-04-03 21:07:11,334 - INFO - The paragraph does not relate to any of the learning goals listed. It is simply introducing the concept of Visualforce markup code for a simple page.
2023-04-03 21:07:11,346 - INFO - Processed paragraph 36 in d1.txt: To learn all about Visualforce, check out the Visualforce Basics module. For now, we just want to give you a basic idea of how it works by showing you an example. You can use the following markup code to render a simple page used to enter Contact data.
2023-04-03 21:07:11,346 - INFO - No related goals found
2023-04-03 21:07:14,255 - INFO - This paragraph relates to learning goal number 14, which involves displaying content or modifying Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. It provides an example of a Visualforce page with a standard controller and explains the concept of standard and custom controllers in Visualforce.
2023-04-03 21:07:14,270 - INFO - Processed paragraph 37 in d1.txt: <apex:page standardController="Contact">
  <apex:form>
    <apex:pageBlock title="Edit Contact" mode="Edit">
       <apex:pageBlockButtons >
         <apex:commandButton action="{!edit}" id="editButton" value="Edit"/>
         <apex:commandButton action="{!save}" id="saveButton" value="Save"/>
         <apex:commandButton action="{!cancel}" id="cancelButton" value="Cancel"/>
       </apex:pageBlockButtons>
       <apex:pageBlockSection >
          <apex:inputField value="{!contact.lastname}" />
          <apex:inputField value="{!contact.accountId}"/>
          <apex:inputField value="{!contact.phone}"/>
       </apex:pageBlockSection>
    </apex:pageBlock>
  </apex:form>
</apex:page>
The example uses what is known as a standard controller, which is part of the Lightning Platform. It’s basically system-generated code that allows you to quickly incorporate basic CRUD functionality in your Visualforce pages. But before you start getting worried, just know that you can create your own custom controllers to add in more complex functioning. Learn all about how standard and custom controllers work in the Visualforce Basics module. The rendered version of this page looks like the following:
2023-04-03 21:07:14,271 - INFO - No related goals found
2023-04-03 21:07:15,709 - INFO - The paragraph does not relate to any of the learning goals provided. It is simply mentioning a screenshot of a visualforce page used to edit contact information.
2023-04-03 21:07:15,724 - INFO - Processed paragraph 38 in d1.txt: Screenshot of a custom Visualforce page used to edit contact information
2023-04-03 21:07:15,724 - INFO - No related goals found
2023-04-03 21:07:17,610 - INFO - The paragraph does not relate to any of the learning goals listed. It briefly mentions the Lightning Component Framework, but does not provide any information that directly corresponds to any of the learning goals.
2023-04-03 21:07:17,624 - INFO - Processed paragraph 39 in d1.txt: Note
Note
You probably know a bit about Lightning Components, and could be thinking, "Is Lightning like ASP.NET MVC?" The short answer is no. Lightning is a lighter weight way of delivering super fast and responsive web apps, but Lightning is a component-based framework. Learn all about it by visiting the Lightning Web Components Basics module.
2023-04-03 21:07:17,624 - INFO - No related goals found
2023-04-03 21:07:18,461 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:07:18,474 - INFO - Processed paragraph 40 in d1.txt: What Is Different?
Now that you know a little about how Apex is similar to .NET, let’s go over some differences. For starters, unlike C#, Apex is not case sensitive.
2023-04-03 21:07:18,474 - INFO - No related goals found
2023-04-03 21:07:20,291 - INFO - The paragraph does not relate to any of the learning goals mentioned. It is a standalone explanation of how Apex code and the Lightning Platform database are tightly coupled and constantly in sync.
2023-04-03 21:07:20,304 - INFO - Processed paragraph 41 in d1.txt: Apex and Database are Tightly Coupled
Apex code and the Lightning Platform database are tightly coupled to the point where they are sometimes indistinguishable. Each standard or custom object in the database has a "mystical" representation via an Apex class that provides all sorts of functionality to make interacting with the database a snap. The class and its underlying object are essentially a mirror image of one another that is constantly in sync. For instance, whenever you create a new field in an object, a class member is automatically surfaced to reference the values in the database. It's also impossible to add a reference in your Apex code to a field that doesn't exist; the compiler will return an error and simply not save your code. The platform works hard to ensure these dependencies and won't let the database schema and your code become out of sync. Therefore, if you attempt to delete a custom object or a field that is referenced by Apex code, the platform will raise an error and disallow the action.
2023-04-03 21:07:20,304 - INFO - No related goals found
2023-04-03 21:07:22,333 - INFO - The paragraph does not relate to any of the learning goals listed. It briefly mentions Apex design patterns as a resource for further learning, but does not provide any specific information related to any of the learning goals.
2023-04-03 21:07:22,346 - INFO - Processed paragraph 42 in d1.txt: Different Design Patterns
As a .NET developer, you are probably already familiar with design patterns. However, most of those patterns don’t work on the Lightning Platform. You learn more about this in the next units when we go over execution context and trigger design, but also consider checking out the links listed in Resources regarding Apex design patterns.
2023-04-03 21:07:22,346 - INFO - No related goals found
2023-04-03 21:07:23,181 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:07:23,195 - INFO - Processed paragraph 43 in d1.txt: What’s important to understand is that if you try to apply the same design strategies that you use in .NET to the Lightning Platform, you’ll likely encounter problems when you go to test and deploy your solutions. We suggest taking some time to learn about which design patterns work best in the Lightning Platform world before you start cranking out the code.
2023-04-03 21:07:23,195 - INFO - No related goals found
2023-04-03 21:07:24,403 - INFO - The paragraph does not relate to any of the learning goals mentioned in the list.
2023-04-03 21:07:24,414 - INFO - Processed paragraph 44 in d1.txt: Unit Tests Are Required
We know you’re used to writing unit tests for your .NET applications and probably understand the benefits to using them. What is different on the Lightning Platform is that you must have 75% test coverage to deploy your Apex code to a production org.
2023-04-03 21:07:24,415 - INFO - No related goals found
2023-04-03 21:07:26,455 - INFO - The paragraph does not relate to any of the learning goals listed. It only mentions the importance of unit testing in promoting the development of robust and error-free code, and ensuring the stability of the platform.
2023-04-03 21:07:26,468 - INFO - Processed paragraph 45 in d1.txt: Not only does having unit tests promote the development of robust and error-free code, but they’re vital to the stability of the platform, because all tests are run before every major release. To learn more about unit testing, see An Introduction to Apex Code Test Methods.
2023-04-03 21:07:26,468 - INFO - No related goals found
2023-04-03 21:07:27,357 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:07:27,370 - INFO - Processed paragraph 46 in d1.txt: No Solution, Project, or Config Files
The Lightning Platform has no such thing as a solution or project file. You can create an application, but it’s not the same as creating a .NET application or assembly.
2023-04-03 21:07:27,371 - INFO - No related goals found
2023-04-03 21:07:28,224 - INFO - The paragraph does not relate to any of the listed learning goals.
2023-04-03 21:07:28,238 - INFO - Processed paragraph 47 in d1.txt: An application on the Lightning Platform is just a loose collection of components, such as tabs, reports, dashboards, and pages. Several come built in with your Salesforce org, and in a few seconds, you can create your own by walking through a point-and-click wizard. You can even purchase apps created by third-parties on what is known as the AppExchange.
2023-04-03 21:07:28,238 - INFO - No related goals found
2023-04-03 21:07:29,096 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:07:29,107 - INFO - Processed paragraph 48 in d1.txt: All your code resides and executes in the cloud. There is also no such thing as a config file in the Lightning Platform world. Because the database is baked right in, you don’t need connection strings. And unlike ASP.NET MVC, you don’t need to configure routes. You can create custom settings in Salesforce, but these are added and managed declaratively.
2023-04-03 21:07:29,107 - INFO - No related goals found
2023-04-03 21:07:29,998 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:07:30,010 - INFO - Processed paragraph 49 in d1.txt: A Much Smaller Class Library
The Apex class library is considerably smaller than the .NET Framework class library, so it’s easier and faster for you to come up to speed with Apex. But honestly, you might find it a bit frustrating when you try to look for comparative functionality that just doesn’t exist in Apex.
2023-04-03 21:07:30,011 - INFO - No related goals found
2023-04-03 21:07:30,926 - INFO - This paragraph does not relate to any of the learning goals mentioned.
2023-04-03 21:07:30,939 - INFO - Processed paragraph 50 in d1.txt: Keep in mind that the Lightning Platform is built with the idea of providing rapid application development. It’s also different than the .NET platform, so you might find yourself looking for functionality that you’re used to working that simply doesn’t exist with the Lightning Platform. However, if you’re looking to build pixel-perfect, custom-coded applications, our Heroku Enterprise platform provides all the power and features you need.
2023-04-03 21:07:30,939 - INFO - No related goals found
2023-04-03 21:07:32,604 - INFO - The given paragraph does not relate to any of the learning goals listed. It is simply an introductory statement regarding the availability and usage of Salesforce Developer Edition (DE) org and Developer Console application.
2023-04-03 21:07:32,616 - INFO - Processed paragraph 51 in d1.txt: Development Tools
More than likely you have already signed up for a free Developer Edition (DE) org. Perhaps you’ve also opened and used the online Developer Console application.
2023-04-03 21:07:32,616 - INFO - No related goals found
2023-04-03 21:07:34,466 - INFO - The paragraph relates to learning goal number 19: "Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data."
2023-04-03 21:07:34,479 - INFO - Processed paragraph 52 in d1.txt: You can use Developer Console to edit and navigate source code, and it’s also helpful for debugging and troubleshooting. We’ll go over this more in a later unit, so stay tuned. If you’ve already gone through the first module about database basics, you know that you can also use Developer Console to execute SOQL and SOSL queries and view query plans. If you haven’t used Developer Console yet, don’t worry because we’ll be going through it shortly when we create an Apex class.
2023-04-03 21:07:34,480 - INFO - No related goals found
2023-04-03 21:07:35,368 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:07:35,381 - INFO - Processed paragraph 53 in d1.txt: As a .NET developer, you're probably familiar with Visual Studio Code. You will be happy to learn that we have Salesforce Extensions for VS Code that allow you to do custom development on your local machine. The extension is closely tied to Salesforce DX, which provides a modern source-driven development experience. You can learn more about Salesforce DX from the Get Started with Salesforce DX trail.
2023-04-03 21:07:35,381 - INFO - No related goals found
2023-04-03 21:07:37,801 - INFO - None of the learning goals in the given paragraph are related to the content mentioned. The paragraph discusses the Salesforce CLI, which is a command-line interface for the Lightning Platform and is not directly related to the various learning goals stated in the given paragraph.
2023-04-03 21:07:37,814 - INFO - Processed paragraph 54 in d1.txt: And finally, we thought you would be interested to know about a powerful command-line interface to the Lightning Platform. If you’re one of those developers that just loves the command line, the Salesforce CLI is right up your alley.
2023-04-03 21:07:37,814 - INFO - No related goals found
2023-04-03 21:07:39,258 - INFO - The learning goal that the given paragraph relates to is:

- Given a scenario, prevent user interface and data access security vulnerabilities. [16]
2023-04-03 21:07:39,271 - INFO - Processed paragraph 55 in d1.txt: Handling Security
The good news here is that in the Lightning Platform you don’t have to worry about authentication or storing passwords and database connection strings. Identity is handled by the platform. You can control access to data at many different levels, including object level, record level, and field level. Security is also handled declaratively. In many cases, security is defined and set up by a Salesforce administrator. As a developer, it’s important to be aware of how it works. Learn more by checking out the Data Security module.
2023-04-03 21:07:39,271 - INFO - Related goals: 16
2023-04-03 21:07:40,167 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:07:40,180 - INFO - Processed paragraph 56 in d1.txt: What About Integration?
You can integrate with the platform in a number of ways, but you’ll probably use SOAP and REST the most. You can use them in either direction.
2023-04-03 21:07:40,180 - INFO - No related goals found
2023-04-03 21:07:41,096 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:07:41,108 - INFO - Processed paragraph 57 in d1.txt: You can create and expose web services using the Apex programming language, as well as invoke external web services from Apex. You can also react to incoming email messages and have automated outbound messages sent when certain events occur.
2023-04-03 21:07:41,108 - INFO - No related goals found
2023-04-03 21:07:42,238 - INFO - The paragraph does not relate to any of the learning goals mentioned in the given list.
2023-04-03 21:07:42,251 - INFO - Processed paragraph 58 in d1.txt: If you really want to get your hands dirty, Salesforce offers both SOAP and REST APIs that provide direct access to the data in your org. Toolkits that wrap around the APIs are available, so you can use whatever language you prefer: .NET, Java, PHP, Objective C, Ruby, and JavaScript.
2023-04-03 21:07:42,251 - INFO - No related goals found
2023-04-03 21:07:43,487 - INFO - The paragraph does not relate to any of the learning goals mentioned in the given list.
2023-04-03 21:07:43,500 - INFO - Processed paragraph 59 in d1.txt: Numerous third-party integration applications are also available on the AppExchange. Really, just about anything is possible. You can learn more about all the integration points by completing the Apex Integration module.
2023-04-03 21:07:43,501 - INFO - No related goals found
2023-04-03 21:07:44,886 - INFO - The paragraph does not relate to any of the learning goals listed. It is just an example text on how to create an Apex class using Developer Console.
2023-04-03 21:07:44,900 - INFO - Processed paragraph 60 in d1.txt: Create an Apex Class
Now that you know more about how the Lightning Platform relates to the .NET platform, let’s jump right in and create an Apex class using Developer Console. The class we’ll create includes the public method sendMail. It includes a private helper method called inspectResults for inspecting the results of the email send call.
2023-04-03 21:07:44,900 - INFO - No related goals found
2023-04-03 21:07:48,831 - INFO - This paragraph relates to the learning goal of "Given a scenario, use and apply Apex control flow statements" [7] since it demonstrates how to write a basic Apex class with control flow statements like "if" and "for." It also relates to the learning goal of "Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data" [19] since it mentions saving the class and notes that object- or field-level security is not implemented.
2023-04-03 21:07:48,842 - INFO - Processed paragraph 61 in d1.txt: From Setup in your Developer org, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > New > Apex Class.
Enter EmailManager as the class name and click OK.
Delete the existing code, and insert the following snippet:
public with sharing class EmailManager {
    // Public method
    public static void sendMail(String address, String subject, String body) {
        // Create an email message object
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {address};
        mail.setToAddresses(toAddresses);
        mail.setSubject(subject);
        mail.setPlainTextBody(body);
        // Pass this email message to the built-in sendEmail method
        // of the Messaging class
        Messaging.SendEmailResult[] results = Messaging.sendEmail(
            new Messaging.SingleEmailMessage[] { mail });
        // Call a helper method to inspect the returned results.
        inspectResults(results);
    }
    // Helper method
    private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
        Boolean sendResult = true;
        // sendEmail returns an array of result objects.
        // Iterate through the list to inspect results.
        // In this class, the methods send only one email,
        // so we should have only one result.
        for (Messaging.SendEmailResult res : results) {
            if (res.isSuccess()) {
                System.debug('Email sent successfully');
            } else {
                sendResult = false;
                System.debug('The following errors occurred: ' + res.getErrors());                 
            }
        }
        return sendResult;
    }
}   
Press Ctrl + S to save your class.
Note
Note
This simple example doesn’t implement the required object- or field-level security. See this snippet for a quickstart.
2023-04-03 21:07:48,843 - INFO - No related goals found
2023-04-03 21:07:49,996 - INFO - This paragraph does not relate to any of the learning goals mentioned in the provided list.
2023-04-03 21:07:50,012 - INFO - Processed paragraph 62 in d1.txt: Invoke a Method
Because we declared the public sendMail method as static, we can access it without creating an instance of the class. We can do so easily by using Anonymous Apex in Developer Console.
2023-04-03 21:07:50,012 - INFO - No related goals found
2023-04-03 21:07:52,286 - INFO - The paragraph does not relate to any of the learning goals listed in the provided text. It is simply an example of how to use the Salesforce Developer Console to send an email and reflects on the ease of accomplishing the task in Salesforce compared to other platforms such as .NET.
2023-04-03 21:07:52,301 - INFO - Processed paragraph 63 in d1.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
EmailManager.sendMail('Your email address', 'Trailhead Tutorial', '123 body');
Make sure that the Open Log option is selected, and click Execute. A new tab shows you the execution log.
Select the Debug Only option so that you see only the debug statements displayed in the log. You should see a message telling you that the Email was sent successfully. You should also receive an email if you entered a valid email address.
Imagine if you had tried to accomplish that same task in .NET. Would it have been that easy to create a .NET application that sent emails? Come on, tell the truth.
2023-04-03 21:07:52,302 - INFO - No related goals found
2023-04-03 21:07:53,516 - INFO - The paragraph provided does not relate to any of the learning goals listed in the set.
2023-04-03 21:07:53,530 - INFO - Processed paragraph 0 in d2.txt: Understand Execution Context
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:07:53,531 - INFO - No related goals found
2023-04-03 21:07:55,970 - INFO - The paragraph does not relate to any of the learning goals mentioned in the given list. The paragraph discusses some tips and suggestions for working with Apex and Salesforce Developer tools, in addition to a reference to a video series that can help learners follow along with an expert as they work through certain steps.
2023-04-03 21:07:55,987 - INFO - Processed paragraph 1 in d2.txt: Know which methods to use to invoke Apex
Write a trigger for a Salesforce object
Observe how execution context works by executing code in Developer Console
Understand how governor limits impact design patterns
Understand the importance of working with bulk operations
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:07:55,987 - INFO - No related goals found
2023-04-03 21:08:06,891 - INFO - The paragraph relates to multiple learning goals, including:
- Understanding multi-tenant concepts and design frameworks (goal 1)
- Identifying common use cases and best practices for declarative versus programmatic customizations (goal 2)
- Creating and accessing the appropriate data model (goal 3)
- Identifying options and considerations for importing and exporting data (goal 4)
- Identifying the capabilities of declarative process automation (goal 5)
- Using and applying Apex control flow statements (goal 7)
- Writing SOSL, SOQL, and DML statements in Apex (goal 8)
- Following best practices for writing Apex classes and triggers (goal 9)
- Identifying the implications of governor limits on Apex transactions (goal 10)
- Implementing exception handling in Apex (goal 12)
- Displaying content or modifying Salesforce data using Visualforce (goal 14)
- Describing the Lightning Component framework (goal 15)
- Preventing user interface and data access security vulnerabilities (goal 16)
- Displaying and using custom user interface components (goal 16)
- Implementing Apex to work with various types of page components (goal 18)
- Writing and executing tests using various sources of test data (goal 19)
- Knowing how and when to use Salesforce Developer tools (goal 20)
- Describing how to approach debugging and monitoring (goal 21)
- Describing the process for deploying code and associated configurations (goal 22)
2023-04-03 21:08:06,908 - INFO - Processed paragraph 2 in d2.txt: 
2023-04-03 21:08:06,908 - INFO - No related goals found
2023-04-03 21:08:07,837 - INFO - The paragraph provided does not provide any information on specific learning goals.
2023-04-03 21:08:07,852 - INFO - Processed paragraph 3 in d2.txt: (This clip starts at the 16:36 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-03 21:08:07,852 - INFO - No related goals found
2023-04-03 21:08:09,104 - INFO - The paragraph does not relate to any of the learning goals listed in the provided excerpt.
2023-04-03 21:08:09,118 - INFO - Processed paragraph 4 in d2.txt: What Is Execution Context?
For ASP.NET applications, code is executed in the context of an application domain. In the Lightning Platform world, code executes within an execution context. In a nutshell, this context represents the time between when the code is executed and when it ends. The important thing for you to understand is that the Apex code you write is not always the only code that is executing.
2023-04-03 21:08:09,119 - INFO - No related goals found
2023-04-03 21:08:10,047 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:08:10,060 - INFO - Processed paragraph 5 in d2.txt: To understand how this works, you need to know all the ways Apex code can be executed on the platform.
2023-04-03 21:08:10,060 - INFO - No related goals found
2023-04-03 21:08:11,883 - INFO - The paragraph does not relate to any of the learning goals listed above. The paragraph seems to introduce a new topic that is not covered in the listed learning goals.
2023-04-03 21:08:11,895 - INFO - Processed paragraph 6 in d2.txt: Methods of Invoking Apex
2023-04-03 21:08:11,895 - INFO - No related goals found
2023-04-03 21:08:13,441 - INFO - The paragraph does not relate to any of the learning goals provided. It provides information about different methods in which Apex code can be executed within an execution context.
2023-04-03 21:08:13,454 - INFO - Processed paragraph 7 in d2.txt: Method	Description
Database Trigger	Invoked for a specific event on a custom or standard object.
Anonymous Apex	Code snippets executed on the fly in Dev Console & other tools.
Asynchronous Apex	Occurs when executing a future or queueable Apex, running a batch job, or scheduling Apex to run at a specified interval.
Web Services	Code that is exposed via SOAP or REST web services.
Email Services	Code that is set up to process inbound email.
Visualforce or Lightning Pages	Visualforce controllers and Lightning components can execute Apex code automatically or when a user initiates an action, such as clicking a button. Lightning components can also be executed by Lightning processes and flows.
Besides invoking Apex code, actions, such as creating a new task, sending an email, performing a field update, or sending an outbound message, can all be triggered by one of the declarative platform features. These actions also run within an execution context.
2023-04-03 21:08:13,454 - INFO - No related goals found
2023-04-03 21:08:15,005 - INFO - The paragraph relates to learning goal number 10: Given a scenario, identify the implications of governor limits on Apex transactions.
2023-04-03 21:08:15,019 - INFO - Processed paragraph 8 in d2.txt: Another important consideration is the context of the user executing the Apex code. By default, Apex executes in system context. Apex code has access to all objects and fields. Object permissions, field-level security, and sharing rules aren’t applied for the current user. You can use the with sharing keyword to specify that the sharing rules for the current user be taken into account for a class. This topic is important, so check out Using the with sharing or without sharing keywords.
2023-04-03 21:08:15,019 - INFO - No related goals found
2023-04-03 21:08:16,105 - INFO - The paragraph does not relate to any specific learning goal listed in the provided paragraph.
2023-04-03 21:08:16,119 - INFO - Processed paragraph 9 in d2.txt: Trigger Essentials
Before learning more about the execution context, let’s take a step back to introduce you to the world of database triggers. Similar to triggers in SQL Server, Apex database triggers execute programming logic before or after events to records in Salesforce. When defining the trigger, you can specify more than one of the following events:
2023-04-03 21:08:16,119 - INFO - No related goals found
2023-04-03 21:08:17,388 - INFO - None of the learning goals in the given paragraph relate to the mentioned paragraph on trigger syntax.
2023-04-03 21:08:17,401 - INFO - Processed paragraph 10 in d2.txt: before insert
before update
before delete
after insert
after update
after delete
after undelete
The basic syntax for a trigger looks like the following:
2023-04-03 21:08:17,402 - INFO - No related goals found
2023-04-03 21:08:18,264 - INFO - The paragraph does not directly relate to any of the listed learning goals.
2023-04-03 21:08:18,278 - INFO - Processed paragraph 11 in d2.txt: trigger TriggerName on ObjectName (trigger_events) {
   // code_block
}
Now, we know how much .NET developers love to solve problems with code, but we have a super big productivity tip for you here. You only want to resort to using a trigger when you are absolutely sure that the same thing cannot be accomplished with one of our point-and-click automation tools.
2023-04-03 21:08:18,278 - INFO - No related goals found
2023-04-03 21:08:19,793 - INFO - This paragraph does not relate to any of the listed learning goals. It is providing general information about the Salesforce platform and Flow Builder as an automation tool.
2023-04-03 21:08:19,808 - INFO - Processed paragraph 12 in d2.txt: To make your life easier, the Salesforce platform includes a powerful automation tool, Flow Builder, for managing business logic without writing code. In most cases, tasks that could once upon a time only be accomplished with a trigger are now better suited for one of the automation tools.
2023-04-03 21:08:19,808 - INFO - No related goals found
2023-04-03 21:08:20,980 - INFO - The paragraph does not relate to any of the learning goals in the list provided.
2023-04-03 21:08:20,996 - INFO - Processed paragraph 13 in d2.txt: Note
Note
If you’re a developer new to the platform, definitely take the time to check out the Approve Records with Approval Processes module in the Developer Beginner trail before creating a trigger. We’re pretty sure that you don’t want to be known as the guy or gal who brought a lot of unnecessary technical overhead into the Salesforce org.
2023-04-03 21:08:20,996 - INFO - No related goals found
2023-04-03 21:08:22,506 - INFO - The paragraph does not relate to any of the listed learning goals. It provides an example for better understanding the execution context in Apex.
2023-04-03 21:08:22,523 - INFO - Processed paragraph 14 in d2.txt: Mark Execution Context
To better understand execution context, let’s walk through creating an Apex database trigger that creates an opportunity when a new account is entered. This trigger calls a method from a handler class, so we first need to create that.
2023-04-03 21:08:22,523 - INFO - No related goals found
2023-04-03 21:08:23,670 - INFO - The paragraph does not relate to any of the learning goals listed in the provided excerpt.
2023-04-03 21:08:23,686 - INFO - Processed paragraph 15 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > New > Apex Class.
Enter AccountHandler for the class name and click OK.
Delete the existing code, and insert the following snippet:
public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            insert opp;
        }
    }
}
Press Ctrl + S to save your class.
Note
Note
It’s considered a best practice to use only one trigger per object, which you see in the following example. You can then use context-specific handler methods within triggers to create logic-less triggers. By adopting this practice, you can avoid the common pitfalls that new developers fall into. To learn more about these techniques, check out Trigger Frameworks and Apex Trigger Best Practices.
2023-04-03 21:08:23,687 - INFO - No related goals found
2023-04-03 21:08:24,967 - INFO - The paragraph does not relate to any of the learning goals mentioned in the provided list.
2023-04-03 21:08:24,979 - INFO - Processed paragraph 16 in d2.txt: So now that we have the handler class, we create the Account trigger.
2023-04-03 21:08:24,979 - INFO - No related goals found
2023-04-03 21:08:27,408 - INFO - This paragraph does not relate to any of the learning goals listed in the provided text. Instead, it provides a walkthrough for creating an Apex trigger in Developer Console and executing anonymous code to simulate a user entering a new Account using the Salesforce interface.
2023-04-03 21:08:27,421 - INFO - Processed paragraph 17 in d2.txt: In Developer Console, select File > New > Apex Trigger.
Enter AccountTrigger as the name, and select Account as the sObject.
Click Submit.
Delete the existing code, and insert the following snippet:
trigger AccountTrigger on Account (before insert, before update, before
    delete, after insert, after update, after delete,  after undelete) {
    if (Trigger.isAfter && Trigger.isInsert) {
        AccountHandler.CreateNewOpportunity(Trigger.New);
    }
}
Press Ctrl + S to save your trigger.
To complete the walkthrough, we execute anonymous code to simulate a user entering a new Account using the Salesforce interface. Remember, Apex code can be executed a number of different ways.
2023-04-03 21:08:27,421 - INFO - No related goals found
2023-04-03 21:08:30,747 - INFO - This paragraph relates to the learning goal of how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, as stated in learning goal number 21. Specifically, it provides a step-by-step guide on how to open the Developer Console, execute anonymous code, and examine the execution log, which are fundamental procedures for debugging and monitoring system issues.
2023-04-03 21:08:30,762 - INFO - Processed paragraph 18 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
Account acct = new Account(
    Name='Test Account 2',
    Phone='(415)555-8989',
    NumberOfEmployees=50,
    BillingCity='San Francisco');
insert acct;
Make sure that the Open Log option is selected and click Execute. A new tab shows the execution log. Keep it open so that you can examine it carefully.
Examining the Execution Log
Notice that the first line in the execution log marks the EXECUTION_STARTED event and that the last line is the EXECUTION_FINISHED event. Everything in between is the execution context.
2023-04-03 21:08:30,762 - INFO - No related goals found
2023-04-03 21:08:32,336 - INFO - The paragraph does not relate to any of the learning goals listed. It appears to be a random statement that is not related to the certification exam content.
2023-04-03 21:08:32,350 - INFO - Processed paragraph 19 in d2.txt: Let’s take a closer look at what happens. A CODE_UNIT_STARTED event marks when the code from the Execute Anonymous window was kicked off. This line is highlighted in red in the image below.
2023-04-03 21:08:32,350 - INFO - No related goals found
2023-04-03 21:08:34,786 - INFO - The given paragraph does not relate to any of the learning goals mentioned in the provided excerpt. The paragraph appears to be a visual aid that showcases a screenshot of the Debug Log in the Developer Console, which helps track the code execution sequence and events.
2023-04-03 21:08:34,801 - INFO - Processed paragraph 20 in d2.txt: Screenshot of the Debug Log in Developer Console, highlighting the code_unit_started events
2023-04-03 21:08:34,801 - INFO - No related goals found
2023-04-03 21:08:36,274 - INFO - The paragraph does not relate to any of the learning goals listed in the provided paragraph.
2023-04-03 21:08:36,288 - INFO - Processed paragraph 21 in d2.txt: The second CODE_UNIT_STARTED line that is highlighted represents when code for the BeforeInsert event was executed.
2023-04-03 21:08:36,288 - INFO - No related goals found
2023-04-03 21:08:37,388 - INFO - The paragraph does not relate to any of the learning goals mentioned in the provided excerpt.
2023-04-03 21:08:37,402 - INFO - Processed paragraph 22 in d2.txt: You can’t see this in the image, but if you’re following along with your own instance of Developer Console, scroll down further in the results and look for other instances of CODE_UNIT_STARTED. You should see at least one more instance representing when code for the AfterInsert event was executed. If you had created workflow rules that fired when a new account was created, they too would show up in the execution log. All this code operates under the same execution context, and thus, is subject to the same set of governor limits.
2023-04-03 21:08:37,402 - INFO - No related goals found
2023-04-03 21:08:39,548 - INFO - The paragraph relates to learning goal number 2, which is to "Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries."
2023-04-03 21:08:39,563 - INFO - Processed paragraph 23 in d2.txt: You may be asking yourself, why is this so important to understand? Well, because Salesforce is a multi-tenanted environment, those governor limits are vital in keeping each instance of a Salesforce org from consuming too many resources. Essentially, they keep the whole system from crashing.
2023-04-03 21:08:39,563 - INFO - No related goals found
2023-04-03 21:10:09,171 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:09,177 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:10:09,177 - INFO - No related goals found
2023-04-03 21:10:10,200 - INFO - The paragraph does not relate to any of the listed learning goals.
2023-04-03 21:10:10,208 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:10:10,208 - INFO - No related goals found
2023-04-03 21:10:28,259 - INFO - The paragraph relates to multiple learning goals. It covers the following goals:
- Identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. [2]
- Determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]
- Identify the options and considerations when importing and exporting data into development environments. [4]
- Identify the capabilities of declarative process automation features. [5]
- Declare variables, constants, methods, and use modifiers and Apex interfaces. [6]
- Use and apply Apex control flow statements. [7]
- Write SOSL, SOQL, and DML statements in Apex. [8]
- Follow best practices to write Apex classes and triggers. [9]
- Identify the implications of governor limits on Apex transactions. [10]
- Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading. [11]
- Implement exception handling in Apex, including custom exceptions as needed. [12]
- Use declarative functionality and Apex together to automate business logic. [13]
- Display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
- Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
- Prevent user interface and data access security vulnerabilities. [16]
- Display and use custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
- Describe the use cases and best practices for Lightning Web Component events. [17]
- Implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
- Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. [19]
- Know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console. [20]
- Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]
- Describe the environments, requirements, and process for deploying code and associated configurations. [22]
2023-04-03 21:10:28,273 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 21:10:28,273 - INFO - Related goals: 6, 11, 12, 15, 17, 19, 21, 22
2023-04-03 21:10:29,218 - INFO - The paragraph does not relate to any of the listed learning goals.
2023-04-03 21:10:29,230 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 21:10:29,231 - INFO - No related goals found
2023-04-03 21:10:30,116 - INFO - This paragraph does not relate to any learning goals mentioned in the list provided.
2023-04-03 21:10:30,130 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 21:10:30,130 - INFO - No related goals found
2023-04-03 21:10:30,975 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:30,990 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 21:10:30,991 - INFO - No related goals found
2023-04-03 21:10:31,906 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:31,920 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 21:10:31,920 - INFO - No related goals found
2023-04-03 21:10:32,857 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:32,871 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 21:10:32,871 - INFO - No related goals found
2023-04-03 21:10:33,762 - INFO - This paragraph does not relate to any of the learning goals.
2023-04-03 21:10:33,775 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-03 21:10:33,775 - INFO - No related goals found
2023-04-03 21:10:34,685 - INFO - This paragraph is not related to any of the learning goals listed.
2023-04-03 21:10:34,699 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-03 21:10:34,699 - INFO - No related goals found
2023-04-03 21:10:35,948 - INFO - The provided paragraph does not relate to any of the learning goals mentioned in the given text.
2023-04-03 21:10:35,962 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-03 21:10:35,962 - INFO - No related goals found
2023-04-03 21:10:36,925 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:36,939 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-03 21:10:36,939 - INFO - No related goals found
2023-04-03 21:10:37,856 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:38,669 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-03 21:10:38,669 - INFO - No related goals found
2023-04-03 21:10:39,540 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:39,588 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-03 21:10:39,588 - INFO - No related goals found
2023-04-03 21:10:41,200 - INFO - This paragraph does not relate to any of the learning goals listed. It provides an example of a simple Apex class and mentions its similarity to C#.
2023-04-03 21:10:41,250 - INFO - Processed paragraph 14 in d1.txt: public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
2023-04-03 21:10:41,251 - INFO - No related goals found
2023-04-03 21:10:42,686 - INFO - The paragraph does not relate to any of the learning goals listed. It is not specific to Salesforce or any of its features and functionalities.
2023-04-03 21:10:42,736 - INFO - Processed paragraph 15 in d1.txt: The basic syntax for defining classes is:
2023-04-03 21:10:42,736 - INFO - No related goals found
2023-04-03 21:10:44,505 - INFO - This paragraph does not relate to any of the listed learning goals. It appears to be a code snippet and a reference to a resource for learning more about classes, objects, and interfaces in Salesforce.
2023-04-03 21:10:44,517 - INFO - Processed paragraph 16 in d1.txt: private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
2023-04-03 21:10:44,517 - INFO - No related goals found
2023-04-03 21:10:47,971 - INFO - This paragraph relates to learning goal [6], which requires the learner to declare variables, constants, methods, and use modifiers and Apex interfaces. Specifically, this paragraph provides information about the primitive data types that are used in Apex, such as Integer, Double, Long, Date, Datetime, String, and Boolean, as well as the ID data type that is used for Lightning Platform record identification.
2023-04-03 21:10:47,985 - INFO - Processed paragraph 17 in d1.txt: Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
2023-04-03 21:10:47,985 - INFO - No related goals found
2023-04-03 21:10:48,897 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:48,911 - INFO - Processed paragraph 18 in d1.txt: Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
2023-04-03 21:10:48,912 - INFO - No related goals found
2023-04-03 21:10:50,621 - INFO - The paragraph relates to learning goal [3]: Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs.
2023-04-03 21:10:50,635 - INFO - Processed paragraph 19 in d1.txt: Besides primitives, supported data types include sObjects, either as a generic sObject or a specific one, such as an Account or Contact. Remember, an sObject is just a Salesforce object. You can think of it as a table in a database. The sObject can be either a standard one that comes built in with Salesforce or a custom one that you define yourself.
2023-04-03 21:10:50,635 - INFO - No related goals found
2023-04-03 21:10:51,500 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:10:51,513 - INFO - Processed paragraph 20 in d1.txt: Additionally, a data type can be a typed list of values, also known as an enum. But watch out, because these aren’t the same enums you’re used to working with in .NET. In Apex, you can use enums with numbers, but you can’t define what these number values are. Also, the ordinal assignment starts at zero. For example, if you had an enum like the following.
2023-04-03 21:10:51,514 - INFO - No related goals found
2023-04-03 21:10:52,347 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:52,362 - INFO - Processed paragraph 21 in d1.txt: public enum myEnums {
            Enum1,
            Enum2,
            Enum3
 }
If you tried to access the ordinal value of the third enum, the value of the enumOrd variable would be 2.
2023-04-03 21:10:52,362 - INFO - No related goals found
2023-04-03 21:10:53,239 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:53,254 - INFO - Processed paragraph 22 in d1.txt: Integer enumOrd = myEnums.Enum3.ordinal();
Working with Collections
.NET supports a large collection library with numerous types and extension methods. And here’s some good news. Apex has only the following three collections. Talk about simple, right?
2023-04-03 21:10:53,255 - INFO - No related goals found
2023-04-03 21:10:55,016 - INFO - This paragraph relates to neither of the learning goals listed in the given list. Therefore, none of the learning goals [1-22] are applicable to this paragraph.
2023-04-03 21:10:55,031 - INFO - Processed paragraph 23 in d1.txt: List
A list is an ordered collection of elements that works much the same as a traditional array. In fact, arrays in Apex are synonymous with lists, and you can use them interchangeably. For example, the following is one way to declare a variable as a list of strings.
2023-04-03 21:10:55,031 - INFO - No related goals found
2023-04-03 21:10:55,914 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:10:55,929 - INFO - Processed paragraph 24 in d1.txt: List<String> myStrings =  new List<String>();
Alternatively, you can declare the myStrings variable as an array but assign it to a list rather than an array.
2023-04-03 21:10:55,929 - INFO - No related goals found
2023-04-03 21:10:58,011 - INFO - The paragraph does not relate to any of the given learning goals as it does not provide any information or instructions related to Salesforce or its certification exam. The paragraph only shows a basic example of initializing a String list in Java.
2023-04-03 21:10:58,028 - INFO - Processed paragraph 25 in d1.txt: String[] myStrings = new List<String>();
Another thing you can do is declare the list and initialize its values, all in one step, such as the following.
2023-04-03 21:10:58,028 - INFO - No related goals found
2023-04-03 21:10:58,852 - INFO - None of the learning goals listed are related to this paragraph.
2023-04-03 21:10:58,865 - INFO - Processed paragraph 26 in d1.txt: List<String> myStrings =  new List<String> {'String1', 'String2', 'String3' };
You can also add values to the list after it has been created, such as this:
2023-04-03 21:10:58,866 - INFO - No related goals found
2023-04-03 21:11:00,706 - INFO - This paragraph does not relate to any of the learning goals listed in the provided excerpt. It simply provides an example of how to create and add values to a list variable in Apex development.
2023-04-03 21:11:00,720 - INFO - Processed paragraph 27 in d1.txt: List<String> myStrings = new List<String>();
myStrings.add('String1');
myStrings.add('String2');
myStrings.add('String3');
You’ll probably create a lot of list variables in your Apex development, because the output of every SOQL query is a list. For example, you could create a list of Accounts using code such as the following:
2023-04-03 21:11:00,720 - INFO - No related goals found
2023-04-03 21:11:01,704 - INFO - This paragraph does not relate to any of the listed learning goals.
2023-04-03 21:11:01,720 - INFO - Processed paragraph 28 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
Like arrays, lists have indexes that start at zero. So you could access the name of the first account in the list with code like this:
2023-04-03 21:11:01,720 - INFO - No related goals found
2023-04-03 21:11:05,694 - INFO - This paragraph relates to goal number 8, which is to "Given a scenario, write SOSL, SOQL, and DML statements in Apex." The paragraph provides an example of a SOQL query being used to retrieve data from a collection of Account objects. Additionally, it introduces the concept of sets and how they can be used in the WHERE clause of a SOQL query to filter data.
2023-04-03 21:11:05,708 - INFO - Processed paragraph 29 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
String firstAccount = myAccounts[0].Name;
Set
A set is an unordered collection of elements that does not contain duplicates. A set is commonly used to store ID values because the value are always unique. You could then use the set as part of a WHERE clause in a SOQL query. For example, here we’re creating a set that contains two unique IDs for Accounts. We then use the set in the SOQL query to return Accounts only for those IDs.
2023-04-03 21:11:05,708 - INFO - No related goals found
2023-04-03 21:11:08,155 - INFO - This paragraph relates to learning goal number 6: Declare variables, constants, methods, and use modifiers and Apex interfaces. It explains the concept of a map in Apex and shows an example of how to declare a map variable named accountMap.
2023-04-03 21:11:08,171 - INFO - Processed paragraph 30 in d1.txt: Set<ID> accountIds = new
  Set<ID>{'001d000000BOaHSAA1','001d000000BOaHTAA1'};  
List<Account> accounts = [SELECT Name
  FROM Account WHERE Id IN :accountIds];    
Map
A map is a collection of key-value pairs. Each key maps to a single value. A map is useful when you need to quickly find something by a key. The key values must be unique, so you could have a map that contained ID values for the key and then mapped to an sObject. For example, you could use the following code to declare a map variable named accountMap that contains all Accounts mapped to their IDs.
2023-04-03 21:11:08,171 - INFO - No related goals found
2023-04-03 21:11:09,067 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:11:09,080 - INFO - Processed paragraph 31 in d1.txt: Map<Id, Account> accountMap = new Map<Id, Account>([SELECT Id, Name FROM Account]);
You could then access a specific Account record using the get method and code similar to the following.
2023-04-03 21:11:09,080 - INFO - No related goals found
2023-04-03 21:11:09,917 - INFO - This paragraph does not relate to any of the learning goals provided.
2023-04-03 21:11:09,930 - INFO - Processed paragraph 32 in d1.txt: Id accId = '001d000000BOaHSAA1';
Account account = accountMap.get(accId);
Check out the official docs to learn more about the data types that Apex supports.
2023-04-03 21:11:09,930 - INFO - No related goals found
2023-04-03 21:11:10,755 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:11:10,768 - INFO - Processed paragraph 33 in d1.txt: ASP.NET to Visualforce
If you’re an ASP.NET web forms developer, you’ll probably feel right at home with Visualforce. There are many similarities between the two., most notably, a clear separation of the markup from the code. You also use form fields to map code to properties defined in the controller.
2023-04-03 21:11:10,768 - INFO - No related goals found
2023-04-03 21:11:11,705 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:11:11,719 - INFO - Processed paragraph 34 in d1.txt: The bad news is that viewstate is just as much a pain with Visualforce as it is with ASP.NET due to the fact that HTTP is stateless. The good news is that there are ways around the viewstate limitations. Learn more by checking out the link in Resources.
2023-04-03 21:11:11,720 - INFO - No related goals found
2023-04-03 21:11:12,586 - INFO - None of the learning goals mentioned in the given paragraph.
2023-04-03 21:11:12,598 - INFO - Processed paragraph 35 in d1.txt: Visualforce is a framework for rendering HTML pages using an MVC paradigm. Now before you get all excited and start thinking, “Cool, Visualforce is like ASP.NET MVC. I love MVC.”, keep in mind that comparing the two is a bit like comparing apples and pumpkins. You can use either one to render web pages, and both separate the application logic from the markup and the database model, but they do so in different ways.
2023-04-03 21:11:12,598 - INFO - No related goals found
2023-04-03 21:12:32,016 - INFO - The given paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:32,022 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:12:32,023 - INFO - No related goals found
2023-04-03 21:12:33,000 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:33,012 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:12:33,013 - INFO - No related goals found
2023-04-03 21:12:36,134 - INFO - Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. [3]""" 

The paragraph implies the learning goal of determining the appropriate data model for a given scenario and creating/modifying objects, fields and relationships to meet that model. It also includes the ability to access data using external IDs.
2023-04-03 21:12:36,148 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-03 21:12:36,149 - INFO - Related goals: 3
2023-04-03 21:12:37,006 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:37,018 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-03 21:12:37,019 - INFO - No related goals found
2023-04-03 21:12:37,886 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:37,900 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-03 21:12:37,900 - INFO - No related goals found
2023-04-03 21:12:38,718 - INFO - This paragraph does not relate to any of the provided learning goals.
2023-04-03 21:12:38,731 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-03 21:12:38,731 - INFO - No related goals found
2023-04-03 21:12:39,581 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:39,594 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-03 21:12:39,594 - INFO - No related goals found
2023-04-03 21:12:40,490 - INFO - The paragraph does not relate to any specific learning goal mentioned in the list.
2023-04-03 21:12:40,504 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-03 21:12:40,504 - INFO - No related goals found
2023-04-03 21:12:41,422 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:12:41,435 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-03 21:12:41,435 - INFO - No related goals found
2023-04-03 21:12:42,331 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:42,344 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-03 21:12:42,344 - INFO - No related goals found
2023-04-03 21:12:43,259 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:43,271 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-03 21:12:43,271 - INFO - No related goals found
2023-04-03 21:12:44,161 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:44,175 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-03 21:12:44,175 - INFO - No related goals found
2023-04-03 21:12:45,061 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:45,073 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-03 21:12:45,073 - INFO - No related goals found
2023-04-03 21:12:46,285 - INFO - The paragraph does not relate to any of the learning goals mentioned in the passage.
2023-04-03 21:12:47,119 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-03 21:12:47,120 - INFO - No related goals found
2023-04-03 21:12:48,997 - INFO - This paragraph does not relate to any of the learning goals provided. It is simply an example of a simple Apex class to demonstrate the similarity between Apex and C#.
2023-04-03 21:12:49,041 - INFO - Processed paragraph 14 in d1.txt: public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
2023-04-03 21:12:49,041 - INFO - No related goals found
2023-04-03 21:12:50,740 - INFO - This paragraph does not relate to any of the listed learning goals. It only provides general information about the basic syntax for defining classes, which is not specifically related to any particular Salesforce certification exam objective.
2023-04-03 21:12:50,784 - INFO - Processed paragraph 15 in d1.txt: The basic syntax for defining classes is:
2023-04-03 21:12:50,784 - INFO - No related goals found
2023-04-03 21:12:51,646 - INFO - The paragraph does not relate to any of the learning goals provided.
2023-04-03 21:12:51,693 - INFO - Processed paragraph 16 in d1.txt: private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
2023-04-03 21:12:51,694 - INFO - No related goals found
2023-04-03 21:12:52,906 - INFO - The paragraph does not relate to any of the learning goals listed in the question prompt.
2023-04-03 21:12:52,922 - INFO - Processed paragraph 17 in d1.txt: Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
2023-04-03 21:12:52,923 - INFO - No related goals found
2023-04-03 21:12:53,786 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:12:53,803 - INFO - Processed paragraph 18 in d1.txt: Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
2023-04-03 21:12:53,803 - INFO - No related goals found
2023-04-03 21:12:57,396 - INFO - This paragraph relates to Learning Goal [3]: Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. Specifically, it discusses the supported data types in Salesforce, including sObjects, which are essentially the objects or tables in Salesforce's data model. The paragraph explains that an sObject can be a standard object that comes with Salesforce or a custom object that a user defines.
2023-04-03 21:12:57,408 - INFO - Processed paragraph 19 in d1.txt: Besides primitives, supported data types include sObjects, either as a generic sObject or a specific one, such as an Account or Contact. Remember, an sObject is just a Salesforce object. You can think of it as a table in a database. The sObject can be either a standard one that comes built in with Salesforce or a custom one that you define yourself.
2023-04-03 21:12:57,408 - INFO - Related goals: 3
2023-04-03 21:12:58,628 - INFO - This paragraph does not relate to any of the learning goals mentioned in the list.
2023-04-03 21:12:58,640 - INFO - Processed paragraph 20 in d1.txt: Additionally, a data type can be a typed list of values, also known as an enum. But watch out, because these aren’t the same enums you’re used to working with in .NET. In Apex, you can use enums with numbers, but you can’t define what these number values are. Also, the ordinal assignment starts at zero. For example, if you had an enum like the following.
2023-04-03 21:12:58,640 - INFO - No related goals found
2023-04-03 21:12:59,509 - INFO - This paragraph does not relate to any of the listed learning goals.
2023-04-03 21:12:59,520 - INFO - Processed paragraph 21 in d1.txt: public enum myEnums {
            Enum1,
            Enum2,
            Enum3
 }
If you tried to access the ordinal value of the third enum, the value of the enumOrd variable would be 2.
2023-04-03 21:12:59,520 - INFO - No related goals found
2023-04-03 21:13:02,851 - INFO - The paragraph does not relate to any of the learning goals listed. The paragraph discusses the simplicity of the collection library in Apex, but it does not provide any information related to multi-tenant concepts, declarative versus programmatic customizations, data modeling, process automation, Visualforce, governor limits, or any other topics included in the learning goals.
2023-04-03 21:13:02,865 - INFO - Processed paragraph 22 in d1.txt: Integer enumOrd = myEnums.Enum3.ordinal();
Working with Collections
.NET supports a large collection library with numerous types and extension methods. And here’s some good news. Apex has only the following three collections. Talk about simple, right?
2023-04-03 21:13:02,865 - INFO - No related goals found
2023-04-03 21:13:09,773 - INFO - Learning Goal: [6] Declare variables, constants, methods, and use modifiers and Apex interfaces. 

This paragraph relates to the learning goal [6] which requires the learner to have the knowledge and skills to declare variables, constants, methods, and use modifiers and Apex interfaces. In the given paragraph, the author explains the concept of a list in Apex programming language, which is an ordered collection of elements that works similar to a traditional array. The paragraph also demonstrates an example of how to declare a variable as a list of strings in Apex. This knowledge is crucial for developers who need to work with data in Apex and want to use lists as a data structure to hold and manipulate data effectively. Therefore, understanding the concept of a list and how to declare variables as lists is essential for achieving this learning goal.
2023-04-03 21:13:09,785 - INFO - Processed paragraph 23 in d1.txt: List
A list is an ordered collection of elements that works much the same as a traditional array. In fact, arrays in Apex are synonymous with lists, and you can use them interchangeably. For example, the following is one way to declare a variable as a list of strings.
2023-04-03 21:13:09,785 - INFO - Related goals: 6
2023-04-03 21:13:10,666 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:10,680 - INFO - Processed paragraph 24 in d1.txt: List<String> myStrings =  new List<String>();
Alternatively, you can declare the myStrings variable as an array but assign it to a list rather than an array.
2023-04-03 21:13:10,680 - INFO - No related goals found
2023-04-03 21:13:12,152 - INFO - This paragraph does not relate to any of the learning goals listed. It is not discussing any aspect of Salesforce certification exam material.
2023-04-03 21:13:12,167 - INFO - Processed paragraph 25 in d1.txt: String[] myStrings = new List<String>();
Another thing you can do is declare the list and initialize its values, all in one step, such as the following.
2023-04-03 21:13:12,167 - INFO - No related goals found
2023-04-03 21:13:13,984 - INFO - This paragraph does not relate to any of the learning goals listed. It only provides an example code snippet for creating and adding values to a list in Salesforce Apex programming language.
2023-04-03 21:13:13,996 - INFO - Processed paragraph 26 in d1.txt: List<String> myStrings =  new List<String> {'String1', 'String2', 'String3' };
You can also add values to the list after it has been created, such as this:
2023-04-03 21:13:13,996 - INFO - No related goals found
2023-04-03 21:13:15,558 - INFO - The paragraph does not relate to any of the learning goals listed. It provides an example of creating a List variable in Apex programming language.
2023-04-03 21:13:15,570 - INFO - Processed paragraph 27 in d1.txt: List<String> myStrings = new List<String>();
myStrings.add('String1');
myStrings.add('String2');
myStrings.add('String3');
You’ll probably create a lot of list variables in your Apex development, because the output of every SOQL query is a list. For example, you could create a list of Accounts using code such as the following:
2023-04-03 21:13:15,571 - INFO - No related goals found
2023-04-03 21:13:17,488 - INFO - This paragraph does not relate to any of the learning goals listed above. It merely provides an example of how to access data from a list in Apex programming language.
2023-04-03 21:13:17,501 - INFO - Processed paragraph 28 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
Like arrays, lists have indexes that start at zero. So you could access the name of the first account in the list with code like this:
2023-04-03 21:13:17,501 - INFO - No related goals found
2023-04-03 21:13:18,944 - INFO - This paragraph relates to the learning goal:
[8] Given a scenario, write SOSL, SOQL, and DML statements in Apex.
2023-04-03 21:13:18,958 - INFO - Processed paragraph 29 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
String firstAccount = myAccounts[0].Name;
Set
A set is an unordered collection of elements that does not contain duplicates. A set is commonly used to store ID values because the value are always unique. You could then use the set as part of a WHERE clause in a SOQL query. For example, here we’re creating a set that contains two unique IDs for Accounts. We then use the set in the SOQL query to return Accounts only for those IDs.
2023-04-03 21:13:18,958 - INFO - Related goals: 8
2023-04-03 21:13:20,893 - INFO - This paragraph is related to learning goal number 7: "Given a scenario, use and apply Apex control flow statements." It explains what a map is and how it can be declared as a variable in Apex.
2023-04-03 21:13:20,907 - INFO - Processed paragraph 30 in d1.txt: Set<ID> accountIds = new
  Set<ID>{'001d000000BOaHSAA1','001d000000BOaHTAA1'};  
List<Account> accounts = [SELECT Name
  FROM Account WHERE Id IN :accountIds];    
Map
A map is a collection of key-value pairs. Each key maps to a single value. A map is useful when you need to quickly find something by a key. The key values must be unique, so you could have a map that contained ID values for the key and then mapped to an sObject. For example, you could use the following code to declare a map variable named accountMap that contains all Accounts mapped to their IDs.
2023-04-03 21:13:20,907 - INFO - Related goals: 7
2023-04-03 21:13:22,423 - INFO - This paragraph does not relate to any of the learning goals listed. It is not providing any instruction or information related to Salesforce certification exam topics.
2023-04-03 21:13:22,435 - INFO - Processed paragraph 31 in d1.txt: Map<Id, Account> accountMap = new Map<Id, Account>([SELECT Id, Name FROM Account]);
You could then access a specific Account record using the get method and code similar to the following.
2023-04-03 21:13:22,435 - INFO - No related goals found
2023-04-03 21:13:23,361 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:23,372 - INFO - Processed paragraph 32 in d1.txt: Id accId = '001d000000BOaHSAA1';
Account account = accountMap.get(accId);
Check out the official docs to learn more about the data types that Apex supports.
2023-04-03 21:13:23,373 - INFO - No related goals found
2023-04-03 21:13:24,688 - INFO - The paragraph does not relate to any of the learning goals mentioned in the list.
2023-04-03 21:13:24,700 - INFO - Processed paragraph 33 in d1.txt: ASP.NET to Visualforce
If you’re an ASP.NET web forms developer, you’ll probably feel right at home with Visualforce. There are many similarities between the two., most notably, a clear separation of the markup from the code. You also use form fields to map code to properties defined in the controller.
2023-04-03 21:13:24,701 - INFO - No related goals found
2023-04-03 21:13:25,715 - INFO - The paragraph does not relate to any of the provided learning goals.
2023-04-03 21:13:25,729 - INFO - Processed paragraph 34 in d1.txt: The bad news is that viewstate is just as much a pain with Visualforce as it is with ASP.NET due to the fact that HTTP is stateless. The good news is that there are ways around the viewstate limitations. Learn more by checking out the link in Resources.
2023-04-03 21:13:25,729 - INFO - No related goals found
2023-04-03 21:13:26,684 - INFO - This paragraph does not relate to any of the listed learning goals.
2023-04-03 21:13:26,700 - INFO - Processed paragraph 35 in d1.txt: Visualforce is a framework for rendering HTML pages using an MVC paradigm. Now before you get all excited and start thinking, “Cool, Visualforce is like ASP.NET MVC. I love MVC.”, keep in mind that comparing the two is a bit like comparing apples and pumpkins. You can use either one to render web pages, and both separate the application logic from the markup and the database model, but they do so in different ways.
2023-04-03 21:13:26,700 - INFO - No related goals found
2023-04-03 21:13:27,624 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:27,637 - INFO - Processed paragraph 36 in d1.txt: To learn all about Visualforce, check out the Visualforce Basics module. For now, we just want to give you a basic idea of how it works by showing you an example. You can use the following markup code to render a simple page used to enter Contact data.
2023-04-03 21:13:27,637 - INFO - No related goals found
2023-04-03 21:13:32,322 - INFO - This paragraph relates to learning goals [14], [15], and [16]. Specifically, it covers the following topics:
- Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. [14]
- Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component. [15]
- Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce. [16]
2023-04-03 21:13:32,335 - INFO - Processed paragraph 37 in d1.txt: <apex:page standardController="Contact">
  <apex:form>
    <apex:pageBlock title="Edit Contact" mode="Edit">
       <apex:pageBlockButtons >
         <apex:commandButton action="{!edit}" id="editButton" value="Edit"/>
         <apex:commandButton action="{!save}" id="saveButton" value="Save"/>
         <apex:commandButton action="{!cancel}" id="cancelButton" value="Cancel"/>
       </apex:pageBlockButtons>
       <apex:pageBlockSection >
          <apex:inputField value="{!contact.lastname}" />
          <apex:inputField value="{!contact.accountId}"/>
          <apex:inputField value="{!contact.phone}"/>
       </apex:pageBlockSection>
    </apex:pageBlock>
  </apex:form>
</apex:page>
The example uses what is known as a standard controller, which is part of the Lightning Platform. It’s basically system-generated code that allows you to quickly incorporate basic CRUD functionality in your Visualforce pages. But before you start getting worried, just know that you can create your own custom controllers to add in more complex functioning. Learn all about how standard and custom controllers work in the Visualforce Basics module. The rendered version of this page looks like the following:
2023-04-03 21:13:32,336 - INFO - Related goals: 1, 4, 5, 6, 14, 15, 16, 16
2023-04-03 21:13:35,674 - INFO - Learning goal [14] is related to this paragraph which talks about displaying content or modifying Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed. The paragraph mentions a custom Visualforce page used for editing contact information. This is a clear indication that the paragraph is related to the goal of understanding the use of Visualforce pages and its controllers or extensions.
2023-04-03 21:13:35,687 - INFO - Processed paragraph 38 in d1.txt: Screenshot of a custom Visualforce page used to edit contact information
2023-04-03 21:13:35,687 - INFO - Related goals: 1, 4, 14
2023-04-03 21:13:36,583 - INFO - This paragraph does not relate to any specific learning goal given in the list.
2023-04-03 21:13:36,597 - INFO - Processed paragraph 39 in d1.txt: Note
Note
You probably know a bit about Lightning Components, and could be thinking, "Is Lightning like ASP.NET MVC?" The short answer is no. Lightning is a lighter weight way of delivering super fast and responsive web apps, but Lightning is a component-based framework. Learn all about it by visiting the Lightning Web Components Basics module.
2023-04-03 21:13:36,597 - INFO - No related goals found
2023-04-03 21:13:37,483 - INFO - This paragraph does not relate to any of the learning goals provided.
2023-04-03 21:13:37,495 - INFO - Processed paragraph 40 in d1.txt: What Is Different?
Now that you know a little about how Apex is similar to .NET, let’s go over some differences. For starters, unlike C#, Apex is not case sensitive.
2023-04-03 21:13:37,496 - INFO - No related goals found
2023-04-03 21:13:43,015 - INFO - This paragraph relates to the learning goal [3]: Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs. The paragraph discusses the tightly coupled relationship between Apex code and the Lightning Platform database, where each object in the database has a corresponding Apex class that mirrors it. It also highlights the fact that adding a new field to an object automatically creates a corresponding class member to reference the values in the database. This information is critical for developers to understand when creating and accessing the appropriate data model, including objects, fields, relationships, and external IDs, based on a given scenario.
2023-04-03 21:13:43,028 - INFO - Processed paragraph 41 in d1.txt: Apex and Database are Tightly Coupled
Apex code and the Lightning Platform database are tightly coupled to the point where they are sometimes indistinguishable. Each standard or custom object in the database has a "mystical" representation via an Apex class that provides all sorts of functionality to make interacting with the database a snap. The class and its underlying object are essentially a mirror image of one another that is constantly in sync. For instance, whenever you create a new field in an object, a class member is automatically surfaced to reference the values in the database. It's also impossible to add a reference in your Apex code to a field that doesn't exist; the compiler will return an error and simply not save your code. The platform works hard to ensure these dependencies and won't let the database schema and your code become out of sync. Therefore, if you attempt to delete a custom object or a field that is referenced by Apex code, the platform will raise an error and disallow the action.
2023-04-03 21:13:43,028 - INFO - Related goals: 3
2023-04-03 21:13:43,919 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:43,931 - INFO - Processed paragraph 42 in d1.txt: Different Design Patterns
As a .NET developer, you are probably already familiar with design patterns. However, most of those patterns don’t work on the Lightning Platform. You learn more about this in the next units when we go over execution context and trigger design, but also consider checking out the links listed in Resources regarding Apex design patterns.
2023-04-03 21:13:43,931 - INFO - No related goals found
2023-04-03 21:13:44,887 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:44,900 - INFO - Processed paragraph 43 in d1.txt: What’s important to understand is that if you try to apply the same design strategies that you use in .NET to the Lightning Platform, you’ll likely encounter problems when you go to test and deploy your solutions. We suggest taking some time to learn about which design patterns work best in the Lightning Platform world before you start cranking out the code.
2023-04-03 21:13:44,900 - INFO - No related goals found
2023-04-03 21:13:46,842 - INFO - The paragraph relates to learning goal number 19, "Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data."
2023-04-03 21:13:46,856 - INFO - Processed paragraph 44 in d1.txt: Unit Tests Are Required
We know you’re used to writing unit tests for your .NET applications and probably understand the benefits to using them. What is different on the Lightning Platform is that you must have 75% test coverage to deploy your Apex code to a production org.
2023-04-03 21:13:46,856 - INFO - Related goals: 1, 9, 19
2023-04-03 21:13:47,785 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:47,797 - INFO - Processed paragraph 45 in d1.txt: Not only does having unit tests promote the development of robust and error-free code, but they’re vital to the stability of the platform, because all tests are run before every major release. To learn more about unit testing, see An Introduction to Apex Code Test Methods.
2023-04-03 21:13:47,798 - INFO - No related goals found
2023-04-03 21:13:48,726 - INFO - This paragraph does not relate to any of the learning goals provided.
2023-04-03 21:13:48,739 - INFO - Processed paragraph 46 in d1.txt: No Solution, Project, or Config Files
The Lightning Platform has no such thing as a solution or project file. You can create an application, but it’s not the same as creating a .NET application or assembly.
2023-04-03 21:13:48,739 - INFO - No related goals found
2023-04-03 21:13:49,619 - INFO - None of the learning goals listed are directly related to the paragraph provided.
2023-04-03 21:13:49,631 - INFO - Processed paragraph 47 in d1.txt: An application on the Lightning Platform is just a loose collection of components, such as tabs, reports, dashboards, and pages. Several come built in with your Salesforce org, and in a few seconds, you can create your own by walking through a point-and-click wizard. You can even purchase apps created by third-parties on what is known as the AppExchange.
2023-04-03 21:13:49,631 - INFO - No related goals found
2023-04-03 21:13:50,572 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:50,584 - INFO - Processed paragraph 48 in d1.txt: All your code resides and executes in the cloud. There is also no such thing as a config file in the Lightning Platform world. Because the database is baked right in, you don’t need connection strings. And unlike ASP.NET MVC, you don’t need to configure routes. You can create custom settings in Salesforce, but these are added and managed declaratively.
2023-04-03 21:13:50,584 - INFO - No related goals found
2023-04-03 21:13:51,492 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:51,504 - INFO - Processed paragraph 49 in d1.txt: A Much Smaller Class Library
The Apex class library is considerably smaller than the .NET Framework class library, so it’s easier and faster for you to come up to speed with Apex. But honestly, you might find it a bit frustrating when you try to look for comparative functionality that just doesn’t exist in Apex.
2023-04-03 21:13:51,504 - INFO - No related goals found
2023-04-03 21:13:52,414 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:52,428 - INFO - Processed paragraph 50 in d1.txt: Keep in mind that the Lightning Platform is built with the idea of providing rapid application development. It’s also different than the .NET platform, so you might find yourself looking for functionality that you’re used to working that simply doesn’t exist with the Lightning Platform. However, if you’re looking to build pixel-perfect, custom-coded applications, our Heroku Enterprise platform provides all the power and features you need.
2023-04-03 21:13:52,428 - INFO - No related goals found
2023-04-03 21:13:53,603 - INFO - The paragraph does not relate to any of the learning goals mentioned in the list.
2023-04-03 21:13:53,615 - INFO - Processed paragraph 51 in d1.txt: Development Tools
More than likely you have already signed up for a free Developer Edition (DE) org. Perhaps you’ve also opened and used the online Developer Console application.
2023-04-03 21:13:53,616 - INFO - No related goals found
2023-04-03 21:13:55,453 - INFO - The paragraph relates to [20] - Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
2023-04-03 21:13:55,466 - INFO - Processed paragraph 52 in d1.txt: You can use Developer Console to edit and navigate source code, and it’s also helpful for debugging and troubleshooting. We’ll go over this more in a later unit, so stay tuned. If you’ve already gone through the first module about database basics, you know that you can also use Developer Console to execute SOQL and SOSL queries and view query plans. If you haven’t used Developer Console yet, don’t worry because we’ll be going through it shortly when we create an Apex class.
2023-04-03 21:13:55,466 - INFO - Related goals: 2, 20
2023-04-03 21:13:56,364 - INFO - This paragraph does not relate to any of the listed learning goals.
2023-04-03 21:13:56,376 - INFO - Processed paragraph 53 in d1.txt: As a .NET developer, you're probably familiar with Visual Studio Code. You will be happy to learn that we have Salesforce Extensions for VS Code that allow you to do custom development on your local machine. The extension is closely tied to Salesforce DX, which provides a modern source-driven development experience. You can learn more about Salesforce DX from the Get Started with Salesforce DX trail.
2023-04-03 21:13:56,376 - INFO - No related goals found
2023-04-03 21:13:57,301 - INFO - None of the learning goals listed in the paragraph relate to the provided paragraph.
2023-04-03 21:13:57,313 - INFO - Processed paragraph 54 in d1.txt: And finally, we thought you would be interested to know about a powerful command-line interface to the Lightning Platform. If you’re one of those developers that just loves the command line, the Salesforce CLI is right up your alley.
2023-04-03 21:13:57,313 - INFO - No related goals found
2023-04-03 21:13:58,772 - INFO - The learning goal related to this paragraph is: [16] Given a scenario, prevent user interface and data access security vulnerabilities.
2023-04-03 21:13:58,784 - INFO - Processed paragraph 55 in d1.txt: Handling Security
The good news here is that in the Lightning Platform you don’t have to worry about authentication or storing passwords and database connection strings. Identity is handled by the platform. You can control access to data at many different levels, including object level, record level, and field level. Security is also handled declaratively. In many cases, security is defined and set up by a Salesforce administrator. As a developer, it’s important to be aware of how it works. Learn more by checking out the Data Security module.
2023-04-03 21:13:58,784 - INFO - Related goals: 1, 6, 16, 16
2023-04-03 21:13:59,572 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:13:59,585 - INFO - Processed paragraph 56 in d1.txt: What About Integration?
You can integrate with the platform in a number of ways, but you’ll probably use SOAP and REST the most. You can use them in either direction.
2023-04-03 21:13:59,585 - INFO - No related goals found
2023-04-03 21:14:00,788 - INFO - The paragraph does not relate to any of the learning goals mentioned in the list provided.
2023-04-03 21:14:00,802 - INFO - Processed paragraph 57 in d1.txt: You can create and expose web services using the Apex programming language, as well as invoke external web services from Apex. You can also react to incoming email messages and have automated outbound messages sent when certain events occur.
2023-04-03 21:14:00,802 - INFO - No related goals found
2023-04-03 21:14:04,123 - INFO - Learning Goal: [N/A]

This paragraph does not relate to any of the learning goals provided as it refers to the availability of Salesforce APIs and toolkits, while the learning goals focus on specific skills and knowledge related to declarative and programmatic customizations, data modeling, Apex development, Visualforce, Lightning Component Framework, security, testing, and deployment.
2023-04-03 21:14:04,145 - INFO - Processed paragraph 58 in d1.txt: If you really want to get your hands dirty, Salesforce offers both SOAP and REST APIs that provide direct access to the data in your org. Toolkits that wrap around the APIs are available, so you can use whatever language you prefer: .NET, Java, PHP, Objective C, Ruby, and JavaScript.
2023-04-03 21:14:04,145 - INFO - No related goals found
2023-04-03 21:14:05,099 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:14:05,113 - INFO - Processed paragraph 59 in d1.txt: Numerous third-party integration applications are also available on the AppExchange. Really, just about anything is possible. You can learn more about all the integration points by completing the Apex Integration module.
2023-04-03 21:14:05,113 - INFO - No related goals found
2023-04-03 21:14:06,670 - INFO - This paragraph primarily relates to learning goal number [6], which involves declaring variables, constants, methods, and using modifiers and Apex interfaces.
2023-04-03 21:14:06,684 - INFO - Processed paragraph 60 in d1.txt: Create an Apex Class
Now that you know more about how the Lightning Platform relates to the .NET platform, let’s jump right in and create an Apex class using Developer Console. The class we’ll create includes the public method sendMail. It includes a private helper method called inspectResults for inspecting the results of the email send call.
2023-04-03 21:14:06,684 - INFO - Related goals: 6
2023-04-03 21:14:10,322 - INFO - The paragraph relates to the learning goal [6], which is to "Declare variables, constants, methods, and use modifiers and Apex interfaces." Specifically, the paragraph demonstrates how to create a new Apex class in the Developer Console, declare a public method and a private helper method, and use the Apex Messaging class to send an email message. The code also includes variable declarations and the use of access modifiers (such as public and private).
2023-04-03 21:14:10,337 - INFO - Processed paragraph 61 in d1.txt: From Setup in your Developer org, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > New > Apex Class.
Enter EmailManager as the class name and click OK.
Delete the existing code, and insert the following snippet:
public with sharing class EmailManager {
    // Public method
    public static void sendMail(String address, String subject, String body) {
        // Create an email message object
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {address};
        mail.setToAddresses(toAddresses);
        mail.setSubject(subject);
        mail.setPlainTextBody(body);
        // Pass this email message to the built-in sendEmail method
        // of the Messaging class
        Messaging.SendEmailResult[] results = Messaging.sendEmail(
            new Messaging.SingleEmailMessage[] { mail });
        // Call a helper method to inspect the returned results.
        inspectResults(results);
    }
    // Helper method
    private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
        Boolean sendResult = true;
        // sendEmail returns an array of result objects.
        // Iterate through the list to inspect results.
        // In this class, the methods send only one email,
        // so we should have only one result.
        for (Messaging.SendEmailResult res : results) {
            if (res.isSuccess()) {
                System.debug('Email sent successfully');
            } else {
                sendResult = false;
                System.debug('The following errors occurred: ' + res.getErrors());                 
            }
        }
        return sendResult;
    }
}   
Press Ctrl + S to save your class.
Note
Note
This simple example doesn’t implement the required object- or field-level security. See this snippet for a quickstart.
2023-04-03 21:14:10,337 - INFO - Related goals: 6
2023-04-03 21:14:11,213 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:14:11,227 - INFO - Processed paragraph 62 in d1.txt: Invoke a Method
Because we declared the public sendMail method as static, we can access it without creating an instance of the class. We can do so easily by using Anonymous Apex in Developer Console.
2023-04-03 21:14:11,227 - INFO - No related goals found
2023-04-03 21:14:12,157 - INFO - The paragraph does not relate to any of the learning goals.
2023-04-03 21:14:12,172 - INFO - Processed paragraph 63 in d1.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
EmailManager.sendMail('Your email address', 'Trailhead Tutorial', '123 body');
Make sure that the Open Log option is selected, and click Execute. A new tab shows you the execution log.
Select the Debug Only option so that you see only the debug statements displayed in the log. You should see a message telling you that the Email was sent successfully. You should also receive an email if you entered a valid email address.
Imagine if you had tried to accomplish that same task in .NET. Would it have been that easy to create a .NET application that sent emails? Come on, tell the truth.
2023-04-03 21:14:12,172 - INFO - No related goals found
2023-04-03 21:14:13,329 - INFO - This paragraph does not relate to any of the learning goals listed in the provided excerpt.
2023-04-03 21:14:13,345 - INFO - Processed paragraph 0 in d2.txt: Understand Execution Context
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:14:13,345 - INFO - No related goals found
2023-04-03 21:14:16,774 - INFO - The paragraph relates to the following learning goals:

- [6] Declare variables, constants, methods, and use modifiers and Apex interfaces.
- [7] Given a scenario, use and apply Apex control flow statements.
- [9] Given a scenario, follow best practices to write Apex classes and triggers.
- [10] Given a scenario, identify the implications of governor limits on Apex transactions.
2023-04-03 21:14:16,791 - INFO - Processed paragraph 1 in d2.txt: Know which methods to use to invoke Apex
Write a trigger for a Salesforce object
Observe how execution context works by executing code in Developer Console
Understand how governor limits impact design patterns
Understand the importance of working with bulk operations
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:14:16,792 - INFO - Related goals: 1, 6, 7, 9, 10
2023-04-03 21:14:29,968 - INFO - The paragraph relates to several learning goals, including:
- Understanding multi-tenant concepts and design frameworks [1]
- Identifying common use cases and best practices for declarative versus programmatic customizations [2]
- Creating and accessing the appropriate data model [3]
- Identifying the options and considerations when importing and exporting data into development environments [4]
- Identifying the capabilities of the declarative process automation features [5]
- Declaring variables, constants, methods, and using modifiers and Apex interfaces [6]
- Using and applying Apex control flow statements [7]
- Writing SOSL, SOQL, and DML statements in Apex [8]
- Following best practices to write Apex classes and triggers [9]
- Identifying the implications of governor limits on Apex transactions [10]
- Implementing exception handling in Apex [12]
- Using declarative functionality and Apex together to automate business logic [13]
- Displaying content or modifying Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed [14]
- Describing the Lightning Component framework and its benefits [15]
- Preventing user interface and data access security vulnerabilities [16]
- Displaying and using custom user interface components [16]
- Describing the use cases and best practices for Lightning Web Component events [17]
- Implementing Apex to work with various types of page components [18]
- Writing and executing tests for various types of code [19]
- Knowing how and when to use Salesforce Developer tools [20]
- Approaching debugging system issues and monitoring flows, processes, and jobs [21]
- Describing the process for deploying code and configurations [22]
2023-04-03 21:14:29,987 - INFO - Processed paragraph 2 in d2.txt: 
2023-04-03 21:14:29,987 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-03 21:14:31,643 - INFO - The paragraph does not relate to any of the learning goals listed. It appears to be a clip from a video or tutorial and does not provide information on any specific topics related to the certification exam.
2023-04-03 21:14:31,658 - INFO - Processed paragraph 3 in d2.txt: (This clip starts at the 16:36 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-03 21:14:31,658 - INFO - No related goals found
2023-04-03 21:14:32,887 - INFO - Learning goal [6] Given a scenario, declare variables, constants, methods, and use modifiers and Apex interfaces.
2023-04-03 21:14:32,901 - INFO - Processed paragraph 4 in d2.txt: What Is Execution Context?
For ASP.NET applications, code is executed in the context of an application domain. In the Lightning Platform world, code executes within an execution context. In a nutshell, this context represents the time between when the code is executed and when it ends. The important thing for you to understand is that the Apex code you write is not always the only code that is executing.
2023-04-03 21:14:32,902 - INFO - Related goals: 6
2023-04-03 21:14:34,237 - INFO - The paragraph does not relate to any of the learning goals mentioned in the given list.
2023-04-03 21:14:34,249 - INFO - Processed paragraph 5 in d2.txt: To understand how this works, you need to know all the ways Apex code can be executed on the platform.
2023-04-03 21:14:34,249 - INFO - No related goals found
2023-04-03 21:14:35,104 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:14:35,115 - INFO - Processed paragraph 6 in d2.txt: Methods of Invoking Apex
2023-04-03 21:14:35,115 - INFO - No related goals found
2023-04-03 21:14:36,896 - INFO - The paragraph does not relate to any of the learning goals provided. It is a description of various methods in which Apex code can be executed and actions can be triggered within an execution context.
2023-04-03 21:14:36,909 - INFO - Processed paragraph 7 in d2.txt: Method	Description
Database Trigger	Invoked for a specific event on a custom or standard object.
Anonymous Apex	Code snippets executed on the fly in Dev Console & other tools.
Asynchronous Apex	Occurs when executing a future or queueable Apex, running a batch job, or scheduling Apex to run at a specified interval.
Web Services	Code that is exposed via SOAP or REST web services.
Email Services	Code that is set up to process inbound email.
Visualforce or Lightning Pages	Visualforce controllers and Lightning components can execute Apex code automatically or when a user initiates an action, such as clicking a button. Lightning components can also be executed by Lightning processes and flows.
Besides invoking Apex code, actions, such as creating a new task, sending an email, performing a field update, or sending an outbound message, can all be triggered by one of the declarative platform features. These actions also run within an execution context.
2023-04-03 21:14:36,909 - INFO - No related goals found
2023-04-03 21:14:38,826 - INFO - This paragraph relates to the learning goal of understanding the implications of governor limits on Apex transactions [10] as well as following best practices to write Apex classes and triggers [9].
2023-04-03 21:14:38,841 - INFO - Processed paragraph 8 in d2.txt: Another important consideration is the context of the user executing the Apex code. By default, Apex executes in system context. Apex code has access to all objects and fields. Object permissions, field-level security, and sharing rules aren’t applied for the current user. You can use the with sharing keyword to specify that the sharing rules for the current user be taken into account for a class. This topic is important, so check out Using the with sharing or without sharing keywords.
2023-04-03 21:14:38,841 - INFO - Related goals: 1, 9, 10
2023-04-03 21:14:40,767 - INFO - The paragraph does not relate to any of the learning goals mentioned in the provided list. It is an introduction to Apex database triggers and does not cover any of the specific topics mentioned in the learning goals.
2023-04-03 21:14:40,781 - INFO - Processed paragraph 9 in d2.txt: Trigger Essentials
Before learning more about the execution context, let’s take a step back to introduce you to the world of database triggers. Similar to triggers in SQL Server, Apex database triggers execute programming logic before or after events to records in Salesforce. When defining the trigger, you can specify more than one of the following events:
2023-04-03 21:14:40,781 - INFO - No related goals found
2023-04-03 21:14:42,703 - INFO - None of the learning goals mentioned in the list relate to this paragraph. The paragraph provides some basic information about the syntax for a trigger and does not cover any specific skill or knowledge related to Salesforce certification exams.
2023-04-03 21:14:42,717 - INFO - Processed paragraph 10 in d2.txt: before insert
before update
before delete
after insert
after update
after delete
after undelete
The basic syntax for a trigger looks like the following:
2023-04-03 21:14:42,717 - INFO - No related goals found
2023-04-03 21:14:46,443 - INFO - This paragraph relates to learning goal [2] - "Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries." as it emphasizes the importance of identifying whether a trigger is necessary or if point-and-click automation tools can accomplish the same task. This is an example of a best practice for customizing Salesforce declaratively rather than programmatically.
2023-04-03 21:14:46,455 - INFO - Processed paragraph 11 in d2.txt: trigger TriggerName on ObjectName (trigger_events) {
   // code_block
}
Now, we know how much .NET developers love to solve problems with code, but we have a super big productivity tip for you here. You only want to resort to using a trigger when you are absolutely sure that the same thing cannot be accomplished with one of our point-and-click automation tools.
2023-04-03 21:14:46,455 - INFO - Related goals: 2
2023-04-03 21:14:47,337 - INFO - The paragraph does not relate to any specific learning goal from the list given.
2023-04-03 21:14:47,353 - INFO - Processed paragraph 12 in d2.txt: To make your life easier, the Salesforce platform includes a powerful automation tool, Flow Builder, for managing business logic without writing code. In most cases, tasks that could once upon a time only be accomplished with a trigger are now better suited for one of the automation tools.
2023-04-03 21:14:47,353 - INFO - No related goals found
2023-04-03 21:14:48,148 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:14:48,164 - INFO - Processed paragraph 13 in d2.txt: Note
Note
If you’re a developer new to the platform, definitely take the time to check out the Approve Records with Approval Processes module in the Developer Beginner trail before creating a trigger. We’re pretty sure that you don’t want to be known as the guy or gal who brought a lot of unnecessary technical overhead into the Salesforce org.
2023-04-03 21:14:48,165 - INFO - No related goals found
2023-04-03 21:14:50,399 - INFO - Given a scenario, follow best practices to write Apex classes and triggers. [9]
Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. [18]
2023-04-03 21:14:50,415 - INFO - Processed paragraph 14 in d2.txt: Mark Execution Context
To better understand execution context, let’s walk through creating an Apex database trigger that creates an opportunity when a new account is entered. This trigger calls a method from a handler class, so we first need to create that.
2023-04-03 21:14:50,415 - INFO - Related goals: 1, 8, 9, 18
2023-04-03 21:14:53,104 - INFO - This paragraph relates to the learning goal [9]: "Given a scenario, follow best practices to write Apex classes and triggers." It demonstrates how to create an Apex class with best practices, how to write a context-specific handler method for triggers, as well as a brief explanation of trigger frameworks and best practices.
2023-04-03 21:14:53,120 - INFO - Processed paragraph 15 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > New > Apex Class.
Enter AccountHandler for the class name and click OK.
Delete the existing code, and insert the following snippet:
public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            insert opp;
        }
    }
}
Press Ctrl + S to save your class.
Note
Note
It’s considered a best practice to use only one trigger per object, which you see in the following example. You can then use context-specific handler methods within triggers to create logic-less triggers. By adopting this practice, you can avoid the common pitfalls that new developers fall into. To learn more about these techniques, check out Trigger Frameworks and Apex Trigger Best Practices.
2023-04-03 21:14:53,120 - INFO - Related goals: 9
2023-04-03 21:14:53,986 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:14:53,998 - INFO - Processed paragraph 16 in d2.txt: So now that we have the handler class, we create the Account trigger.
2023-04-03 21:14:53,998 - INFO - No related goals found
2023-04-03 21:14:54,810 - INFO - The paragraph does not relate to any of the listed learning goals.
2023-04-03 21:14:54,823 - INFO - Processed paragraph 17 in d2.txt: In Developer Console, select File > New > Apex Trigger.
Enter AccountTrigger as the name, and select Account as the sObject.
Click Submit.
Delete the existing code, and insert the following snippet:
trigger AccountTrigger on Account (before insert, before update, before
    delete, after insert, after update, after delete,  after undelete) {
    if (Trigger.isAfter && Trigger.isInsert) {
        AccountHandler.CreateNewOpportunity(Trigger.New);
    }
}
Press Ctrl + S to save your trigger.
To complete the walkthrough, we execute anonymous code to simulate a user entering a new Account using the Salesforce interface. Remember, Apex code can be executed a number of different ways.
2023-04-03 21:14:54,823 - INFO - No related goals found
2023-04-03 21:14:56,346 - INFO - This paragraph relates to learning goal [21]: Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
2023-04-03 21:14:56,361 - INFO - Processed paragraph 18 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
Account acct = new Account(
    Name='Test Account 2',
    Phone='(415)555-8989',
    NumberOfEmployees=50,
    BillingCity='San Francisco');
insert acct;
Make sure that the Open Log option is selected and click Execute. A new tab shows the execution log. Keep it open so that you can examine it carefully.
Examining the Execution Log
Notice that the first line in the execution log marks the EXECUTION_STARTED event and that the last line is the EXECUTION_FINISHED event. Everything in between is the execution context.
2023-04-03 21:14:56,361 - INFO - Related goals: 1, 2, 21
2023-04-03 21:14:57,247 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:14:57,261 - INFO - Processed paragraph 19 in d2.txt: Let’s take a closer look at what happens. A CODE_UNIT_STARTED event marks when the code from the Execute Anonymous window was kicked off. This line is highlighted in red in the image below.
2023-04-03 21:14:57,261 - INFO - No related goals found
2023-04-03 21:14:58,449 - INFO - The given paragraph does not relate to any of the learning goals listed in the passage.
2023-04-03 21:14:58,463 - INFO - Processed paragraph 20 in d2.txt: Screenshot of the Debug Log in Developer Console, highlighting the code_unit_started events
2023-04-03 21:14:58,463 - INFO - No related goals found
2023-04-03 21:14:59,349 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:14:59,361 - INFO - Processed paragraph 21 in d2.txt: The second CODE_UNIT_STARTED line that is highlighted represents when code for the BeforeInsert event was executed.
2023-04-03 21:14:59,361 - INFO - No related goals found
2023-04-03 21:15:00,171 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:00,185 - INFO - Processed paragraph 22 in d2.txt: You can’t see this in the image, but if you’re following along with your own instance of Developer Console, scroll down further in the results and look for other instances of CODE_UNIT_STARTED. You should see at least one more instance representing when code for the AfterInsert event was executed. If you had created workflow rules that fired when a new account was created, they too would show up in the execution log. All this code operates under the same execution context, and thus, is subject to the same set of governor limits.
2023-04-03 21:15:00,185 - INFO - No related goals found
2023-04-03 21:15:03,195 - INFO - This paragraph relates to learning goal number 2, which is to identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. It explains the importance of governor limits in a multi-tenanted environment like Salesforce, and how understanding them is crucial in preventing the system from crashing.
2023-04-03 21:15:03,210 - INFO - Processed paragraph 23 in d2.txt: You may be asking yourself, why is this so important to understand? Well, because Salesforce is a multi-tenanted environment, those governor limits are vital in keeping each instance of a Salesforce org from consuming too many resources. Essentially, they keep the whole system from crashing.
2023-04-03 21:15:03,210 - INFO - Related goals: 2
2023-04-03 21:15:05,173 - INFO - The paragraph does not relate to any of the learning goals listed. It briefly touches on a topic related to working with limits, but it does not provide enough information to address any of the specified learning goals.
2023-04-03 21:15:05,185 - INFO - Processed paragraph 24 in d2.txt: Working with Limits
And this brings us back to the subject of working with limits. The two limits you will probably be the most concerned with involve the number of SOQL queries or DML statements. These tend to trip up developers new to the platform, so we wanted to spend some extra time focusing on how to avoid them.
2023-04-03 21:15:05,186 - INFO - No related goals found
2023-04-03 21:15:06,112 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:06,123 - INFO - Processed paragraph 25 in d2.txt: Note
Note
There are lots of limits to be aware of, and they tend to change with each major release. Additionally, it’s not uncommon for limits to get looser rather than tighter, so be sure to check out the latest by looking at the Execution Governors and Limits link in Resources.
2023-04-03 21:15:06,124 - INFO - No related goals found
2023-04-03 21:15:07,018 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:07,030 - INFO - Processed paragraph 26 in d2.txt: Working in Bulk
Many developers fall into a common trap of designing their code to work with a single record. They quickly learn that on the Lightning Platform this can be a huge mistake.
2023-04-03 21:15:07,030 - INFO - No related goals found
2023-04-03 21:15:07,956 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:07,968 - INFO - Processed paragraph 27 in d2.txt: Apex triggers can receive up to 200 records at once. Currently, the synchronous limit for the total number of SOQL queries is 100, and 150 for the total number of DML statements issued So, if you have a trigger that performs a SOQL query or DML statement inside of a loop and that trigger was fired for a bulk operation, guess what?
2023-04-03 21:15:07,968 - INFO - No related goals found
2023-04-03 21:15:08,835 - INFO - The paragraph does not relate to any of the listed learning goals.
2023-04-03 21:15:08,848 - INFO - Processed paragraph 28 in d2.txt: BOOM!!!
2023-04-03 21:15:08,848 - INFO - No related goals found
2023-04-03 21:15:10,228 - INFO - The paragraph does not relate to any specific learning goal mentioned in the given list.
2023-04-03 21:15:10,241 - INFO - Processed paragraph 29 in d2.txt: That’s right, you’re going to get a limits error. It’s possible to deploy code and have it run fine for a while before the limit is discovered. The developer then has to quickly go back and figure out how to “bulkify” the code. It’s not uncommon for this second attempt to take longer than the initial design. To avoid this scenario, design your Apex code to handle bulk operations from the very start. Learn about ways to do this from the Bulk Apex Triggers module.
2023-04-03 21:15:10,241 - INFO - No related goals found
2023-04-03 21:15:11,480 - INFO - This paragraph does not relate to any specific learning goal mentioned in the provided list.
2023-04-03 21:15:11,495 - INFO - Processed paragraph 30 in d2.txt: Maybe you noticed, maybe you didn’t, but the trigger handler code we created earlier didn’t use a bulk pattern, and therefore it’s prone to limits errors. To remind you, below is what the original code looked like.
2023-04-03 21:15:11,495 - INFO - No related goals found
2023-04-03 21:15:13,650 - INFO - This paragraph relates to the learning goal: [9] Given a scenario, follow best practices to write Apex classes and triggers. Specifically, it discusses a common mistake in writing Apex triggers and how to avoid it.
2023-04-03 21:15:13,664 - INFO - Processed paragraph 31 in d2.txt: public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            insert opp;
        }
    }
}
Notice that the insert DML operation is inside the for loop. This is bad, very bad, and something to always avoid.
2023-04-03 21:15:13,664 - INFO - Related goals: 9
2023-04-03 21:15:14,558 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:14,572 - INFO - Processed paragraph 32 in d2.txt: Luckily for us, we can fix this code by changing it to write to a list variable inside of the loop and then insert the contents of the list in one step.
2023-04-03 21:15:14,572 - INFO - No related goals found
2023-04-03 21:15:21,151 - INFO - The paragraph relates to the following learning goals:

- [7] Given a scenario, use and apply Apex control flow statements.
- [9] Given a scenario, follow best practices to write Apex classes and triggers.
- [18] Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc.
- [19] Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data.
- [20] Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
- [21] Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
2023-04-03 21:15:21,166 - INFO - Processed paragraph 33 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > Open.
For the entity type, select Classes. Select AccountHandler as the entity.
Click Open.
Delete the existing code, and insert the following snippet:
public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        List<Opportunity> opps = new List<Opportunity>();
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            opps.add(opp);
        }
        if (opps.size() > 0) {
            insert opps;
        }
    }
}
Press Ctrl + S to save your class.
Now that we fixed the trigger handler code, let’s test to make sure that the trigger can handle a load of 200 records. As we’re sure you know, writing unit tests to ensure that the code works is a best practice.
2023-04-03 21:15:21,166 - INFO - Related goals: 1, 2, 7, 8, 9, 18, 19, 20, 21
2023-04-03 21:15:23,041 - INFO - This paragraph relates to learning goal [19]: "Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data."
2023-04-03 21:15:23,055 - INFO - Processed paragraph 34 in d2.txt: In Developer Console, select File > New > Apex Class.
Enter AccountTrigger_Test for the class name and click OK.
Delete the existing code, and insert the following snippet:
@isTest
private class AccountTrigger_Test {
    @isTest static void TestCreateNewAccountInBulk() {
        // Test Setup data
        // Create 200 new Accounts
        List<Account> accts = new List<Account>();
        for(Integer i=0; i < 200; i++) {
            Account acct = new Account(Name='Test Account ' + i);
            accts.add(acct);
        }              
        // Perform Test
        Test.startTest();
        insert accts;                               
        Test.stopTest();
        // Verify that 200 new Accounts were inserted
        List<Account> verifyAccts = [SELECT Id FROM Account];
        System.assertEquals(200, verifyAccts.size());    
        // Also verify that 200 new Opportunities were inserted
        List<Opportunity> verifyOpps = [SELECT Id FROM Opportunity];                              
        System.assertEquals(200, verifyOpps.size());                             
    }
}
Press Ctrl + S to save your class.
Select Test > New Run.
Select AccountTrigger_Test as the TestClass, and TestCreateNewAccountInBulk as the test method.
Click Run.
Select the Tests tab and verify that the test runs to completion with no failures, as indicated by a green checkmark in the Status column.
Note
Note
Although we haven’t yet talked about unit tests, don’t worry. They work much the same way in the Lightning Platform as they do in .NET, with just a few different keywords. You’ll catch on pretty quickly as to how they’re structured. Learn more about testing Apex triggers by checking out the link in Resources.
2023-04-03 21:15:23,056 - INFO - Related goals: 1, 9, 19
2023-04-03 21:15:24,303 - INFO - This paragraph is related to [12] Implement exception handling in Apex, including custom exceptions as needed.
2023-04-03 21:15:24,319 - INFO - Processed paragraph 35 in d2.txt: Tell Me More
Apex uses a familiar try-catch-finally block to handle exceptions. But your catch statement and possible rollback could differ depending on where the Apex code is executed. Check out the link in Resources about best practices when dealing with try, catch, and rollback in Apex.
2023-04-03 21:15:24,319 - INFO - Related goals: 1, 2, 12
2023-04-03 21:15:25,563 - INFO - This paragraph relates to Learning Goal [6]: Declare variables, constants, methods, and use modifiers and Apex interfaces.
2023-04-03 21:15:25,577 - INFO - Processed paragraph 36 in d2.txt: There is no such thing as an application or session variable in the Lightning Platform. If you need data to persist between classes, you do have static variables, but keep in mind that static variables in the Lightning Platform don’t work the same as they do in .NET. In the Lightning Platform world, a static variable can only persist information within a single execution context, although other options for maintaining data across trigger invocations are available. Check out the Advanced Apex links in Internet Resources to learn more.
2023-04-03 21:15:25,577 - INFO - Related goals: 6
2023-04-03 21:15:26,369 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:26,385 - INFO - Processed paragraph 37 in d2.txt: When working with limits, there are many tradeoffs to consider, especially for developers of managed packages. By the way, Salesforce partners typically use managed packages to distribute and sell applications. In this module, we just skimmed the surface of what you need to know. If you’re serious about Apex development, check out the Advanced Apex links in Internet Resources.
2023-04-03 21:15:26,385 - INFO - No related goals found
2023-04-03 21:15:27,318 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:27,332 - INFO - Processed paragraph 0 in d3.txt: Use Asynchronous Apex
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:15:27,332 - INFO - No related goals found
2023-04-03 21:15:28,251 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:28,267 - INFO - Processed paragraph 1 in d3.txt: Know when to use Asynchronous Apex
Use future methods to handle a web callout
Work with the batchable interface to process a large number of records
Understand the advantages of using the queueable interface when you need to meet in the middle
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:15:28,267 - INFO - No related goals found
2023-04-03 21:15:46,571 - INFO - This paragraph relates to the following learning goals:
1. Understand multi-tenant concepts and design frameworks, such as MVC architecture and Lightning Component Framework.
2. Given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries.
3. Given a scenario, determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs.
4. Given a scenario, identify the options and considerations when importing and exporting data into development environments.
5. Identify the capabilities of the declarative process automation features.
6. Declare variables, constants, methods, and use modifiers and Apex interfaces.
7. Given a scenario, use and apply Apex control flow statements.
8. Given a scenario, write SOSL, SOQL, and DML statements in Apex.
9. Given a scenario, follow best practices to write Apex classes and triggers.
10. Given a scenario, identify the implications of governor limits on Apex transactions.
11. Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading.
12. Implement exception handling in Apex, including custom exceptions as needed.
13. Given a scenario, use declarative functionality and Apex together to automate business logic.
14. Given a scenario, display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed.
15. Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component.
16. Given a scenario, prevent user interface and data access security vulnerabilities. Given a scenario, display and use a custom user interface components, including Lightning Components, Flow, and Visualforce.
17. Describe the use cases and best practices for Lightning Web Component events.
18. Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc.
19. Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data.
20. Given a scenario, know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console.
21. Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
22. Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-03 21:15:46,586 - INFO - Processed paragraph 2 in d3.txt: 
2023-04-03 21:15:46,586 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-03 21:15:47,422 - INFO - The paragraph does not relate to any of the listed learning goals.
2023-04-03 21:15:47,439 - INFO - Processed paragraph 3 in d3.txt: (This clip starts at the 32:07 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-03 21:15:47,439 - INFO - No related goals found
2023-04-03 21:15:48,323 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:48,340 - INFO - Processed paragraph 4 in d3.txt: When to Go Asynchronous
As a .NET developer, you probably have already been exposed to the world of asynchronous programming. We’ll assume that you know what it is and understand the benefits to using this type of programming model. What you might not know is when to use asynchronous programming on the Lightning Platform.
2023-04-03 21:15:48,340 - INFO - No related goals found
2023-04-03 21:15:49,269 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:15:49,281 - INFO - Processed paragraph 5 in d3.txt: The following three reasons are usually behind choosing asynchronous programming.
2023-04-03 21:15:49,281 - INFO - No related goals found
2023-04-03 21:15:53,545 - INFO - The paragraph relates to the learning goal of [2] given a scenario, identify common use cases and best practices for declarative versus programmatic customizations, including governor limits, formula fields, and roll-up summaries. Specifically, it covers the use case for asynchronous processing and making callouts to external web services, which are best implemented using future methods in Apex programming. This information is relevant in deciding whether to use declarative or programmatic customizations to achieve a specific goal and to understand the governor limits associated with each approach.
2023-04-03 21:15:53,560 - INFO - Processed paragraph 6 in d3.txt: Processing a very large number of records. This reason is unique to the multi-tenanted world of the Lightning Platform where limits rule. The limits associated with asynchronous processes are higher than those with synchronous processes. Therefore, if you need to process thousands or even millions of records, asynchronous processing is your best bet.
Making callouts to external web services. Callouts can take a long time to process, but in the Lightning Platform, triggers can’t make callouts directly.
Creating a better and faster user experience by offloading some processing to asynchronous calls. Why do everything at once? If it can wait, let it.
Future Methods
In situations where you need to make a callout to a web service or want to offload simple processing to an asynchronous task, creating a future method could be the way to go.
2023-04-03 21:15:53,560 - INFO - Related goals: 2
2023-04-03 21:15:55,253 - INFO - This paragraph does not relate to any of the learning goals mentioned. It instead provides a brief explanation of how to change a method from synchronous to asynchronous processing using the @future annotation in Apex.
2023-04-03 21:15:55,266 - INFO - Processed paragraph 7 in d3.txt: Changing a method from synchronous to asynchronous processing is amazingly easy. Essentially, you just add the @future annotation to your method. Other than that, just make sure that the method is static and returns only a void type. For example, to create a method for performing a web service callout, we could do something like this:
2023-04-03 21:15:55,266 - INFO - No related goals found
2023-04-03 21:16:00,432 - INFO - The paragraph relates to [19] Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data. 

The paragraph shows an example of an Apex code for a future method, which should be tested to ensure its functionality is correct. Writing and executing tests for triggers, controllers, classes, flows, and processes are essential for developers to ensure that their code works as expected and does not negatively impact other areas of the system. In this case, the MyFutureClass method is executed asynchronously, making it even more important to test it thoroughly to ensure it works as expected.
2023-04-03 21:16:00,446 - INFO - Processed paragraph 8 in d3.txt: public class MyFutureClass {
    // Include callout=true when making callouts
    @future(callout=true)    
    static void myFutureMethod(Set<Id> ids) {
        // Get the list of contacts in the future method since
        // you cannot pass objects as arguments to future methods
        List<Contact> contacts = [SELECT Id, LastName, FirstName, Email
            FROM Contact WHERE Id IN :ids];
        // Loop through the results and call a method
        // which contains the code to do the actual callout
        for (Contact con: contacts) {
            String response = anotherClass.calloutMethod(con.Id,
                con.FirstName,
                con.LastName,
                con.Email);
            // May want to add some code here to log
            // the response to a custom object
        }
    }
}
We could then call it just like we would any other static method. Easy peasy!
2023-04-03 21:16:00,446 - INFO - Related goals: 1, 9, 19
2023-04-03 21:16:01,442 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:16:01,457 - INFO - Processed paragraph 9 in d3.txt: Future Limitations
Future methods have been around for several years. Although they offer a great option for Salesforce developers, they’re not without drawbacks. Here are some limitations to consider before using a future method.
2023-04-03 21:16:01,457 - INFO - No related goals found
2023-04-03 21:16:02,388 - INFO - The paragraph does not specifically relate to any of the learning goals listed.
2023-04-03 21:16:02,402 - INFO - Processed paragraph 10 in d3.txt: You can’t track execution because no Apex job ID is returned.
Parameters must be primitive data types, arrays of primitive data types, or collections of primitive data types. Future methods can’t take objects as arguments.
You can’t chain future methods and have one call another.
Although asynchronous calls are sometimes done to avoid limits, you still need to consider limits. Check out the link concerning Execution Governors and Limits in Resources.
2023-04-03 21:16:02,403 - INFO - No related goals found
2023-04-03 21:16:05,831 - INFO - The learning goal related to the paragraph above is:

[18] Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. 

This is because the paragraph discusses the batchable interface, which is an asynchronous tool used to process large numbers of records, and implementing Apex to work with various types of page components includes understanding how to use such tools in Apex development.
2023-04-03 21:16:05,846 - INFO - Processed paragraph 11 in d3.txt: Batch or Scheduled Apex
Another long-used asynchronous tool is the batchable interface. The No. 1 reason to use it is if you need to process a large number of records. For example, if you want to clean up or archive up to 50 million records, the batchable interface is your answer. You can even schedule your batches to run at a particular time.
2023-04-03 21:16:05,846 - INFO - Related goals: 1, 8, 18
2023-04-03 21:16:07,669 - INFO - This paragraph relates to the learning goal number 18: "Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc."
2023-04-03 21:16:07,685 - INFO - Processed paragraph 12 in d3.txt: To use it, your class implements the Database.Batchable interface. You also define start(), execute(), and finish() methods. You can then invoke a batch class using the Database.executeBatch method. For example, the following code creates a batchable class that processes all accounts in an org and then sends an email when it is done.
2023-04-03 21:16:07,685 - INFO - Related goals: 1, 8, 18
2023-04-03 21:16:10,914 - INFO - The paragraph relates to the learning goal of "Given a scenario, follow best practices to write Apex classes and triggers" [9]. It provides an example of a batchable Apex class and demonstrates how to use it to process records in batches. It also includes best practices for counting the number of processed records and executing post-processing actions.
2023-04-03 21:16:10,928 - INFO - Processed paragraph 13 in d3.txt: global class MyBatchableClass implements
            Database.Batchable<sObject>,
            Database.Stateful {  
    // Used to record the total number of Accounts processed
    global Integer numOfRecs = 0;
    // Used to gather the records that will be passed to the interface method
    // This method will only be called once and will return either a
    // Database.QueryLocator object or an Iterable that contains the records
    // or objects passed to the job.            
    global Database.QueryLocator start(Database.BatchableContext bc) {
        return Database.getQueryLocator('SELECT Id, Name FROM Account');                
    }
    // This is where the actual processing occurs as data is chunked into
    // batches and the default batch size is 200.
    global void execute(Database.BatchableContext bc, List<Account> scope) {
        for (Account acc : scope) {
            // Do some processing here
            // and then increment the counter variable
            numOfRecs = numOfRecs + 1;
        }     
    }
    // Used to execute any post-processing that may need to happen. This
    // is called only once and after all the batches have finished.
    global void finish(Database.BatchableContext bc) {
        EmailManager.sendMail('someAddress@somewhere.com',
                              numOfRecs + ' Accounts were processed!',
                              'Meet me at the bar for drinks to celebrate');            
    }
}
You could then invoke the batch class using anonymous code such as this:
2023-04-03 21:16:10,929 - INFO - Related goals: 9
2023-04-03 21:16:12,228 - INFO - This paragraph does not relate to any of the learning goals listed in the passage.
2023-04-03 21:16:12,241 - INFO - Processed paragraph 14 in d3.txt: MyBatchableClass myBatchObject = new MyBatchableClass();
Database.executeBatch(myBatchObject);
Note
Note
We didn’t specifically cover Scheduled Apex in this unit, but it’s similar to the batchable interface. It implements the schedulable interface, and you can use it to invoke Apex at specific times. Learn more about it by checking out the Asynchronous Apex  module.
2023-04-03 21:16:12,242 - INFO - No related goals found
2023-04-03 21:16:13,198 - INFO - This paragraph does not relate to any of the learning goals.
2023-04-03 21:16:13,214 - INFO - Processed paragraph 15 in d3.txt: Batchable Limitations
The batchable interface is great, but as with just about everything, consider its limitations.
2023-04-03 21:16:13,214 - INFO - No related goals found
2023-04-03 21:16:14,289 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:16:14,306 - INFO - Processed paragraph 16 in d3.txt: Troubleshooting can be troublesome.
Jobs are queued and subject to server availability, which can sometimes take longer than anticipated.
Have we talked about limits yet?
And Then There Was Queueable Apex
For a long time, future methods and the batchable interface were the primary ways developers had to do asynchronous processing. But remember all those limitations we talked about? Well, they were causing problems for some developers, so there was an outcry for a better solution.
2023-04-03 21:16:14,306 - INFO - No related goals found
2023-04-03 21:16:15,329 - INFO - This paragraph does not relate to any of the learning goals provided.
2023-04-03 21:16:15,344 - INFO - Processed paragraph 17 in d3.txt: In Winter ’15, Salesforce responded with Queueable Apex. It represents the best of future methods and the batchable interface, all rolled up into one super-duper asynchronous tool. Developers forced to use the slower batchable interface to get around limitations of future methods could now return to a tool that made more sense. Queueable Apex provides the following benefits to future methods.
2023-04-03 21:16:15,345 - INFO - No related goals found
2023-04-03 21:16:16,641 - INFO - This paragraph does not relate to any of the learning goals listed in the previous section.
2023-04-03 21:16:16,657 - INFO - Processed paragraph 18 in d3.txt: Non-primitive types - Classes can accept parameter variables of non-primitive data types, such as sObjects or custom Apex types.
Monitoring - When you submit your job, a jobId is returned that you can use to identify the job and monitor its progress.
Chaining jobs - You can chain one job to another job by starting a second job from a running job. Chaining jobs is useful for sequential processing.
So how does it work? Glad you asked.
2023-04-03 21:16:16,657 - INFO - No related goals found
2023-04-03 21:16:19,233 - INFO - None of the learning goals listed are directly related to this paragraph. The paragraph briefly discusses the advantages of using Queueable Apex over future methods for implementing web callouts in Salesforce, but it does not provide any detailed guidance or instruction on how to do so.
2023-04-03 21:16:19,248 - INFO - Processed paragraph 19 in d3.txt: Because Queueable Apex includes the best of future methods, it’s much easier to implement than Batch Apex. It just doesn’t have those pesky limitations we talked about. To demonstrate how it works, let’s take the sample code that used a future method to do a web callout and implement it using Queueable Apex.
2023-04-03 21:16:19,248 - INFO - No related goals found
2023-04-03 21:16:22,974 - INFO - This paragraph relates to the learning goal of [18] - Implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc. Specifically, it discusses how to implement a queueable class in Apex, which can be used to process a list of contacts and call out to another method to perform a task. The paragraph also provides an example of how to invoke the queueable Apex class.
2023-04-03 21:16:22,990 - INFO - Processed paragraph 20 in d3.txt: public class MyQueueableClass implements Queueable {
    private List<Contact> contacts;
    // Constructor for the class, where we pass
    // in the list of contacts that we want to process
    public MyQueueableClass(List<Contact> myContacts) {
        contacts = myContacts;
    }
    public void execute(QueueableContext context) {
        // Loop through the contacts passed in through
        // the constructor and call a method
        // which contains the code to do the actual callout
        for (Contact con: contacts) {
            String response = anotherClass.calloutMethod(con.Id,
                    con.FirstName,
                    con.LastName,
                    con.Email);
            // May still want to add some code here to log
            // the response to a custom object
        }
    }
}
To invoke Queueable Apex, you need something like the following:
2023-04-03 21:16:22,990 - INFO - Related goals: 1, 8, 18
2023-04-03 21:16:26,059 - INFO - This paragraph relates to Learning Goal [11]: "Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading." and Learning Goal [18]: "Given a scenario, implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc."
2023-04-03 21:16:26,074 - INFO - Processed paragraph 21 in d3.txt: List<Contact> contacts = [SELECT Id, LastName, FirstName, Email
    FROM Contact WHERE Is_Active__c = true];
Id jobId = System.enqueueJob(new MyQueueableClass(contacts));
Tell Me More
Along with queueable interfaces, Salesforce also introduced the Apex Flex Queue in Spring ’15, which eliminated the limitation of five concurrent batches. It also allows developers to monitor and manage the order of queued jobs. Check the links in Resources for more info.
2023-04-03 21:16:26,074 - INFO - Related goals: 1, 8, 11, 18
2023-04-03 21:16:27,187 - INFO - The given paragraph does not relate to any of the learning goals listed in the provided text.
2023-04-03 21:16:27,201 - INFO - Processed paragraph 22 in d3.txt: This module introduced .NET developers to the asynchronous options available on the Lightning Platform. For a deep dive on this topic, including testing, monitoring jobs, and best practices, check out the Asynchronous Apex module.
2023-04-03 21:16:27,201 - INFO - No related goals found
2023-04-03 21:16:28,227 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:16:28,243 - INFO - Processed paragraph 0 in d4.txt: Debug and Run Diagnostics
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-03 21:16:28,243 - INFO - No related goals found
2023-04-03 21:16:29,448 - INFO - This paragraph does not relate to any of the learning goals mentioned in the provided list.
2023-04-03 21:16:29,465 - INFO - Processed paragraph 1 in d4.txt: Understand which debugging features are available on the Lightning Platform
Use the Log Inspector in Developer Console to examine debug logs
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-03 21:16:29,465 - INFO - No related goals found
2023-04-03 21:16:48,057 - INFO - The paragraph relates to multiple learning goals, including:

- [1] Understand multi-tenant concepts and design frameworks
- [2] Identify common use cases and best practices for declarative versus programmatic customizations
- [3] Determine, create, and access the appropriate data model including objects, fields, relationships, and external IDs
- [4] Identify the options and considerations when importing and exporting data into development environments
- [5] Identify the capabilities of the declarative process automation features
- [6] Declare variables, constants, methods, and use modifiers and Apex interfaces
- [7] Use and apply Apex control flow statements
- [8] Write SOSL, SOQL, and DML statements in Apex
- [9] Follow best practices to write Apex classes and triggers
- [10] Identify the implications of governor limits on Apex transactions
- [11] Describe the relationship between Apex transactions, the save order of execution, and the potential for recursion and/or cascading
- [12] Implement exception handling in Apex, including custom exceptions as needed
- [13] Use declarative functionality and Apex together to automate business logic
- [14] Display content or modify Salesforce data using a Visualforce page and the appropriate controllers or extensions as needed
- [15] Describe the Lightning Component framework, its benefits, and the types of content that can be contained in a Lightning web component
- [16] Prevent user interface and data access security vulnerabilities and display/use custom user interface components, including Lightning Components, Flow, and Visualforce
- [17] Describe the use cases and best practices for Lightning Web Component events
- [18] Implement Apex to work with various types of page components, including Lightning Components, Flow, Next Best Actions, etc.
- [19] Write and execute tests for triggers, controllers, classes, flows, and processes using various sources of test data
- [20] Know how and when to use the Salesforce Developer tools such as Salesforce DX, Salesforce CLI, and Developer Console
- [21] Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
- [22] Describe the environments, requirements, and process for deploying code and associated configurations.
2023-04-03 21:16:48,074 - INFO - Processed paragraph 2 in d4.txt: 
2023-04-03 21:16:48,074 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-03 21:16:49,405 - INFO - There is no direct correlation between the paragraph provided and any of the learning goals listed.
2023-04-03 21:16:49,422 - INFO - Processed paragraph 3 in d4.txt: (This clip starts at the 40:30 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-03 21:16:49,422 - INFO - No related goals found
2023-04-03 21:16:50,397 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:16:50,411 - INFO - Processed paragraph 4 in d4.txt: Taking a Step Back
We’re not going to try and tell you that debugging on the Lightning Platform is just as easy as it is in Visual Studio. To be perfectly honest, it’s not even close. Debugging in a multi-tenant cloud environment presents unique challenges. That doesn’t mean you can’t do debugging and diagnostic work on the Lightning Platform. It’s just that debugging is different from what you’re used to. The good news is that in this area Salesforce has made enormous strides recently, and more is coming with every release.
2023-04-03 21:16:50,411 - INFO - No related goals found
2023-04-03 21:16:51,277 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:16:51,292 - INFO - Processed paragraph 5 in d4.txt: Your Friend, the Debug Log
In the world of the Lightning Platform, the debug log is where you find most of what you need to debug and analyze your code. You’ve already seen how you can write to the debug log. That is done with something like the following.
2023-04-03 21:16:51,293 - INFO - No related goals found
2023-04-03 21:16:52,728 - INFO - This paragraph does not relate to any of the learning goals listed in the passage as it only provides information on how to log debug messages in Apex code.
2023-04-03 21:16:52,747 - INFO - Processed paragraph 6 in d4.txt: System.debug('My Debug Message');
You can also specify one of the following logging levels.
2023-04-03 21:16:52,747 - INFO - No related goals found
2023-04-03 21:16:53,664 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:16:53,680 - INFO - Processed paragraph 7 in d4.txt: NONE
ERROR
WARN
INFO
DEBUG
FINE
FINER
FINEST
These levels run from lowest to highest and are cumulative. So if you pick the finest level, you get all messages that are logged as error, warn, info, and so on. There are also several debug log categories, and the amount of information logged depends on the log level. Learn more about debugging for different users by checking out the links in Resources.
2023-04-03 21:16:53,681 - INFO - No related goals found
2023-04-03 21:16:54,563 - INFO - The paragraph does not relate to any specific learning goal from the list provided.
2023-04-03 21:16:54,577 - INFO - Processed paragraph 8 in d4.txt: And why is all this so important to know?
2023-04-03 21:16:54,577 - INFO - No related goals found
2023-04-03 21:16:55,399 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:16:55,414 - INFO - Processed paragraph 9 in d4.txt: Ok, so we know you’ve heard a lot about limits, but understanding limits are critical to your success, so bear with us. Each debug log must be 20 MB or smaller. If it exceeds this amount, you won’t see everything you need. Additionally, each org can retain up to 1,000 MB of debug logs. The oldest logs are overwritten.
2023-04-03 21:16:55,414 - INFO - No related goals found
2023-04-03 21:16:56,616 - INFO - This paragraph does not relate to any of the learning goals listed in the given list.
2023-04-03 21:16:56,628 - INFO - Processed paragraph 10 in d4.txt: Because debug logs are your primary way of getting debug information about your application, you want to make sure to not exceed these limits. If you never see an error message, you can’t possibly do anything to address it. Check out the links in Resources about Advanced Apex Debugging and Best Practices for tips on how to avoid these kinds of issues.
2023-04-03 21:16:56,629 - INFO - No related goals found
2023-04-03 21:16:57,779 - INFO - This paragraph does not relate to any of the learning goals listed. It is unrelated to the Salesforce certification exam topics.
2023-04-03 21:16:57,793 - INFO - Processed paragraph 11 in d4.txt: Use the Log Inspector
Developer Console has grown quite a bit in the past few releases. One of its more useful features is the Log Inspector. To see how it works, let’s walk through running some anonymous code and viewing the results.
2023-04-03 21:16:57,793 - INFO - No related goals found
2023-04-03 21:16:59,549 - INFO - The paragraph relates to the following learning goal:

21. Describe how to approach debugging system issues and monitoring flows, processes, and asynchronous and batch jobs, etc.
2023-04-03 21:16:59,563 - INFO - Processed paragraph 12 in d4.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Change Log Levels.
Click the Add/Change link in General Trace Setting for You.
Select INFO as the debug level for all columns.
Click Done.
Click Done.
Select Debug > Perspective Manager.
Select All (Predefined) and click Set Default.
Click Yes to change this to your default perspective.
Close the Developer Console Perspective window.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
System.debug(LoggingLevel.INFO, 'My Info Debug Message');
System.debug(LoggingLevel.FINE, 'My Fine Debug Message');
List<Account> accts = [SELECT Id, Name FROM Account];
for(Account a : accts) {
    System.debug('Account Name: ' + a.name);
    System.debug('Account Id: ' + a.Id);
}
Make sure that Open Log is selected, and click Execute.
Select Debug > Switch Perspective > All (Predefined).
Examine the results in the Timeline and Executed Units tabs.
Under Execution Log, select the Filter option, and enter FINE. Because we set the debug level to INFO for Apex Code, no results appear.
Select Debug > Change Log Levels.
Click the Add/Change link in General Trace Setting for You.
Change the DebugLevel for ApexCode and Profiling to FINEST.
Click Done.
Click Done.
Select Debug > Open Execute Anonymous Window.
Leave the code that is currently there, and click Execute.
Under Execution Log, select the Filter option, and enter FINE. The filter search is case sensitive. You now see "My Fine Debug Message" displayed. You should also notice a size difference between the two latest logs in the Logs tab.
Set Checkpoints
As a .NET developer, you’re used to setting breakpoints in your applications. But in a cloud-based, multi-tenanted environment where everyone is sharing resources, allowing everyone to halt execution and keep database connections open is disastrous.
2023-04-03 21:16:59,564 - INFO - Related goals: 1, 2, 21
2023-04-03 21:17:00,462 - INFO - This paragraph does not relate to any of the learning goals listed.
2023-04-03 21:17:00,475 - INFO - Processed paragraph 13 in d4.txt: Checkpoints are similar to breakpoints in that they reveal a lot of detailed execution information about a line of code. They just don’t stop execution on that line.
2023-04-03 21:17:00,475 - INFO - No related goals found
2023-04-03 21:17:01,340 - INFO - The paragraph does not relate to any of the learning goals listed.
2023-04-03 21:17:01,354 - INFO - Processed paragraph 14 in d4.txt: To see how they work, let’s walk through setting a checkpoint on a line of code that you created in an earlier unit on Understanding Execution Context. If you haven’t created the handler and trigger code for the AccountTrigger, go back to that unit and complete that section before continuing.
2023-04-03 21:17:01,355 - INFO - No related goals found
2023-04-03 21:17:04,980 - INFO - The paragraph relates to the learning goals for debugging and monitoring flows, processes, and asynchronous and batch jobs, etc. [21]. It also covers the learning goals for using the Salesforce Developer tools such as Developer Console [20], implementing Apex to work with various types of page components [18], and writing and executing tests [19]. Additionally, it covers the learning goal of understanding multi-tenant concepts and design frameworks [1].
2023-04-03 21:17:05,000 - INFO - Processed paragraph 15 in d4.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select File > Open.
Select Classes as the entity type, and AccountHandler as the entity.
Click Open.
Position your cursor over line 10 in the left margin and click once. A red dot appears next to the line number.
Double-click the latest entry in the Logs panel to open the debug log.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
Account acct = new Account(
    Name='Test Account 3',
    Phone='(415)555-8989',
    NumberOfEmployees=30,
    BillingCity='San Francisco');
insert acct;
Make sure that Open Log is selected, and click Execute.
Click the Checkpoints tab, and double-click the first entry that appears. The Checkpoint Inspector appears.
On the Symbols tab, expand the nodes within the execution tree. Notice the Key and Value columns.
Click the Heap tab. Notice the Count and Total Size columns.
What's Next?
Now that you have a grasp of Apex basics you are ready to continue to your Salesforce journey. Head on over to our Developer Beginner Trail to leverage your existing development skills to build apps fast on the Salesforce Platform.
2023-04-03 21:17:05,001 - INFO - Related goals: 1, 2, 8, 9, 18, 19, 20, 21
2023-04-03 21:17:06,223 - INFO - The paragraph does not relate to any of the learning goals mentioned in the given list.
2023-04-03 21:17:06,236 - INFO - Processed paragraph 16 in d4.txt: Resources
Debug Log in the Apex Code Developer’s Guide
Working with Logs in the Apex Code Developer’s Guide
Examples of Using the Log Inspector
Setting Checkpoints in Apex Code
2023-04-03 21:17:06,236 - INFO - No related goals found
2023-04-04 11:08:27,376 - INFO - Processed paragraph 0 in 0_apex_database_apex_database_intro_content.txt: 
2023-04-04 11:08:27,377 - INFO - Related goals: 2
2023-04-04 11:08:28,423 - INFO - Processed paragraph 1 in 0_apex_database_apex_database_intro_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Describe the key features of the Apex programming language.
        Save an Apex class and call methods with Anonymous.Apex.
        Use the Developer Console to inspect debug logs.
2023-04-04 11:08:28,424 - INFO - No related goals found
2023-04-04 11:08:32,890 - INFO - Processed paragraph 2 in 0_apex_database_apex_database_intro_content.txt: 
2023-04-04 11:08:32,891 - INFO - No related goals found
2023-04-04 11:08:34,715 - INFO - Processed paragraph 3 in 0_apex_database_apex_database_intro_content.txt: Before You Begin
  
  We're excited to accompany you on your Apex adventure. While this module covers basic information about the programming language, it also goes deep, quickly. If this module is your first exposure to Apex, we highly recommend that you first go through the Quick Start: Apex&nbsp;project. Then come on back, we'll be waiting for you!
  
    What is Apex?
  
  
    Apex is a programming language that uses Java-like syntax and acts like database stored procedures. Apex enables developers to add business logic to system events, such as button clicks, updates of related records, and Visualforce pages.
    As a language, Apex is:
    
      Hosted—Apex is saved, compiled, and executed on the server—the Lightning Platform.
      Object oriented—Apex supports classes, interfaces, and inheritance.
      Strongly typed—Apex validates references to objects at compile time.
      Multitenant aware—Because Apex runs in a multitenant platform, it guards closely against runaway code by enforcing limits, which prevent code from monopolizing shared resources.
      Integrated with the database—It is straightforward to access and manipulate records. Apex provides direct access to records and their fields, and provides statements and query languages to manipulate those records.
      Data focused—Apex provides transactional access to the database, allowing you to roll back operations.
      Easy to use—Apex is based on familiar Java idioms.
      Easy to test—Apex provides built-in support for unit test creation, execution, and code coverage. Salesforce ensures that all custom Apex code works as expected by executing all unit tests prior to any platform upgrades.
      Versioned—Custom Apex code can be saved against different versions of the API.
    
    
      
    
    
      Apex Language Highlights
      Like other object-oriented programming languages, these are some of the language constructs that Apex supports:
      
        Classes, interfaces, properties, and collections (including arrays).
        Object and array notation.
        Expressions, variables, and constants.
        Conditional statements (if-then-else) and control flow statements (for loops and while loops).
      
      Unlike other object-oriented programming languages, Apex supports:
      
        Cloud development as Apex is stored, compiled, and executed in the cloud.
        Triggers, which are similar to triggers in database systems.
        Database statements that allow you to make direct database calls and query languages to query and search data.
        Transactions and rollbacks.
        The global access modifier, which is more permissive than the public modifier and allows access across namespaces and applications.
        Versioning of custom code.
      
      In addition, Apex is a case-insensitive language.
    
    
      Development Tools
      You can write and debug Apex on your client computer using the Salesforce Extensions for Visual Studio Code. See Salesforce Visual Studio Code Extensions.
      You can also write Apex and access debugging information directly in the browser by using the Salesforce user interface. Open the Developer Console under Your Name or the quick access menu ().
2023-04-04 11:08:34,718 - INFO - No related goals found
2023-04-04 11:08:38,431 - INFO - Processed paragraph 4 in 0_apex_database_apex_database_intro_content.txt: 
2023-04-04 11:08:38,432 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21
2023-04-04 11:08:40,282 - INFO - Processed paragraph 5 in 0_apex_database_apex_database_intro_content.txt: Data Types Overview
  
  
    Apex supports various data types, including a data type specific to Salesforce—the sObject data type.
    
      Apex supports the following data types.
      
        A primitive, such as an Integer, Double, Long, Date, Datetime, String, ID, Boolean, among others.
        An sObject, either as a generic sObject or as a specific sObject, such as an Account, Contact, or MyCustomObject__c (you’ll learn more about sObjects in a later unit.)
        A collection, including:
            A list (or array) of primitives, sObjects, user defined objects, objects created from Apex classes, or collections
            A set of primitives, sObjects, user defined objects, objects created from Apex classes, or collections
            A map from a primitive to a primitive, sObject, or collection
          
        
        A typed list of values, also known as an enum
2023-04-04 11:08:40,283 - INFO - Related goals: 3
2023-04-04 11:08:44,357 - INFO - Processed paragraph 6 in 0_apex_database_apex_database_intro_content.txt: User-defined Apex classes
        System-supplied Apex classes
      
    
    
      
        Apex Collections: List
      
      Lists hold an ordered collection of objects. Lists in Apex are synonymous with arrays and the two can be used interchangeably.
      The following two declarations are equivalent. The colors variable is declared using the List syntax.
      
List&lt;String&gt; colors = new List&lt;String&gt;();Copy
      
      Alternatively, the colors variable can be declared as an array but assigned to a list rather than an array.
      
String[] colors = new List&lt;String&gt;();Copy
      
      Grow collections as needed by using the List.add() method to add new elements. Use the square bracket array notation to reference existing elements in the collection by index. You can't, however, use square bracket array notation to add more elements.
      This example shows how to add elements to a list when you create it, and then use the add() method to add more elements.&nbsp;
      
// Create a list and add elements to it in one step
List&lt;String&gt; colors = new List&lt;String&gt; { 'red', 'green', 'blue' };
// Add elements to a list after it has been created
List&lt;String&gt; moreColors = new List&lt;String&gt;();
moreColors.add('orange');
moreColors.add('purple');Copy
      
      List elements can be read by specifying an index between square brackets, just like with array elements. Also, you can use the get() method to read a list element. This example is based on the lists created in the previous example and shows how to read list elements using either method. The example also shows how to iterate over array elements.
      
// Get elements from a list
String color1 = moreColors.get(0);
String color2 = moreColors[0];
System.assertEquals(color1, color2);
// Iterate over a list to read elements
for(Integer i=0;i&lt;colors.size();i++) {
    // Write value to the debug log
    System.debug(colors[i]);
}Copy
      
      
        
          
            
              
                
                  
                    
                      
                        
                        
                          
                            Beyond the Basics
                            Apex supports two other collection types: Set and Map. You can learn more about these in the Collections section of the Apex Developer Guide.
2023-04-04 11:08:44,358 - INFO - Related goals: 6
2023-04-04 11:08:46,094 - INFO - Processed paragraph 7 in 0_apex_database_apex_database_intro_content.txt: 
2023-04-04 11:08:46,094 - INFO - Related goals: 1, 8, 18
2023-04-04 11:08:49,203 - INFO - Processed paragraph 8 in 0_apex_database_apex_database_intro_content.txt: Apex Classes
  
  
    One of the benefits of Apex classes is code reuse. Class methods can be called by triggers and other classes. The following tutorial walks you through saving an example class in your organization, using this class to send emails, and inspecting debug logs.
    
    
    
Save an Apex Class
      Save the EmailManager class in your organization:
      
        Open the Developer Console under Your Name or the quick access menu ().
        In the Developer Console, click File | New | Apex Class, and enter EmailManager for the class name, and then click OK.
        Replace the default class body with the EmailManager class example.The EmailManager class has a public method (sendMail()) that sends email and uses built-in Messaging methods of the Apex class library. Also, this class has a private helper method (inspectResults()), which can’t be called externally because it is private but is used only within the class. This helper method inspects the results of the email send call and is called by sendMail().public class EmailManager {
    // Public method
    public void sendMail(String address, String subject, String body) {
        // Create an email message object
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {address};
        mail.setToAddresses(toAddresses);
        mail.setSubject(subject);
        mail.setPlainTextBody(body);
        // Pass this email message to the built-in sendEmail method 
        // of the Messaging class
        Messaging.SendEmailResult[] results = Messaging.sendEmail(
                                 new Messaging.SingleEmailMessage[] { mail });
        // Call a helper method to inspect the returned results
        inspectResults(results);
    }
    // Helper method
    private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
        Boolean sendResult = true;
        // sendEmail returns an array of result objects.
        // Iterate through the list to inspect results. 
        // In this class, the methods send only one email, 
        // so we should have only one result.
        for (Messaging.SendEmailResult res : results) {
            if (res.isSuccess()) {
                System.debug('Email sent successfully');
            }
            else {
                sendResult = false;
                System.debug('The following errors occurred: ' + res.getErrors());                 
            }
        }
        return sendResult;
    }
}Copy
        
        Click File | Save to save your class.NOTE: If your code isn’t syntactically correct, an error shows up in the Problems tab. You can use the error details to correct your code.
      
    
    
      
        
          
            
            
              
                Beyond the Basics&nbsp;
                The class you just saved makes use of object-oriented programming (OOP). The class encapsulates the methods that are related to managing email. To be a perfect example of OOP, the class would also contain member variables (attributes) and accessor methods to access those attributes, but for simplicity our class doesn’t have these.Salesforce compiles your class when you save it.
              
            
          
        
      
    
    
      Call a Method to Send an Email
      Let’s invoke the public method. We’ll use anonymous Apex execution to do so. Anonymous Apex allows you to run lines of code on the fly and is a handy way to invoke Apex, especially to test out functionality. Debug log results are generated, as with any other Apex execution.
      
        
          
            
              
              
                
                  Note
                  There are other ways to invoke Apex, for example, through triggers. You’ll learn more about triggers in another module.
                
              
            
          
        
      
      
        In the Developer Console, click Debug | Open Execute Anonymous Window.
        In the window that opens, enter the following. Replace 'Your email address' with your email address.EmailManager em = new EmailManager();
em.sendMail('Your email address', 'Trailhead Tutorial', '123 body');Copy
        
        Click Execute.Now that this method has executed, you should have received an email in your inbox. Check your email!
      
    
    
      Inspect Debug Logs
      Debug logs are useful for debugging your code. When Apex methods execute, the calls are logged in the debug log. Also, you can write your own debug messages to the log, which helps in debugging your code in case there are errors. The inspectResults() helper method, which is called by sendMail(), writes messages to the log by using the System.debug() method to indicate whether the email send operation was successful or had errors. You can look for these messages in the debug log that was generated when you executed the method.
      
        In the Developer Console, click the Logs tab and double-click the most recent log in the list.
        Select Debug Only to filter the log so that only log lines for System.debug() statements are shown.
2023-04-04 11:08:49,205 - INFO - Related goals: 1, 2, 20, 21
2023-04-04 11:08:50,972 - INFO - Processed paragraph 9 in 0_apex_database_apex_database_intro_content.txt: You’ll see the following message in the filtered log view, assuming the email was sent without errors.
      DEBUG|Email sent successfully
      
        
          
            
              
              
                
                  Note
                  
                  Also, you can filter the debug log by searching for any keyword in the Filter field, or by selecting any of the other options. For more information, see the Log Inspector help.
                
              
            
          
        
      
      Call a Static Method
      Because the sendMail() method in our class doesn’t access class member variables, it doesn’t need to be an instance method. Let’s change it to a static method by adding the static keyword to its declaration. Static methods are easier to call than instance methods because they don’t need to be called on an instance of the class but are called directly on the class name.
      
        In the Developer Console, find the open tab for the EmailManager class and modify the first line of the sendMail()method definition to the following (the only change is the added statickeyword.)public static void sendMail(String address, String subject, String body) {Copy
        
        Click File | Save to save your class.
        Modify the statements in your Execute Anonymous window to call the static method on the class name.EmailManager.sendMail('Your email address', 'Trailhead Tutorial', '123 body');Copy
        
        Click Execute.Now that this method has executed, you can check your email, and optionally, the debug log as in the previous steps.
2023-04-04 11:08:50,973 - INFO - No related goals found
2023-04-04 11:09:15,220 - INFO - Processed paragraph 10 in 0_apex_database_apex_database_intro_content.txt: 
2023-04-04 11:09:15,220 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:09:18,045 - INFO - Processed paragraph 11 in 0_apex_database_apex_database_intro_content.txt: Resources
  
  
    
      Introduction to Apex Code (Recorded Webinar)
      Apex Developer Guide: Introducing Apex
      Trailhead: Developer Console Basics
2023-04-04 11:09:18,045 - INFO - No related goals found
2023-04-04 11:09:19,581 - INFO - Processed paragraph 12 in 0_apex_database_apex_database_intro_content.txt: 
2023-04-04 11:09:19,581 - INFO - Related goals: 1
2023-04-04 11:09:21,657 - INFO - Processed paragraph 0 in 0_apex_testing_apex_testing_intro_content.txt: 
2023-04-04 11:09:21,657 - INFO - Related goals: 2
2023-04-04 11:09:23,372 - INFO - Processed paragraph 1 in 0_apex_testing_apex_testing_intro_content.txt: Learning Objectives
  
  
    
After completing this unit, you’ll be able to:
        Describe the key benefits of Apex unit tests.
        Define a class with test methods.
        Execute all test methods in a class and inspect failures.
        Create and execute a suite of test classes.
2023-04-04 11:09:23,372 - INFO - Related goals: 1, 9, 19
2023-04-04 11:09:49,371 - INFO - Processed paragraph 2 in 0_apex_testing_apex_testing_intro_content.txt: 
2023-04-04 11:09:49,371 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:09:55,832 - INFO - Processed paragraph 3 in 0_apex_testing_apex_testing_intro_content.txt: Apex Unit Tests
  
  
    The Apex testing framework enables you to write and execute tests for your Apex classes and triggers on the Lightning Platform. Apex unit tests ensure high quality for your Apex code and let you meet requirements for deploying Apex.
    
      Testing is the key to successful long-term development and is a critical component of the development process. The Apex testing framework makes it easy to test your Apex code. Apex code can only be written in a sandbox environment or a Developer org, not in production. Apex code can be deployed to a production org from a sandbox. Also, app developers can distribute Apex code to customers from their Developer orgs by uploading packages to the Lightning Platform AppExchange. In addition to being critical for quality assurance, Apex unit tests are also requirements for deploying and distributing Apex.&nbsp;
      These are the benefits of Apex unit tests.
      
        Ensuring that your Apex classes and triggers work as expected
        Having a suite of regression tests that can be rerun every time classes and triggers are updated to ensure that future updates you make to your app don’t break existing functionality
        Meeting the code coverage requirements for deploying Apex to production or distributing Apex to customers via packages
        High-quality apps delivered to the production org, which makes production users more productive
        High-quality apps delivered to package subscribers, which increase your customers trust
      
      
        
          
            
              
              
                
                  Before each major service upgrade, Salesforce runs all Apex tests on your behalf through a process called Apex Hammer. The Hammer process runs in the current version and next release and compares the test results. This process ensures that the behavior in your custom code hasn’t been altered as a result of service upgrades. The Hammer process picks orgs selectively and doesn’t run in all orgs. Issues found are triaged based on certain criteria. Salesforce strives to fix all issues found before each new release.
                  Maintaining the security of your data is our highest priority. We don't view or modify any data in your org, and all testing is done in a copy that runs in a secure data center.
                
              
            
          
        
      
    
    
      
        Code Coverage Requirement for Deployment
      
      Before you can deploy your code or package it for the Lightning Platform AppExchange, at least 75% of Apex code must be covered by tests, and all those tests must pass. In addition, each trigger must have some coverage. Even though code coverage is a requirement for deployment, don’t write tests only to meet this requirement. Make sure to test the common use cases in your app, including positive and negative test cases, and bulk and single-record processing.
    
    
      
        Test Method Syntax
      
      Test methods are defined using the @isTest annotation and have the following syntax:
      
@isTest static void testName() {
    // code_block
}Copy
      
      The @isTest annotation takes multiple modifiers within parentheses and separated by blanks. We’ll cover one such parameter later.
      The visibility of a test method doesn’t matter, so declaring a test method as public or private doesn’t make a difference as the testing framework is always able to access test methods. For this reason, the access modifiers are omitted in the syntax.
      Test methods must be defined in test classes, which are classes annotated with @isTest. This sample class shows a definition of a test class with one test method.
      
@isTest
private class MyTestClass {
    @isTest static void myTest() {
        // code_block
    }
}Copy
      
      Test classes can be either private or public. If you’re using a test class for unit testing only, declare it as private. Public test classes are typically used for test data factory classes, which are covered later.
    
    
      
        Unit Test Example: Test the TemperatureConverter Class
      
      The following simple example is of a test class with three test methods. The class method that’s being tested takes a temperature in Fahrenheit as an input. It converts this temperature to Celsius and returns the converted result. Let’s add the custom class and its test class.
      
        In the Developer Console, click File | New | Apex Class, and enter TemperatureConverter for the class name, and then click OK.
        Replace the default class body with the following.public class TemperatureConverter {
    // Takes a Fahrenheit temperature and returns the Celsius equivalent.
    public static Decimal FahrenheitToCelsius(Decimal fh) {
        Decimal cs = (fh - 32) * 5/9;
        return cs.setScale(2);
    }
}Copy
        
        Press Ctrl+S to save your class.
        Repeat the previous steps to create the TemperatureConverterTestclass. Add the following for this class.@isTest
private class TemperatureConverterTest {
    @isTest static void testWarmTemp() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(70);
        System.assertEquals(21.11,celsius);
    }
    @isTest static void testFreezingPoint() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(32);
        System.assertEquals(0,celsius);
    }
    @isTest static void testBoilingPoint() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(212);        
        System.assertEquals(100,celsius,'Boiling point temperature is not expected.');
    } 
    @isTest static void testNegativeTemp() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(-10);
        System.assertEquals(-23.33,celsius);
    }
}Copy
        
      
      The TemperatureConverterTest test class verifies that the method works as expected by calling it with different inputs for the temperature in Fahrenheit. Each test method verifies one type of input: a warm temperature, the freezing point temperature, the boiling point temperature, and a negative temperature. The verifications are done by calling the System.assertEquals() method, which takes two parameters: the first is the expected value, and the second is the actual value. There is another version of this method that takes a third parameter—a string that describes the comparison being done, which is used in testBoilingPoint(). This optional string is logged if the assertion fails.
      Let’s run the methods in this class.
      
        In the Developer Console, click Test | New Run.
        Under Test Classes, click TemperatureConverterTest.
        To add all the test methods in the TemperatureConverterTest class to the test run, click Add Selected.
        Click Run.
        In the Tests tab, you see the status of your tests as they’re running. Expand the test run, and expand again until you see the list of individual tests that were run. They all have green checkmarks.&nbsp;
2023-04-04 11:09:55,833 - INFO - Related goals: 1, 5, 7, 9, 19
2023-04-04 11:10:01,897 - INFO - Processed paragraph 4 in 0_apex_testing_apex_testing_intro_content.txt: After you run tests, code coverage is automatically generated for the Apex classes and triggers in the org. You can check the code coverage percentage in the Tests tab of the Developer Console. In this example, the class you’ve tested, the TemperatureConverter class, has 100% coverage, as shown in this image.
      
        
      
      
        
          
            
              
              
                
                  Whenever you modify your Apex code, rerun your tests to refresh code coverage results.
                  A known issue with the Developer Console prevents it from updating code coverage correctly when running a subset of tests. To update your code coverage results, use Test | Run All rather than Test | New Run.
                
              
            
          
        
      
      While one test method would have resulted in full coverage of the TemperatureConverter class, it’s still important to test for different inputs to ensure the quality of your code. Obviously, it isn’t possible to verify every data point, but you can test for common data points and different ranges of input. For example, you can verify passing positive and negative numbers, boundary values, and invalid parameter values to verify negative behavior. The tests for the TemperatureConverter class verify common data points, like the boiling temperature, and negative temperatures.
      The TemperatureConverterTest test class doesn’t cover invalid inputs or boundary conditions. Boundary conditions are about minimum and maximum values. In this case, the temperature conversion method accepts a Decimal, which can accept large numbers, higher than Double values. For invalid inputs, there is no invalid temperature but the only invalid input is null. How does the conversion method handle this value? In this case, when the Apex runtime dereferences the parameter variable to evaluate the formula, it throws a System.NullPointerException. You can modify the FahrenheitToCelsius() method to check for an invalid input and return null in that case, and then add a test to verify the invalid input behavior.
      Up to this point, all tests pass because the conversion formula used in the class method is correct. But that’s boring! Let’s try to simulate a failure just to see what happens when an assertion fails. For example, let’s modify the boiling point temperature test and pass in a false expected value for the boiling point Celsius temperature (0 instead of 100). This causes the corresponding test method to fail.
      
        Change the testBoilingPoint()test method to the following.    @isTest static void testBoilingPoint() {
        Decimal celsius = TemperatureConverter.FahrenheitToCelsius(212);        
        // Simulate failure
        System.assertEquals(0,celsius,'Boiling point temperature is not expected.');
    }Copy
        
        To execute the same test run, click the latest run in the Tests tab, and then click Test | Rerun.The assertion in testBoilingPoint() fails and throws a fatal error (an AssertException that can’t be caught).
        Check the results in the Tests tab by expanding the latest test run. The test run reports one out of four tests failed. To get more details about the failure, double-click the test run. Detailed results appear in a separate tab as shown in this image.&nbsp;
2023-04-04 11:10:01,897 - INFO - Related goals: 1, 9, 19
2023-04-04 11:10:03,183 - INFO - Processed paragraph 5 in 0_apex_testing_apex_testing_intro_content.txt: To get the error message for the test failure, double-click inside the Errors column for the failed test. You’ll see the following; descriptive text next to Assertion Failed: is the text we provided in the System.assertEquals()&nbsp;statement.System.AssertException: Assertion Failed: Boiling point temperature is not expected.: Expected: 0, Actual: 100.00
2023-04-04 11:10:03,183 - INFO - No related goals found
2023-04-04 11:10:08,135 - INFO - Processed paragraph 6 in 0_apex_testing_apex_testing_intro_content.txt: The test data in these test methods are numbers and not Salesforce records. You’ll find out more about how to test Salesforce records and how to set up your data in the next unit.
    
    
      
        Increase Your Code Coverage
      
      When writing tests, try to achieve the highest code coverage possible. Don’t just aim for 75% coverage, which is the lowest coverage that the Lightning Platform requires for deployments and packages. The more test cases that your tests cover, the higher the likelihood that your code is robust. Sometimes, even after you write test methods for all your class methods, code coverage is not at 100%. One common cause is not covering all data values for conditional code execution. For example, some data values tend to be ignored when your class method has if statements that cause different branches to be executed based on whether the evaluated condition is met. Ensure that your test methods account for these different values.
      This example includes the class method, getTaskPriority(), which contains two if statements. The main task of this method is to return a priority string value based on the given lead state. The method validates the state first and returns null if the state is invalid. If the state is CA, the method returns 'High'; otherwise, it returns 'Normal' for any other state value.
      
public class TaskUtil {
    public static String getTaskPriority(String leadState) {
        // Validate input
        if (String.isBlank(leadState) || leadState.length() &gt; 2) {
            return null;
        }
        String taskPriority;
        if (leadState == 'CA') {
             taskPriority = 'High'; 
        } else {
             taskPriority = 'Normal';
        }
        return taskPriority;
    }
}Copy
      
      
        
          
            
              
              
                
                  The equality operator (==) performs case-insensitive string comparisons, so there is no need to convert the string to lower case first. This means that passing in 'ca' or 'Ca' will satisfy the equality condition with the string literal 'CA'.
                
              
            
          
        
      
      This is the test class for the getTaskPriority() method. The test method simply calls getTaskPriority() with one state ('NY').
      
@isTest
private class TaskUtilTest {
    @isTest static void testTaskPriority() {
        String pri = TaskUtil.getTaskPriority('NY');
        System.assertEquals('Normal', pri);
    }
}Copy
      
      Let’s run this test class (TaskUtilTest) in the Developer Console and check code coverage for the corresponding TaskUtil class that this test covers. After the test run finishes, the code coverage for TaskUtil is shown as 75%. If you open this class in the Developer Console, you see six blue (covered) lines and two red (uncovered) lines, as shown in this image.
      
        
      
      The reason why line 5 wasn’t covered is because our test class didn’t contain a test to pass an invalid state parameter. Similarly, line 11 wasn’t covered because the test method didn’t pass 'CA' as the state. Let’s add two more test methods to cover those scenarios. The following shows the full test class after adding the testTaskHighPriority() and testTaskPriorityInvalid() test methods. If you rerun this test class, the code coverage for TaskUtil is now at 100%!
      
@isTest
private class TaskUtilTest {
    @isTest static void testTaskPriority() {
        String pri = TaskUtil.getTaskPriority('NY');
        System.assertEquals('Normal', pri);
    }
    @isTest static void testTaskHighPriority() {
        String pri = TaskUtil.getTaskPriority('CA');
        System.assertEquals('High', pri);
    }
    @isTest static void testTaskPriorityInvalid() {
        String pri = TaskUtil.getTaskPriority('Montana');
        System.assertEquals(null, pri);
    }
}Copy
      
    
    
      
        Create and Execute a Test Suite
      
      A test suite is a collection of Apex test classes that you run together. For example, create a suite of tests that you run every time you prepare for a deployment or Salesforce releases a new version. Set up a test suite in the Developer Console to define a set of test classes that you execute together regularly.
      You now have two test classes in your org. These two classes aren’t related, but let’s pretend for the moment that they are. Assume that there are situations when you want to run these two test classes but don’t want to run all the tests in your org. Create a test suite that contains both classes, and then execute the tests in the suite.
      
        In the Developer Console, select Test | New Suite.
        Enter TempConverterTaskUtilSuite for the suite name, and then click OK.
        Select TaskUtilTest, hold down the Ctrl key, and then select TemperatureConverterTest.
        To add the selected test classes to the suite, click &gt;.&nbsp;
2023-04-04 11:10:08,137 - INFO - Related goals: 1, 9, 19
2023-04-04 11:10:13,223 - INFO - Processed paragraph 7 in 0_apex_testing_apex_testing_intro_content.txt: Click Save.
        Select Test | New Suite Run.
        Select TempConverterTaskUtilSuite, and then click &gt; to move TempConverterTaskUtilSuite to the Selected Test Suites column.
        Click Run Suites.
        On the Tests tab, monitor the status of your tests as they’re running. Expand the test run, and expand again until you see the list of individual tests that were run. Like in a run of individual test methods, you can double-click method names to see detailed test results.
      
    
    
      
        Create Test Data
      
      Salesforce records that are created in test methods aren’t committed to the database. They’re rolled back when the test finishes execution. This rollback behavior is handy for testing because you don’t have to clean up your test data after the test executes.
      By default, Apex tests don’t have access to pre-existing data in the org, except for access to setup and metadata objects, such as the User or Profile objects. Set up test data for your tests. Creating test data makes your tests more robust and prevents failures that are caused by missing or changed data in the org. You can create test data directly in your test method, or by using a utility test class as you’ll find out later.
      
        
          
            
              
              
                
                  Even though it is not a best practice to do so, there are times when a test method needs access to pre-existing data. To access org data, annotate the test method with @isTest(SeeAllData=true). The test method examples in this unit don’t access org data and therefore don’t use the SeeAllData parameter.
                
              
            
          
        
      
      
        Tell Me More
      
    
    
      
        You can save up to 6 MB of Apex code in each org. Test classes annotated with @isTest don’t count toward this limit.
        Even though test data rolls back, no separate database is used for testing. As a result, for some sObjects that have fields with unique constraints, inserting duplicate sObject records results in an error.
        Test methods don’t send emails.
        Test methods can’t make callouts to external services. You can use mock callouts in tests.
        SOSL searches performed in a test return empty results. To ensure predictable results, use Test.setFixedSearchResults() to define the records to be returned by the search.
2023-04-04 11:10:13,224 - INFO - Related goals: 1, 2, 9, 19, 20, 21, 22
2023-04-04 11:10:36,968 - INFO - Processed paragraph 8 in 0_apex_testing_apex_testing_intro_content.txt: 
2023-04-04 11:10:36,969 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:10:39,231 - INFO - Processed paragraph 9 in 0_apex_testing_apex_testing_intro_content.txt: Resources
  
  
    
      
        Apex Developer Guide: Testing Best Practices
        Apex Developer Guide: What Are Apex Unit Tests?
        Apex Developer Guide: Isolation of Test Data from Organization Data in Unit Tests
        Salesforce Help: Checking Code Coverage
2023-04-04 11:10:39,232 - INFO - No related goals found
2023-04-04 11:11:00,645 - INFO - Processed paragraph 10 in 0_apex_testing_apex_testing_intro_content.txt: 
2023-04-04 11:11:00,645 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:11:23,742 - INFO - Processed paragraph 0 in 0_apex_triggers_apex_triggers_intro_content.txt: 
2023-04-04 11:11:23,742 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:11:28,772 - INFO - Processed paragraph 1 in 0_apex_triggers_apex_triggers_intro_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Write a trigger for a Salesforce object.
        Use trigger context variables.
        Call a class method from a trigger.
        Use the sObject addError() method in a trigger to restrict save operations.
      
      
        Before You Begin
      
      Apex triggers are useful, fun, and groovy. While this module helps you get started with them, it also references other Salesforce features to show you the power of Apex triggers. To get the most out of this module, we highly recommend you check out these modules first:
      
        Quick Start: Apex
        Apex Basics and Database
        SOQL for Admins
        Developer Console Basics
2023-04-04 11:11:28,773 - INFO - Related goals: 7
2023-04-04 11:11:52,882 - INFO - Processed paragraph 2 in 0_apex_triggers_apex_triggers_intro_content.txt: 
2023-04-04 11:11:52,882 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:11:54,698 - INFO - Processed paragraph 3 in 0_apex_triggers_apex_triggers_intro_content.txt: Writing Apex Triggers
  
  
    Apex triggers enable you to perform custom actions before or after events to records in Salesforce, such as insertions, updates, or deletions. Just like database systems support triggers, Apex provides trigger support for managing records.
    
    Typically, you use triggers to perform operations based on specific conditions, to modify related records or restrict certain operations from happening. You can use triggers to do anything you can do in Apex, including executing SOQL and DML or calling custom Apex methods.
    
    Use triggers to perform tasks that can’t be done by using the point-and-click tools in the Salesforce user interface. For example, if validating a field value or updating a field on a record, use validation rules and flows instead
    
    Triggers can be defined for top-level standard objects, such as Account or Contact, custom objects, and some standard child objects. Triggers are active by default when created. Salesforce automatically fires active triggers when the specified database events occur.
    
      Trigger Syntax
    
    
      The syntax of a trigger definition is different from a class definition’s syntax. A trigger definition starts with the trigger keyword. It is then followed by the name of the trigger, the Salesforce object that the trigger is associated with, and the conditions under which it fires. A trigger has the following syntax:
2023-04-04 11:11:54,698 - INFO - Related goals: 9
2023-04-04 11:12:12,274 - INFO - Processed paragraph 4 in 0_apex_triggers_apex_triggers_intro_content.txt: trigger TriggerName on ObjectName (trigger_events) {
   code_block
}Copy
        
      
      To execute a trigger before or after insert, update, delete, and undelete operations, specify multiple trigger events in a comma-separated list. The events you can specify are:
          before insert
          before update
          before delete
          after insert
          after update
          after delete
          after undelete
        
      
    
    
      
        Trigger Example
      
      
        This simple trigger fires before you insert an account and writes a message to the debug log.
            In the Developer Console, click File | New | Apex Trigger.
            Enter HelloWorldTrigger for the trigger name, and then select Account for the sObject. Click Submit.
            Replace the default code with the following.trigger HelloWorldTrigger on Account (before insert) {
	System.debug('Hello World!');
}Copy
            
            To save, press Ctrl+S.
            To test the trigger, create an account.
                Click Debug | Open Execute Anonymous Window.
                In the new window, add the following and then click Execute.Account a = new Account(Name='Test Trigger');
insert a;Copy
                
              
            
            In the debug log, find the Hello World! statement. The log also shows that the trigger has been executed.
          
        
      
    
    
      
        Types of Triggers
      
      There are two types of triggers.
      
        
Before triggers are used to update or validate record values before they’re saved to the database.
        
After triggers are used to access field values that are set by the system (such as a record's Id or LastModifiedDate field), and to affect changes in other records. The records that fire the after trigger are read-only.
      
    
    
      
        Using Context Variables
      
      To access the records that caused the trigger to fire, use context variables. For example, Trigger.new contains all the records that were inserted in insert or update triggers. Trigger.old provides the old version of sObjects before they were updated in update triggers, or a list of deleted sObjects in delete triggers. Triggers can fire when one record is inserted, or when many records are inserted in bulk via the API or Apex. Therefore, context variables, such as Trigger.new, can contain only one record or multiple records. You can iterate over Trigger.new to get each individual sObject.
      This example is a modified version of the HelloWorldTrigger example trigger. It iterates over each account in a for loop and updates the Description field for each.
      
trigger HelloWorldTrigger on Account (before insert) {
    for(Account a : Trigger.new) {
        a.Description = 'New description';
    }   
}Copy
      
      
        
          
            
              
              
                
                  The system saves the records that fired the before trigger after the trigger finishes execution. You can modify the records in the trigger without explicitly calling a DML insert or update operation. If you perform DML statements on those records, you get an error.
                
              
            
          
        
      
      Some other context variables return a Boolean value to indicate whether the trigger was fired due to an update or some other event. These variables are useful when a trigger combines multiple events. For example:
      
trigger ContextExampleTrigger on Account (before insert, after insert, after delete) {
    if (Trigger.isInsert) {
        if (Trigger.isBefore) {
            // Process before insert
        } else if (Trigger.isAfter) {
            // Process after insert
        }        
    }
    else if (Trigger.isDelete) {
        // Process after delete
    }
}Copy
2023-04-04 11:12:12,276 - INFO - Related goals: 1, 2, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 22
2023-04-04 11:12:16,796 - INFO - Processed paragraph 5 in 0_apex_triggers_apex_triggers_intro_content.txt: The following table is a comprehensive list of all context variables available for triggers.
      
        
          
            
              Variable
              Usage
            
          
          
            
              isExecuting
              Returns true if the current context for the Apex code is a trigger, not a Visualforce page, a Web service, or an executeanonymous() API call.
            
            
              isInsert
              Returns true if this trigger was fired due to an insert operation, from the Salesforce user interface, Apex, or the API.
            
            
              isUpdate
              Returns true if this trigger was fired due to an update operation, from the Salesforce user interface, Apex, or the API.
            
            
              isDelete
              Returns true if this trigger was fired due to a delete operation, from the Salesforce user interface, Apex, or the API.
            
            
              isBefore
              Returns true if this trigger was fired before any record was saved.
            
            
              isAfter
              Returns true if this trigger was fired after all records were saved.
            
            
              isUndelete
              Returns true if this trigger was fired after a record is recovered from the Recycle Bin. This recovery can occur after an undelete operation from the Salesforce user interface, Apex, or the API.
            
            
              new
              Returns a list of the new versions of the sObject records.
                This sObject list is only available in insert, update, and undelete triggers, and the records can only be modified in before triggers.
              
            
            
              newMap
              A map of IDs to the new versions of the sObject records.
                This map is only available in before update, after insert, after update, and after undelete triggers.
              
            
            
              old
              Returns a list of the old versions of the sObject records.
                This sObject list is only available in update and delete triggers.
              
            
            
              oldMap
              A map of IDs to the old versions of the sObject records.
                This map is only available in update and delete triggers.
              
            
            
              operationType
              Returns an enum of type System.TriggerOperation corresponding to the current operation.
                Possible values of the System.TriggerOperation enum are: BEFORE_INSERT, BEFORE_UPDATE, BEFORE_DELETE, AFTER_INSERT, AFTER_UPDATE, AFTER_DELETE, and AFTER_UNDELETE. If you vary your programming logic based on different trigger types, consider using the switch statement with different permutations of unique trigger execution enum states.
              
            
            
              size
              The total number of records in a trigger invocation, both old and new.
            
          
        
      
    
    
      
        Calling a Class Method from a Trigger
      
      You can call public utility methods from a trigger. Calling methods of other classes enables code reuse, reduces the size of your triggers, and improves maintenance of your Apex code. It also allows you to use object-oriented programming.
      The following example trigger shows how to call a static method from a trigger. If the trigger was fired because of an insert event, the example calls the static sendMail() method on the EmailManager class. This utility method sends an email to the specified recipient and contains the number of contact records inserted.
      
        
          
            
              
              
                
                  The EmailManager class is included in the class example of the Get Started with Apex unit. You must have saved the EmailManager class in your org and changed the sendMail() method to static before saving this trigger.
                
              
            
          
        
      
      
        In the Developer Console, click File | New | Apex Trigger.
        Enter ExampleTrigger for the trigger name, and then select Contact for the sObject. Click Submit.
        Replace the default code with the following, and then modify the email address placeholder text in sendMail()to your email address.trigger ExampleTrigger on Contact (after insert, after delete) {
    if (Trigger.isInsert) {
        Integer recordCount = Trigger.new.size();
        // Call a utility method from another class
        EmailManager.sendMail('Your email address', 'Trailhead Trigger Tutorial', 
                    recordCount + ' contact(s) were inserted.');
    }
    else if (Trigger.isDelete) {
        // Process after delete
    }
}Copy
        
        To save, press Ctrl+S.
        To test the trigger, create a contact.
            Click Debug | Open Execute Anonymous Window.
            In the new window, add the following and then click Execute.Contact c = new Contact(LastName='Test Contact');
insert c;Copy
            
          
        
        In the debug log, check that the trigger was fired. Toward the end of the log, find the debug message that was written by the utility method: DEBUG|Email sent successfully
2023-04-04 11:12:16,798 - INFO - Related goals: 7
2023-04-04 11:12:18,237 - INFO - Processed paragraph 6 in 0_apex_triggers_apex_triggers_intro_content.txt: Now check that you received an email with the body text 1 contact(s) were inserted.With your new trigger in place, you get an email every time you add one or more contacts!
      
    
    
      
        Adding Related Records
      
      Triggers are often used to access and manage records related to the records in the trigger context—the records that caused this trigger to fire.
      This trigger adds a related opportunity for each new or updated account if no opportunity is already associated with the account. The trigger first performs a SOQL query to get all child opportunities for the accounts that the trigger fired on. Next, the trigger iterates over the list of sObjects in Trigger.new to get each account sObject. If the account doesn’t have any related opportunity sObjects, the for loop creates one. If the trigger created any new opportunities, the final statement inserts them.
      
        Add the following trigger using the Developer Console (follow the steps of the HelloWorldTrigger example but use AddRelatedRecordfor the trigger name).trigger AddRelatedRecord on Account(after insert, after update) {
    List&lt;Opportunity&gt; oppList = new List&lt;Opportunity&gt;();
    // Get the related opportunities for the accounts in this trigger
    Map&lt;Id,Account&gt; acctsWithOpps = new Map&lt;Id,Account&gt;(
        [SELECT Id,(SELECT Id FROM Opportunities) FROM Account WHERE Id IN :Trigger.new]);
    // Add an opportunity for each account if it doesn't already have one.
    // Iterate through each account.
    for(Account a : Trigger.new) {
        System.debug('acctsWithOpps.get(a.Id).Opportunities.size()=' + acctsWithOpps.get(a.Id).Opportunities.size());
        // Check if the account already has a related opportunity.
        if (acctsWithOpps.get(a.Id).Opportunities.size() == 0) {
            // If it doesn't, add a default opportunity
            oppList.add(new Opportunity(Name=a.Name + ' Opportunity',
                                       StageName='Prospecting',
                                       CloseDate=System.today().addMonths(1),
                                       AccountId=a.Id));
        }           
    }
    if (oppList.size() &gt; 0) {
        insert oppList;
    }
}Copy
        
        To test the trigger, create an account in the Salesforce user interface and name it Apples &amp; Oranges.
        In the Opportunities related list on the account’s page, find the new opportunity. The trigger added this opportunity automatically!
      
      
        
          
            
              
              
                
                  The trigger you’ve added iterates over all records that are part of the trigger context—the for loop iterates over Trigger.new. However, the loop in this trigger could be more efficient. We don’t really need to access every account in this trigger context, but only a subset—the accounts without opportunities. The next unit shows how to make this trigger more efficient. In the Bulk Trigger Design Patterns unit, learn how to modify the SOQL query to get only the accounts with no opportunities. Then, learn to iterate only over those records.
                
              
            
          
        
      
      
        Using Trigger Exceptions
      
    
    
      You sometimes need to add restrictions on certain database operations, such as preventing records from being saved when certain conditions are met. To prevent saving records in a trigger, call the addError() method on the sObject in question. The addError() method throws a fatal error inside a trigger. The error message is displayed in the user interface and is logged.
      The following trigger prevents the deletion of an account if it has related opportunities. By default, deleting an account causes a cascade delete of all its related records. This trigger prevents the cascade delete of opportunities. Try this trigger for yourself! If you’ve executed the previous example, your org has an account called Apples &amp; Oranges&nbsp;with a related opportunity. This example uses that sample account.
      
        Using the Developer Console, add the following trigger.trigger AccountDeletion on Account (before delete) {
    // Prevent the deletion of accounts if they have related opportunities.
    for (Account a : [SELECT Id FROM Account
                     WHERE Id IN (SELECT AccountId FROM Opportunity) AND
                     Id IN :Trigger.old]) {
        Trigger.oldMap.get(a.Id).addError(
            'Cannot delete account with related opportunities.');
    }
}Copy
        
        In the Salesforce user interface, navigate to the Apples &amp; Oranges account’s page and click Delete.
        In the confirmation popup, click OK.Find the validation error with the custom error message Cannot delete account with related opportunities.
2023-04-04 11:12:18,238 - INFO - Related goals: 8
2023-04-04 11:12:24,356 - INFO - Processed paragraph 7 in 0_apex_triggers_apex_triggers_intro_content.txt: Disable the AccountDeletiontrigger. If you leave this trigger active, you can’t check your challenges.
            From Setup, search for Apex Triggers.
            On the Apex Triggers page, click Edit next to the AccountDeletion trigger.
            Deselect Is Active.
            Click Save.
          
        
      
    
    
      
        
          
            
              
              
                 Calling addError()in a trigger causes the entire set of operations to roll back, except when bulk DML is called with partial success.
                    If a bulk DML call in the Lightning Platform API spawned the trigger, the runtime engine sets the bad records aside. The runtime engine then attempts a partial save of the records that did not generate errors.
                    
                      If a DML statement in Apex spawned the trigger, any error rolls back the entire operation. However, the runtime engine still processes every record in the operation to compile a comprehensive list of errors.
                    
                  
                
              
            
          
        
      
      
        Triggers and Callouts
      
      Apex allows you to make calls to and integrate your Apex code with external Web services. Apex calls to external Web services are referred to as callouts. For example, you can make a callout to a stock quote service to get the latest quotes. When making a callout from a trigger, the callout must be done asynchronously so that the trigger process doesn’t block you from working while waiting for the external service's response. The asynchronous callout is made in a background process, and the response is received when the external service returns it.
      To make a callout from a trigger, call a class method that executes asynchronously. Such a method is called a future method and is annotated with @future(callout=true). This example class contains the future method that makes the callout.
      
        
          
            
              
              
                
                  The example uses a hypothetical endpoint URL for illustration purposes only. You can’t run this example unless you change the endpoint to a valid URL and add a remote site in Salesforce for your endpoint.
                
              
            
          
        
      
      
public class CalloutClass {
    @future(callout=true)
    public static void makeCallout() {
        HttpRequest request = new HttpRequest();
        // Set the endpoint URL.
        String endpoint = 'http://yourHost/yourService';
        request.setEndPoint(endpoint);
        // Set the HTTP verb to GET.
        request.setMethod('GET');
        // Send the HTTP request and get the response.
        HttpResponse response = new HTTP().send(request);
    }
}Copy
      
      This example shows the trigger that calls the method in the class to make a callout asynchronously.
      
trigger CalloutTrigger on Account (before insert, before update) {
    CalloutClass.makeCallout();
}Copy
      
      This section offers only an overview of callouts and is not intended to cover callouts in detail. For more information, see Invoking Callouts Using Apex in the Apex Developer Guide.
2023-04-04 11:12:24,357 - INFO - Related goals: 1, 2, 3, 8, 9, 12, 13, 18, 19
2023-04-04 11:12:26,198 - INFO - Processed paragraph 8 in 0_apex_triggers_apex_triggers_intro_content.txt: 
2023-04-04 11:12:26,198 - INFO - Related goals: 1, 8, 18
2023-04-04 11:12:27,237 - INFO - Processed paragraph 9 in 0_apex_triggers_apex_triggers_intro_content.txt: Resources
  
  
    Apex Developer Guide: Triggers
    Apex Developer Guide: Invoking Callouts Using Apex
    Trailhead: Apex Integration Services
2023-04-04 11:12:27,237 - INFO - No related goals found
2023-04-04 11:12:28,721 - INFO - Processed paragraph 10 in 0_apex_triggers_apex_triggers_intro_content.txt: 
2023-04-04 11:12:28,721 - INFO - Related goals: 9
2023-04-04 11:12:33,739 - INFO - Processed paragraph 0 in 0_asynchronous_apex_async_apex_introduction_content.txt: 
2023-04-04 11:12:33,740 - INFO - Related goals: 2, 8
2023-04-04 11:12:35,197 - INFO - Processed paragraph 1 in 0_asynchronous_apex_async_apex_introduction_content.txt: Learning Objectives
    
    
      After completing this unit, you’ll be able to: 
        
          Explain the difference between synchronous and asynchronous processing.
          Choose which kind of asynchronous Apex to use in various scenarios.
2023-04-04 11:12:35,197 - INFO - No related goals found
2023-04-04 11:12:58,569 - INFO - Processed paragraph 2 in 0_asynchronous_apex_async_apex_introduction_content.txt: 
2023-04-04 11:12:58,569 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:13:01,269 - INFO - Processed paragraph 3 in 0_asynchronous_apex_async_apex_introduction_content.txt: Asynchronous Apex
  
  
    In a nutshell, asynchronous Apex is used to run processes in a separate thread, at a later time.
    An asynchronous process is a process or function that executes a task "in the background" without the user having to wait for the task to finish.
    Here’s a real-world example. Let’s say you have a list of things to accomplish before your weekly Dance Revolution practice. Your car is making a funny noise, you need a different color hair gel and you have to pick up your uniform from your mom’s house. You could take your car to the mechanic and wait until it is fixed before completing the rest of your list (synchronous processing), or you could leave it there and get your other things done, and have the shop call you when it’s fixed (asynchronous processing). If you want to be home in time to iron your spandex before practice, asynchronous processing allows you to get more stuff done in the same amount of time without the needless waiting.
    You’ll typically use Asynchronous Apex for callouts to external systems, operations that require higher limits, and code that needs to run at a certain time. The key benefits of asynchronous processing include:
User efficiency
    Let's say you have a process that makes many calculations on a custom object whenever an Opportunity is created. The time needed to execute these calculations could range from a minor annoyance to a productivity blocker for the user. Since these calculations don't affect what the user is currently doing, making them wait for a long running process is not an efficient use of their time. With asynchronous processing the user can get on with their work, the processing can be done in the background and the user can see the results at their convenience.
Scalability
    By allowing some features of the platform to execute when resources become available at some point in the future, resources can be managed and scaled quickly. This allows the platform to handle more jobs using parallel processing.
Higher Limits
    Asynchronous processes are started in a new thread, with higher governor and execution limits. And to be honest, doesn’t everyone want higher governor and execution limits?
    Asynchronous Apex comes in a number of different flavors. We’ll get into more detail for each one shortly, but here’s a high level overview.
    
      
        
          
            Type
            Overview
            Common Scenarios
          
        
        
          
            Future Methods
            Run in their own thread, and do not start until resources are available.
            Web service callout.
          
          
            Batch Apex
            Run large jobs that would exceed normal processing limits.
            Data cleansing or archiving of records.
          
          
            Queueable Apex
            Similar to future methods, but provide additional job chaining and allow more complex data types to be used.
            Performing sequential processing operations with external Web services.
          
          
            Scheduled Apex
            Schedule Apex to run at a specified time.
            Daily or weekly tasks.
          
        
      
    
    It’s also worth noting that these different types of asynchronous operations are not mutually exclusive. For instance, a common pattern is to kick off a Batch Apex job from a Scheduled Apex job.
2023-04-04 11:13:01,270 - INFO - No related goals found
2023-04-04 11:13:07,473 - INFO - Processed paragraph 4 in 0_asynchronous_apex_async_apex_introduction_content.txt: 
2023-04-04 11:13:07,474 - INFO - Related goals: 5
2023-04-04 11:13:08,670 - INFO - Processed paragraph 5 in 0_asynchronous_apex_async_apex_introduction_content.txt: Follow Along with Trail Together
  
  Want to follow along with an instructor as you work through this step? Take a look at this video, part of the Trail Together series on Trailhead Live. You can find a link to the full session in the Resources section.&nbsp;
2023-04-04 11:13:08,671 - INFO - No related goals found
2023-04-04 11:13:10,203 - INFO - Processed paragraph 6 in 0_asynchronous_apex_async_apex_introduction_content.txt: Increased Governor and Execution Limits
  
  
    One of the main benefits of running asynchronous Apex is higher governor and execution limits. For example, the number of SOQL queries is doubled from 100 to 200 queries when using asynchronous calls. The total heap size and maximum CPU time are similarly larger for asynchronous calls.
    Not only do you get higher limits with async, but also those governor limits are independent of the limits in the synchronous request that queued the async request initially. That’s a mouthful, but essentially, you have two separate Apex invocations, and more than double the processing capability. This comes in handy for instances when you want to do as much processing as you can in the current transaction but when you start to get close to governor limits, continue asynchronously.
    If you enjoy reading about heap sizes, maximum execution times and limits in general, see Execution Governors and Limits  for compelling details.
2023-04-04 11:13:10,203 - INFO - Related goals: 1, 10
2023-04-04 11:13:13,960 - INFO - Processed paragraph 7 in 0_asynchronous_apex_async_apex_introduction_content.txt: 
2023-04-04 11:13:13,960 - INFO - Related goals: 1, 5, 15
2023-04-04 11:13:16,470 - INFO - Processed paragraph 8 in 0_asynchronous_apex_async_apex_introduction_content.txt: How Asynchronous Processing Works
  
  
    Asynchronous processing, in a multitenant environment, presents some challenges:
Ensure fairness of processing
    Make sure every customer gets a fair share of processing resources.
Ensure fault tolerance
    Make sure no asynchronous requests are lost due to equipment or software failures.The platform uses a queue-based asynchronous processing framework. This framework is used to manage asynchronous requests for multiple organizations within each instance. The request lifecycle is made up of three parts:
Enqueue
    The request gets put into the queue. This could be an Apex batch request, future Apex request or one of many others. The platform will enqueue requests along with the appropriate data to process that request.
Persistence
    The enqueued request is persisted. Requests are stored in persistent storage for failure recovery and to provide transactional capabilities.
Dequeue
    The enqueued request is removed from the queue and processed. If the processing fails, transaction control ensures that requests are not lost.Each request is processed by a handler. The handler is the code that performs functions for a specific request type. Handlers are executed by a finite number of worker threads on each of the application servers that make up an instance. The threads request work from the queuing framework and when received, start a specific handler to do the work.
2023-04-04 11:13:16,471 - INFO - Related goals: 1
2023-04-04 11:13:38,293 - INFO - Processed paragraph 9 in 0_asynchronous_apex_async_apex_introduction_content.txt: 
2023-04-04 11:13:38,293 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:13:39,433 - INFO - Processed paragraph 10 in 0_asynchronous_apex_async_apex_introduction_content.txt: Resource Conservation
  
  
    Asynchronous processing has lower priority than real-time interaction via the browser and API. To ensure there are sufficient resources to handle an increase in computing resources, the queuing framework monitors system resources such as server memory and CPU usage and reduce asynchronous processing when thresholds are exceeded. This is a fancy way of saying that the multitenant system protects itself. If an org tries to “gobble up” more than its share of resources, asynchronous processing is suspended until a normal threshold is reached. The long and short of it is that there’s no guarantee on processing time, but it’ll all work out in the end.
2023-04-04 11:13:39,433 - INFO - No related goals found
2023-04-04 11:13:41,650 - INFO - Processed paragraph 11 in 0_asynchronous_apex_async_apex_introduction_content.txt: 
2023-04-04 11:13:41,650 - INFO - Related goals: 2
2023-04-04 11:13:42,805 - INFO - Processed paragraph 12 in 0_asynchronous_apex_async_apex_introduction_content.txt: Resources
  
  
    
      
        Trailhead Live: Trail Together - Asynchronous Apex
        
Apex Developer Guide: Execution Governors and Limits
2023-04-04 11:13:42,805 - INFO - No related goals found
2023-04-04 11:13:44,628 - INFO - Processed paragraph 13 in 0_asynchronous_apex_async_apex_introduction_content.txt: 
2023-04-04 11:13:44,628 - INFO - No related goals found
2023-04-04 11:14:03,911 - INFO - Processed paragraph 14 in 0_asynchronous_apex_async_apex_introduction_content.txt: 
2023-04-04 11:14:03,912 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:14:09,380 - INFO - Processed paragraph 0 in 0_cli-basics_cli-1_content.txt: 
2023-04-04 11:14:09,380 - INFO - Related goals: 3
2023-04-04 11:14:11,453 - INFO - Processed paragraph 1 in 0_cli-basics_cli-1_content.txt: Learning Objectives
2023-04-04 11:14:11,453 - INFO - No related goals found
2023-04-04 11:14:13,791 - INFO - Processed paragraph 2 in 0_cli-basics_cli-1_content.txt: After completing this unit, you’ll be able to:&nbsp;
2023-04-04 11:14:13,791 - INFO - No related goals found
2023-04-04 11:14:14,875 - INFO - Processed paragraph 3 in 0_cli-basics_cli-1_content.txt: Explain what the command-line interface is.
  Identify the different shells for each operating system (OS).
2023-04-04 11:14:14,875 - INFO - No related goals found
2023-04-04 11:14:16,272 - INFO - Processed paragraph 4 in 0_cli-basics_cli-1_content.txt: Introduction
2023-04-04 11:14:16,272 - INFO - No related goals found
2023-04-04 11:14:17,333 - INFO - Processed paragraph 5 in 0_cli-basics_cli-1_content.txt: If you’re new to working in the command-line tool, you’ve landed on the right badge. Developers commonly work in the command-line tool when coding projects such as Lightning Web Components. The text-based interface gives you the ability to enable developer packages with your project seamlessly. In this module, we aim to demystify the command-line tool and give you some commands you can use today. &nbsp;&nbsp;
Let’s first learn what the command-line tool is.
2023-04-04 11:14:17,333 - INFO - No related goals found
2023-04-04 11:14:18,393 - INFO - Processed paragraph 6 in 0_cli-basics_cli-1_content.txt: Command-Line Interface (CLI)
2023-04-04 11:14:18,393 - INFO - No related goals found
2023-04-04 11:14:19,514 - INFO - Processed paragraph 7 in 0_cli-basics_cli-1_content.txt: When you work within a software program or within your Salesforce org, you use the graphic user interface (GUI). A GUI is an interface, comprising of screens, buttons, and a menu (or two). The GUI makes it easy for you to do basic tasks, such as navigation and database updates. You may be surprised to learn that you use a GUI every day!
The command-line tool is a text-based interface. Instead of buttons or multiple screens, you write commands in the command-line tool, which lets you interact with your computer or software program directly. You may be wondering, if a GUI is user friendly, why do developers need the command-line tool?&nbsp;
2023-04-04 11:14:19,514 - INFO - No related goals found
2023-04-04 11:14:20,752 - INFO - Processed paragraph 8 in 0_cli-basics_cli-1_content.txt: Command-Line Uses
2023-04-04 11:14:20,752 - INFO - No related goals found
2023-04-04 11:14:21,853 - INFO - Processed paragraph 9 in 0_cli-basics_cli-1_content.txt: With the command-line interface, you can do complex actions quickly. The command-line interface is also customizable with plug-ins and packages, which gives you the flexibility to customize your development workspace tools. With the command-line tool, you execute scripts, create directories, and interact with tools such as Git where you can build and work on source-driven development projects or CI integrations.&nbsp;
2023-04-04 11:14:21,854 - INFO - No related goals found
2023-04-04 11:14:22,903 - INFO - Processed paragraph 10 in 0_cli-basics_cli-1_content.txt: Where Is the Command-Line Tool?
2023-04-04 11:14:22,903 - INFO - No related goals found
2023-04-04 11:14:23,926 - INFO - Processed paragraph 11 in 0_cli-basics_cli-1_content.txt: The operating system (OS) you work on determines where the command-line tool is located. Your OS has a command-line tool included with the machine. Let’s find the tool on your machine.
macOS/Linux
The primary command-line tool for macOs and Linux is Terminal. To work with the command-line tool, open the Terminal application.&nbsp;
2023-04-04 11:14:23,926 - INFO - No related goals found
2023-04-04 11:14:25,000 - INFO - Processed paragraph 12 in 0_cli-basics_cli-1_content.txt: Open Finder.
  In the search field, type Terminal, or click the terminal icon to open the application.
2023-04-04 11:14:25,000 - INFO - No related goals found
2023-04-04 11:14:26,154 - INFO - Processed paragraph 13 in 0_cli-basics_cli-1_content.txt: Windows&nbsp;
The primary command-line tool for Windows is Command Prompt. To work with the command-line tool, open the Command Prompt application.
2023-04-04 11:14:26,155 - INFO - No related goals found
2023-04-04 11:14:28,147 - INFO - Processed paragraph 14 in 0_cli-basics_cli-1_content.txt: Click Start, type command or cmd in the search field and press Enter.
  Click Command Prompt shortcut to open the tool.
2023-04-04 11:14:28,147 - INFO - No related goals found
2023-04-04 11:14:30,915 - INFO - Processed paragraph 15 in 0_cli-basics_cli-1_content.txt: You can also use the terminal window through a code editing tool.
Code Editor Terminal Window
Code editors, such as Atom or Visual Studio Code (VS Code), have built-in terminal windows. We recommend using Visual Studio Code (VS Code) terminal window to run commands and work with the Salesforce CLI. The built-in terminal window gives you the ability to code your project and have the terminal window readily available. With a code editor terminal window, like VS Code, you can install packages that give your commands super powers (such as Salesforce Extensions in VS Code).
2023-04-04 11:14:30,915 - INFO - No related goals found
2023-04-04 11:14:32,021 - INFO - Processed paragraph 16 in 0_cli-basics_cli-1_content.txt: What Is a Shell?
2023-04-04 11:14:32,021 - INFO - No related goals found
2023-04-04 11:14:33,062 - INFO - Processed paragraph 17 in 0_cli-basics_cli-1_content.txt: The command-line window isn’t just a plain command-line interface where you enter text. Behind the window is a command-line interpreter, or shell, processing the commands you run.&nbsp;
A shell is a program that interprets and executes the commands entered in the command-line interface. It helps to know what shell you’re using, so you know what commands to enter and which scripting syntax to follow. For this badge, we focus on the default shells for macOS and Windows.
2023-04-04 11:14:33,063 - INFO - No related goals found
2023-04-04 11:14:34,157 - INFO - Processed paragraph 18 in 0_cli-basics_cli-1_content.txt: Different Types of Shells
2023-04-04 11:14:34,157 - INFO - No related goals found
2023-04-04 11:14:35,204 - INFO - Processed paragraph 19 in 0_cli-basics_cli-1_content.txt: There are many types of shells that offer different features and functionalities. The most common shell for Windows is PowerShell. The most common shell for macOS is Zsh or z shell. Z shell is a unix shell that extends Bourne shell functionality (also known as BASH shell) with improvements. Let’s learn more about the BASH shell.&nbsp;
BASH is an acronym that stands for bourne-again shell (bash). A clever play off the name of the predecessor shell, the Bourne shell (sh). Like the predecessor, BASH follows the language and syntax called the Shell Command Language as defined by POSIX. BASH comes with many features and functionalities. Z shell extends BASH functionality. Most developer tools, like npm, integrate with z shell seamlessly. This is why BASH (and now z shell) are the most commonly used shells in developer tutorials. There is also CSH (C Shell), a Unix shell, has a C-like programming syntax with built in arithmetics, and can also execute commands from a text file.
Each shell has its own syntax and capabilities that let them perform a variety of different tasks. If you don’t have ZSH, with a bit of searching, you can install these shells on your local machine. For now, let’s focus on PowerShell for Windows and ZSH for macOS and Linux.
2023-04-04 11:14:35,204 - INFO - No related goals found
2023-04-04 11:14:36,832 - INFO - Processed paragraph 20 in 0_cli-basics_cli-1_content.txt: Know How PowerShell and ZSH Differ
2023-04-04 11:14:36,832 - INFO - No related goals found
2023-04-04 11:14:37,861 - INFO - Processed paragraph 21 in 0_cli-basics_cli-1_content.txt: There is a notable difference between PowerShell (Windows) and ZSH (macOS and Linux). Besides the difference in how the commands are written for each OS, the features and output of each shell also vary. Most notably, ZSH treats outputs as strings such as writing to .txt files. Whereas PowerShell treats the output as objects.
When the output is a string, it’s often easier for the user to transfer information across programs. This variable output becomes especially important when writing and running scripts or when working with APIs since those are typically in a .txt or format that supports strings. &nbsp;
The commands throughout this module are written for each OS using the default shells identified above. Next, we go over command structure and practice running commands&nbsp;
2023-04-04 11:14:37,861 - INFO - No related goals found
2023-04-04 11:14:39,629 - INFO - Processed paragraph 22 in 0_cli-basics_cli-1_content.txt: Resources
2023-04-04 11:14:39,629 - INFO - No related goals found
2023-04-04 11:14:40,733 - INFO - Processed paragraph 23 in 0_cli-basics_cli-1_content.txt: External Site: The Open Group (Shell Command Language)
  External Site: npm
2023-04-04 11:14:40,733 - INFO - No related goals found
2023-04-04 11:14:41,818 - INFO - Processed paragraph 24 in 0_cli-basics_cli-1_content.txt: 
2023-04-04 11:14:41,818 - INFO - Related goals: 1, 2, 22
2023-04-04 11:14:49,563 - INFO - Processed paragraph 0 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:14:49,563 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:14:51,494 - INFO - Processed paragraph 1 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll be able to:
    
      Describe the perks of using objects on the Salesforce platform.
      Explain the difference between standard objects and custom objects.
      List the types of custom fields an object can have.
2023-04-04 11:14:51,494 - INFO - Related goals: 2, 22
2023-04-04 11:15:14,564 - INFO - Processed paragraph 2 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:15:14,564 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:15:16,382 - INFO - Processed paragraph 3 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Accessibility
              
              This unit requires some additional instructions for screen reader users. To access a detailed screen reader version of this unit, click the link below:
              Open Trailhead screen reader instructions.
            
          
        
      
    
  
  
    Overview of Objects
  
  
    DreamHouse is a realty company that provides a way for customers to shop for homes and contact real estate agents online. DreamHouse brokers use some of Salesforce’s standard functionality, like contacts and leads, to track home buyers.
    But when it comes to selling houses, there are a lot more things they want to track. For example, Salesforce doesn’t include a standard way to track properties. How is DreamHouse supposed to know which homes they have for sale or how much each home costs?
    Luckily, the Salesforce admin, D’Angelo, knows that the Salesforce platform offers a solution. We’ll work with D’Angelo to see what he’s building.
    Let’s start with the data model. A data model is more or less what it sounds like. It’s a way to model what database tables look like in a way that makes sense to humans.
    If you’re not familiar with databases, think about storing data in a spreadsheet. For example, D’Angelo can use a spreadsheet to track all DreamHouse’s properties. Columns can store the address, cost, and other important attributes. Rows can store this information for each property that DreamHouse is selling. Database tables are set up in a similar way.
    
    But looking at data in tables isn’t ideal for humans. That’s where the data model comes in.
    In Salesforce, we think about database tables as objects, we think about columns as fields, and rows as records. So instead of an account spreadsheet or table, we have an Account object with fields and a bunch of identically structured records.
    
    When we talk about the data model, we’re talking about the collection of objects and fields in an app. Let’s learn more about objects and fields so you can start building your own data model.
2023-04-04 11:15:16,383 - INFO - Related goals: 3
2023-04-04 11:15:20,660 - INFO - Processed paragraph 4 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:15:20,660 - INFO - Related goals: 2
2023-04-04 11:15:22,854 - INFO - Processed paragraph 5 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Get to Know Objects
  
  
    Salesforce supports several different types of objects. There are standard objects, custom objects, external objects, platform events, and BigObjects. In this module, we focus on the two most common types of objects: standard and custom.
    Standard objects are objects that are included with Salesforce. Common business objects like Account, Contact, Lead, and Opportunity are all standard objects.
    Custom objects are objects that you create to store information that’s specific to your company or industry. For DreamHouse, D’Angelo wants to build a custom Property object that stores information about the homes his company is selling.
    Objects are containers for your information, but they also give you special functionality. For example, when you create a custom object, the platform automatically builds things like the page layout for the user interface.
2023-04-04 11:15:22,854 - INFO - Related goals: 3
2023-04-04 11:15:45,478 - INFO - Processed paragraph 6 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:15:45,478 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:15:47,632 - INFO - Processed paragraph 7 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Create a Custom Object
  
  
    
      Let’s work alongside D’Angelo to see how he builds the Property object. We need this object later, so don’t skip these steps!
    
    
      Scroll to the bottom of this page and create a trailhead playground. Don’t skip this step! You need to use a fresh and clean Trailhead Playground for this module.Note: Even if you're completing this module as part of the Admin Beginner trail, be sure and create a new Trailhead Playground to complete these steps. You don't need to reinstall the Dreamhouse app in the new playground org.
      Once your playground is created (it takes a minute!), press Launch.
      Click the gear icon &nbsp;at the top of the page and launch setup.
      Click the Object Manager tab.
      Click Create | Custom Object in the top-right corner.
      For Label, enter Property. Notice that the Object Name and Record Name fields auto-fill.
      For Plural Label, enter Properties.
      Prior to saving the custom object, scroll to the bottom of the page and select the checkbox Launch New Custom Tab Wizard after saving this custom object.
      Leave the rest of the values as default and click Save.
      On the New Custom Object Tab page, click the Tab Style field and select a style you like. The style sets the icon to display in the UI for the object.
      Click Next, Next, and Save.
    
    
      Great job! You just created your first custom object. Now, let’s talk about adding fields to this object.
2023-04-04 11:15:47,633 - INFO - Related goals: 3
2023-04-04 11:15:49,455 - INFO - Processed paragraph 8 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:15:49,456 - INFO - Related goals: 3
2023-04-04 11:15:50,552 - INFO - Processed paragraph 9 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Get to Know Fields
  
  
    Every standard and custom object has fields attached to it. Let’s get familiar with the different types of fields.
    
      
        
          
            
              Field Type
              What is it?
              Can I get an example?
            
          
          
            
              Identity
              A 15-character, case-sensitive field that’s automatically generated for every record. You can find a record’s ID in its URL.
              An account ID looks like 0015000000Gv7qJ.
            
            
              System
              Read-only fields that provide information about a record from the system, like when the record was created or when it was last changed.
              
CreatedDate, LastModifiedById, and LastModifiedDate.
            
            
              Name
              All records need names so you can distinguish between them. You can use text names or auto-numbered names that automatically increment every time you create a record.
              A contact’s name can be Julie Bean. A support case’s name can be CA-1024.
            
            
              Custom
              Fields you create on standard or custom objects are called custom fields.
              You can create a custom field on the Contact object to store your contacts’ birthdays.
            
          
        
      
    
    Identity, system, and name fields are standard on every object in Salesforce. Each standard object also comes with a set of prebuilt, standard fields. You can customize standard objects by adding custom fields, and you can add custom fields to your custom objects.
    Every field has a data type. A data type indicates what kind of information the field stores. Salesforce supports a bunch of different data types, but here are a few you’ll run into.
    
      
        
Checkbox—for fields that are a simple “yes” or “no,” a checkbox field is what you want.
        
Date or DateTime—these field types represent dates or date/time combinations, like birthdays or sales milestones.
        
Formula—this special field type holds a value that’s automatically calculated based on a formula that you write. For example, D’Angelo can write a formula field that automatically calculates a real estate agent’s commission on a home sale.
      
    
    Again, there are quite a few field types, but most of them are fairly self-explanatory. The important takeaway here is that you want to think about what kind of data you’re trying to store when you create a custom field.
2023-04-04 11:15:50,554 - INFO - No related goals found
2023-04-04 11:15:54,911 - INFO - Processed paragraph 10 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:15:54,912 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:15:57,625 - INFO - Processed paragraph 11 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Create a Custom Field
  
  
    
      The Property object we just created is pretty bare-bones. Let’s add some custom fields to it. Head back to your Trailhead Playground.
    
    
      From Setup, go to Object Manager | Property.
      In the sidebar, click Fields &amp; Relationships. Notice that there are already some fields there. There’s a name field and some of the system fields we talked about earlier.
      Click New in the top right.
      For data type, select Currency.
      Click Next.
      Fill out the following:
          Field Label: Price
2023-04-04 11:15:57,626 - INFO - No related goals found
2023-04-04 11:15:58,713 - INFO - Processed paragraph 12 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Description: The listed sale price of the home.
2023-04-04 11:15:58,714 - INFO - No related goals found
2023-04-04 11:16:00,442 - INFO - Processed paragraph 13 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Check the Required box.
      Click Next, Next again, and then Save.
    
    
      You’ll see your new Price field in the list of Property fields. In the Field Name column, notice that it says Price__c. The “__c” part is an easy way to tell that a particular field is a custom field.
2023-04-04 11:16:00,442 - INFO - No related goals found
2023-04-04 11:16:25,051 - INFO - Processed paragraph 14 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:16:25,051 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:16:26,108 - INFO - Processed paragraph 15 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Create a Record
  
  
    
      Let’s create a property record to see what you did.
    
    
      From the App Launcher ( in the navigation bar), find and select Sales.
      Click the Properties tab in the navigation bar. If you don’t see it, look under the More dropdown.
      Click New in the top corner.
      Enter a name and price for the property and click Save.
    
    
      Awesome! You’ll see something like this:
2023-04-04 11:16:26,109 - INFO - No related goals found
2023-04-04 11:16:43,881 - INFO - Processed paragraph 16 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:16:43,881 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:16:44,927 - INFO - Processed paragraph 17 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Customize Responsibly
  
  
    While it can seem easy to add and customize objects, remember that what’s going on under the hood is technically complicated. Here are some best practices to keep in mind as you start customizing your own org.
    Be thoughtful about names. Once you start creating a bunch of objects, it can be tempting to give them “lazy” names. For example, if D’Angelo created another custom object to track condominiums, he might be tempted to name it “Property2” instead of “Condominium.” That’s a recipe for confusion in your org. Give your objects and fields descriptive, unique names to improve clarity.
    Help out your users. Even with careful naming, your users might not always be clear about the purpose of a particular object or field. Include descriptions for your custom objects and fields. For specialized or complicated customizations, use help text to give more details.
    Require fields when necessary. Sometimes, you’ll want to force your users to fill out a field when they’re creating a record on a certain object. Every property needs a price, right? Make important fields required to avoid incomplete data.
2023-04-04 11:16:44,927 - INFO - No related goals found
2023-04-04 11:17:03,109 - INFO - Processed paragraph 18 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:17:03,110 - INFO - Related goals: 1, 2, 3, 4, 6, 8, 9, 10, 12, 13, 14, 16, 16, 18, 19, 20, 21, 22
2023-04-04 11:17:04,168 - INFO - Processed paragraph 19 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Resources
  
  
    
      
        Salesforce Help: Customize Your Salesforce Org
        Salesforce Help: Store Information That’s Unique to Your Organization
        Trailblazer Community: Customer Success Community
        Knowledge Article: Custom Objects, Tabs, and Fields Best Practice Guide
2023-04-04 11:17:04,169 - INFO - No related goals found
2023-04-04 11:17:25,841 - INFO - Processed paragraph 20 in 0_data_modeling_objects_intro+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:17:25,842 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:17:52,582 - INFO - Processed paragraph 0 in 0_developer_console_developer_console_intro_content.txt: 
2023-04-04 11:17:52,582 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:17:53,686 - INFO - Processed paragraph 1 in 0_developer_console_developer_console_intro_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll be able to:
        Name several uses for the Developer Console.
        Decide whether to use the Developer Console or a different developer tool.
        Set up workspaces to organize your tabs.
      An asteroid is hurtling toward your spaceship. You, as the commander of the spaceship, are responsible for your crew’s safety. Luckily, your ship is powered by Salesforce, so you have a handy console where you can monitor and program your systems as you prepare to take evasive action.
    Similarly, you can steer your company’s Salesforce org toward customer success using the Developer Console. So, here comes the first question that you likely have before taking the controls: What is the Developer Console?
2023-04-04 11:17:53,686 - INFO - No related goals found
2023-04-04 11:17:55,220 - INFO - Processed paragraph 2 in 0_developer_console_developer_console_intro_content.txt: 
2023-04-04 11:17:55,220 - INFO - Related goals: 4
2023-04-04 11:17:58,946 - INFO - Processed paragraph 3 in 0_developer_console_developer_console_intro_content.txt: What Is the Developer Console?
  
  
    The Developer Console is an integrated development environment (more typically called an IDE) where you can create, debug, and test apps in your org.
    It’s your one-stop solution for a variety of development tasks.
        Navigate, open, create, and edit Apex classes and triggers, Aura components, and Visualforce pages and components.
        Browse packages that you’ve created in your org.
        Generate logs for debugging and analyze them using different perspectives.
        Test your Apex code to ensure that it’s error free.
        Identify and resolve errors by setting checkpoints in your Apex code.
        Write and execute SOQL and SOSL queries to find, create, and update the records in your org.
      
      
        
          
            
              
              
                
                  As of the Spring ‘19 release (API version 45.0), you can build Lightning components using two programming models: the Lightning Web Components model and the original Aura Components model. Lightning web components and Aura components can coexist and interoperate on a page. This content covers Aura components. You can’t develop Lightning web components in the Developer Console.
                
              
            
          
        
      
    
    
      
        When Do You Use the Developer Console?
      
      Now that you’re in the cockpit, you’re probably looking at the different options available to control your Salesforce-powered spaceship. To control a Salesforce org, some of the options available to you are the Salesforce Extensions for Visual Studio Code, the Developer Console, and third-party developer tools like the ones that you can download from AppExchange.
      The Developer Console is connected to one org and is browser-based. If you want your changes to be effective immediately and you don’t want to install anything on your computer, we recommend the Developer Console. If you want to connect to multiple orgs, compare or synchronize files, or use version control, the Salesforce Extensions for Visual Studio Code is your best option.
      
        
          
            
              
              
                
                  The Developer Console doesn’t have version control or conflict resolution. To avoid overwriting other people’s code, be careful when you use the Developer Console in orgs that you share with your teammates.
                
              
            
          
        
      
    
    
      
        Accessing the Developer Console
      
      
        The first thing you learn as a commander is how to access your console. After logging in to your org, click Developer Console under the quick access menu () or your name.
        
          
            
              
                Lightning Experience
                Salesforce Classic
              
            
            
              
                
                  
                
                
                  
                
              
            
          
        
        When you open the Developer Console for the first time, you see something like this.
        
        The main pane (1) is the source code editor, where you can write, view, and modify your code. The tabs pane (2) is where you can view logs, errors, and other information, and write queries to interact with the records in your org.
2023-04-04 11:17:58,947 - INFO - No related goals found
2023-04-04 11:18:03,458 - INFO - Processed paragraph 4 in 0_developer_console_developer_console_intro_content.txt: 
2023-04-04 11:18:03,458 - INFO - Related goals: 4
2023-04-04 11:18:04,617 - INFO - Processed paragraph 5 in 0_developer_console_developer_console_intro_content.txt: Set Up Your Workspace
  
  
    After you’ve opened the Developer Console, the next step is to decide how to set up your workspace.
    
      
        What Is a Workspace?
      
      If your pit stops are on the Moon and Mars, you have a different set of system checks and flight paths for each location. It would be confusing and overwhelming to have information about landing on Mars in front of you while you maneuvered your spaceship toward the Moon. Similarly, workspaces in the Developer Console help you organize information to show just what you need as you work on each of your development tasks. Although it sounds like a fancy term, a workspace is simply a collection of resources, represented by tabs, in the main panel of the Developer Console. You can create a workspace for any group of resources that you use together.
      If you’re working on two different projects, you can have the related code, tests, and logs open simultaneously in separate workspaces. For instance, say you’re writing code to update some records for your engineering team, but you also want to check the system details for your navigation team. You can create two workspaces, each of which contains only the resources relevant to the project. Workspaces reduce clutter and make it easier to navigate between different resources.
      When you use the Developer Console for the first time, you see the default workspace. Setting up your own workspace is easy. Let’s try it out.
    
    
      
        Set Up Your Own Workspace
      
      
        Select Workspace | New Workspace and give your workspace a name. In your new workspace, you can create Apex classes, Aura components, Visualforce pages, and more.
        You can switch between your workspaces by selecting Workspace | Switch Workspace (1). In this way, you can work with code and analyze logs for each project just by opening a different workspace.
         Switch Workspace">
2023-04-04 11:18:04,617 - INFO - No related goals found
2023-04-04 11:18:28,438 - INFO - Processed paragraph 6 in 0_developer_console_developer_console_intro_content.txt: 
2023-04-04 11:18:28,438 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:18:30,997 - INFO - Processed paragraph 7 in 0_developer_console_developer_console_intro_content.txt: Resources
  
  
    
      
        Salesforce Help: Developer Console
2023-04-04 11:18:30,997 - INFO - No related goals found
2023-04-04 11:18:34,871 - INFO - Processed paragraph 8 in 0_developer_console_developer_console_intro_content.txt: 
2023-04-04 11:18:34,871 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21
2023-04-04 11:18:52,479 - INFO - Processed paragraph 0 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: 
2023-04-04 11:18:52,479 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:18:54,428 - INFO - Processed paragraph 1 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Learning Objectives
2023-04-04 11:18:54,428 - INFO - No related goals found
2023-04-04 11:18:56,640 - INFO - Processed paragraph 2 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: After completing this unit, you'll be able to:
2023-04-04 11:18:56,640 - INFO - No related goals found
2023-04-04 11:19:00,655 - INFO - Processed paragraph 3 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Explain the Lightning Web Components programming model.
  List the benefits of using Lightning web components.
  Find what you need to get started developing Lightning web components.
2023-04-04 11:19:00,655 - INFO - Related goals: 1, 5, 7, 8, 15, 17, 18
2023-04-04 11:19:01,810 - INFO - Processed paragraph 4 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: An Open Door to Programming with Web Standards
2023-04-04 11:19:01,810 - INFO - No related goals found
2023-04-04 11:19:06,441 - INFO - Processed paragraph 5 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: It's time to bring together your Salesforce knowledge and familiarity with standard technologies like HTML, JavaScript, and CSS to build the next generation of Salesforce apps. Use these common standards to build components for your Salesforce org while maintaining compatibility with existing Aura components.
Lightning Web Components is focused on both the developer and user experience. Because we've opened the door to existing technologies, you use the skill you've developed outside of Salesforce to build Lightning web components. All of this is available to you without giving up what you've already accomplished with Aura components.
2023-04-04 11:19:06,441 - INFO - Related goals: 1, 5, 15
2023-04-04 11:19:07,629 - INFO - Processed paragraph 6 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Did you notice a capitalization difference in that last paragraph? If so, you have a keen eye. We capitalize all the words when we refer to the Lightning Web Components programming model. We only capitalize the first word when we refer to the components, themselves, as Lightning web components.
            Also, the Lightning Components programming model you've been using is now called Aura Components. The components themselves are called Aura components.
2023-04-04 11:19:07,629 - INFO - No related goals found
2023-04-04 11:19:08,616 - INFO - Processed paragraph 7 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Before You Go Further
2023-04-04 11:19:08,616 - INFO - No related goals found
2023-04-04 11:19:13,368 - INFO - Processed paragraph 8 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: You should have a basic understanding of Salesforce DX projects and Salesforce CLI. You'll also need to use a properly configured org in your Trailhead account and VS Code with the Salesforce Extension Pack. You can learn about all of this by completing Quick Start: Lightning Web Components.
If you're using a Developer Edition org you've attached to your Trailhead account, you need to deploy My Domain in Setup (Trailhead Playground orgs automatically have My Domain deployed).
2023-04-04 11:19:13,368 - INFO - Related goals: 1, 9, 19
2023-04-04 11:19:14,435 - INFO - Processed paragraph 9 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Why Lightning Web Components?
2023-04-04 11:19:14,435 - INFO - No related goals found
2023-04-04 11:19:15,478 - INFO - Processed paragraph 10 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Modern browsers are based on web standards, and evolving standards are constantly improving what browsers can present to a user. We want you to be able to take advantage of these innovations.
Lightning Web Components uses core Web Components standards and provides only what's necessary to perform well in browsers supported by Salesforce. Because it's built on code that runs natively in browsers, Lightning Web Components is lightweight and delivers exceptional performance. Most of the code you write is standard JavaScript and HTML.
You'll find it easier to:
2023-04-04 11:19:15,478 - INFO - No related goals found
2023-04-04 11:19:17,409 - INFO - Processed paragraph 11 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Find solutions in common places on the web.
  Find developers with necessary skills and experience.
  Use other developers' experiences (even on other platforms).
  Develop faster.
  Utilize full encapsulation so components are more versatile.
2023-04-04 11:19:17,409 - INFO - No related goals found
2023-04-04 11:19:18,458 - INFO - Processed paragraph 12 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: And it's not like web components are new. In fact, browsers have been creating these for years. Examples include &lt;select&gt;, &lt;video&gt;, &lt;input&gt;, and any tag that serves as more than a container. These elements are actually the equivalent of web components. Our goal is to bring that level of integration to Salesforce development.
2023-04-04 11:19:18,458 - INFO - No related goals found
2023-04-04 11:19:19,516 - INFO - Processed paragraph 13 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Simple Component Creation
2023-04-04 11:19:19,516 - INFO - No related goals found
2023-04-04 11:19:23,837 - INFO - Processed paragraph 14 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: The beauty of adhering to web standards is simplicity. You don't need to ramp up on quirks of a particular framework. You simply create components using HTML, JavaScript, and CSS. Lightning web component creation is one, two, three steps. I'm not kidding. It's really that simple. You create (1) a JavaScript file, (2) an HTML file, and optionally (3) a CSS file.
2023-04-04 11:19:23,837 - INFO - Related goals: 1, 5, 15
2023-04-04 11:19:24,878 - INFO - Processed paragraph 15 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: HTML provides the structure for your component.
  JavaScript defines the core business logic and event handling.
  CSS provides the look, feel, and animation for your component.
2023-04-04 11:19:24,879 - INFO - No related goals found
2023-04-04 11:19:27,070 - INFO - Processed paragraph 16 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Those are the essential pieces of your component.
Here's a very simple Lightning web component that displays “Hello World” in an input field.
HTML
&lt;template&gt;
    &lt;input value={message}&gt;&lt;/input&gt;
&lt;/template&gt;Copy
The template tag is a fundamental building block of a component's HTML. It allows you to store pieces of HTML.
JavaScript
import { LightningElement } from 'lwc';
export default class App extends LightningElement {
  message = 'Hello World';
}Copy
We get into the import statement and class declaration details later, too.
CSS
input {
   color: blue;
}Copy
At minimum, all you really need is an HTML file and a JavaScript file with the same name in the same folder (also with a matching name). You deploy those to an org with some metadata and you're good to go. Salesforce compiles your files and takes care of the boilerplate component construction for you automatically.
2023-04-04 11:19:27,070 - INFO - Related goals: 1, 5, 15
2023-04-04 11:19:28,092 - INFO - Processed paragraph 17 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Play Time
2023-04-04 11:19:28,092 - INFO - No related goals found
2023-04-04 11:19:29,141 - INFO - Processed paragraph 18 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Let's go look at our files. Use an integrated development environment (IDE), to try out your components, tinker with them, and see instant results. If you don't already have an IDE you love, follow along as we use the third-party IDE, WebComponents.dev which includes base components and styles to help you create LWC prototypes.
2023-04-04 11:19:29,141 - INFO - No related goals found
2023-04-04 11:19:30,152 - INFO - Processed paragraph 19 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Navigate to webcomponents.dev and select LWC. (Or go directly to webcomponents.dev/create/lwc.) When you first get there, you see an example you can explore. It includes styles from the Lightning Design System CSS framework.
  Use your GitHub account to log in to WebComponents.dev.
  Copy the above HTML, JavaScript, and CSS examples into the corresponding app.x files in the example. Replace everything in the app files.
  Save the files.
2023-04-04 11:19:30,152 - INFO - No related goals found
2023-04-04 11:19:31,299 - INFO - Processed paragraph 20 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: The Stories tab shows the output. If you reopen the initial template page, you'll see the default example again.
2023-04-04 11:19:31,299 - INFO - No related goals found
2023-04-04 11:19:32,442 - INFO - Processed paragraph 21 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Lightning Web Components and Aura Components Do Work Together
2023-04-04 11:19:32,443 - INFO - No related goals found
2023-04-04 11:19:33,496 - INFO - Processed paragraph 22 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Wondering if you can keep your existing Aura components? Yes you can! You can use Lightning web components without giving up your existing components. You'll likely migrate your existing components to the Lightning Web Component model eventually, but we're introducing Lightning web components without taking anything away from the existing support of the Aura components. Aura components and Lightning web components live well together.
In fact, Aura components can contain Lightning web components (though not vice-versa). But a pure Lightning web components implementation provides full encapsulation and evolving adherence to common standards.
2023-04-04 11:19:33,496 - INFO - No related goals found
2023-04-04 11:19:34,536 - INFO - Processed paragraph 23 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Cool Stuff You Can Use
2023-04-04 11:19:34,536 - INFO - No related goals found
2023-04-04 11:19:35,646 - INFO - Processed paragraph 24 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: To develop Lightning web components efficiently, use the following tools and environments.
2023-04-04 11:19:35,646 - INFO - No related goals found
2023-04-04 11:19:36,701 - INFO - Processed paragraph 25 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Dev Hub and Scratch Orgs
    Scratch orgs are disposable Salesforce orgs to support development and testing. Dev Hub is a feature that manages your scratch orgs. Both are part of the Salesforce DX tool set. Salesforce DX is an integrated set of development tools built and supported by Salesforce.
    
      
Salesforce Command Line Interface (CLI) 
        The Salesforce CLI provides a quick way to run operations for creating and configuring scratch orgs, and also for deploying components. This is also part of the Salesforce DX tool set.
      
Lightning Component Library 
        The reference for both Aura and Lightning web components and how to use them is found at https://developer.salesforce.com/docs/component-library/overview/components. You can view the library through your org's instance, too, at http://&lt;MyDomainName&gt;.lightning.force.com/docs/component-library. By viewing the library through your instance, you see only the correct version for your org. And, as you create your own custom components, they appear in the library too.
    
  
  
GitHub 
    We share extensions, samples, and more through GitHub repos. Get a GitHub account to make sure you can take advantage of these offerings.
    
      
Visual Studio Code Salesforce Extension Pack 
        We've focused on Visual Studio as a development tool, providing an integrated environment for you to build your components. The Salesforce Extension Pack for Visual Studio Code provides code-hinting, lint warnings, and built-in commands: https://marketplace.visualstudio.com/items?itemName=salesforce.salesforcedx-vscode.
      
Lightning Web Components Recipes 
        We provide a GitHub repo to help you see how Lightning web components work. You can clone, tinker, and publish this mix of samples to your own scratch org and see them in action. Get it at https://github.com/trailheadapps/lwc-recipes.
      
E-Bikes Demo 
        This GitHub repo is another great way to see how Lightning web components work. The e-bikes demo is an end-to-end implementation of Lightning web components to create an app. Try this example in your own scratch org. Get it at https://github.com/trailheadapps/ebikes-lwc.
      
Lightning Data Service (LDS) 
        Access data and metadata from Salesforce via Lightning Data Service. Base Lightning components that work with data are built on LDS. Customize your own components to take advantage of LDS caching, change-tracking, performance, and more.
      
Lightning Locker 
        Lightning web components that belong to one namespace are secure from components in a different namespace through Security with Lightning Locker. Lightning Locker also promotes best practices that improve the supportability of your code by only allowing access to supported APIs and eliminating access to nonpublished framework internals.
2023-04-04 11:19:36,702 - INFO - No related goals found
2023-04-04 11:19:37,836 - INFO - Processed paragraph 26 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: A Look Ahead
2023-04-04 11:19:37,836 - INFO - No related goals found
2023-04-04 11:19:38,905 - INFO - Processed paragraph 27 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: We'll use the eBikes demo to see what you can do with the HTML and JavaScript files.
2023-04-04 11:19:38,905 - INFO - No related goals found
2023-04-04 11:19:40,337 - INFO - Processed paragraph 28 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Resources
2023-04-04 11:19:40,337 - INFO - No related goals found
2023-04-04 11:19:41,339 - INFO - Processed paragraph 29 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: Developers' Blog: Introducing Lightning Web Components
  Lightning Web Components Dev Guide: Lightning Web Components and Aura Components Working Together
2023-04-04 11:19:41,339 - INFO - No related goals found
2023-04-04 11:20:03,636 - INFO - Processed paragraph 30 in 0_lightning-web-components-basics_discover-lightning-web-components_content.txt: 
2023-04-04 11:20:03,636 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:20:05,939 - INFO - Processed paragraph 0 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:20:05,939 - INFO - Related goals: 2
2023-04-04 11:20:07,760 - INFO - Processed paragraph 1 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Create a custom formula field and use the formula editor.
        Explain why formula fields are useful.
        Outline at least one use case for formula fields.
        Create simple formulas.
2023-04-04 11:20:07,761 - INFO - No related goals found
2023-04-04 11:20:09,772 - INFO - Processed paragraph 2 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:20:09,773 - INFO - Related goals: 2
2023-04-04 11:20:13,030 - INFO - Processed paragraph 3 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Accessibility
              
              This unit requires some additional instructions for screen reader users. To access a detailed screen reader version of this unit, click the link below:
              Open Trailhead screen reader instructions.
            
          
        
      
    
  
  
    Introduction to Formula Fields
  
  
    You’ve got a lot of data in your organization. Your users need to access and understand this data at a glance without doing a bunch of calculations in their heads. Enter formula fields, the powerful tool that gives you control of how your data is displayed.
    Let’s say you wanted to take two numeric fields on a record and divide them to create a percentage. Or perhaps you want to turn a field into a clickable hyperlink for easy access to important information from a record’s page layout. Maybe you want to take two dates and calculate the number of days between them. All these things and more are possible using formula fields.
    Let’s look at a specific example. What if you wanted to calculate how many days are left until an opportunity’s close date? You can create a simple formula field that automatically calculates that value. By adding the value to the Opportunity page layout, your users can quickly access this key information. You can also add this field to reports and list views for instant access.
    
    When you’re first learning formulas, it’s best to start with simple calculations and build up to more complex scenarios. But even simple formulas can provide valuable information.
    In this unit, we take you through the basics of using the formula editor and introduce you to formula syntax through several basic examples. We also touch on troubleshooting problems with your formula fields. Now let’s have some fun!
    
      Ready to Get Hands-on with Formulas?
    
    Launch your Trailhead Playground now to follow along and try out the steps in this module. To open your Trailhead Playground, scroll down to the hands-on challenge and click Launch. You also use the playground when it’s time to complete the hands-on challenges.
    
      Find the Formula Editor
    
    
      
        Before we dive into writing formulas, let’s locate the formula editor and get to know its features.
        You can create custom formula fields on any standard or custom object. To start, we’ll create a formula on the Opportunity object. Follow these steps to navigate to the formula editor.
      
      
        From Setup, open the Object Manager and click Opportunity.
        In the left sidebar, click Fields &amp; Relationships.
        Click New.
        Select Formula and click Next.
        In Field Label, type My Formula Field. Notice that Field Name populates automatically.
        Select the type of data you expect your formula to return. For example, if you want to write a formula that calculates the commission a salesperson receives on a sale, you select Currency. For now, pick Text.
        Click Next. You’ve arrived at the formula editor! Time for our tour.
2023-04-04 11:20:13,031 - INFO - Related goals: 2
2023-04-04 11:20:21,550 - INFO - Processed paragraph 4 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:20:21,550 - INFO - Related goals: 1, 2, 22
2023-04-04 11:20:22,521 - INFO - Processed paragraph 5 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Use the Formula Editor
  
  
    This image highlights the most important parts of the formula editor.
      
        The formula editor comes in two flavors: Simple and Advanced. It’s tempting to use the Simple editor, but we always recommend using the Advanced editor. Advanced doesn’t mean more complicated. It means more tools for you to create powerful formulas.
        The Insert Field button opens a menu that allows you to select fields to use in your formula. Inserting from this menu automatically generates the correct syntax for accessing fields.&nbsp;
2023-04-04 11:20:22,521 - INFO - No related goals found
2023-04-04 11:20:23,967 - INFO - Processed paragraph 6 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: The Insert Operator button opens a dropdown list of the available mathematical and logical operators.&nbsp;
2023-04-04 11:20:23,968 - INFO - No related goals found
2023-04-04 11:20:26,443 - INFO - Processed paragraph 7 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: The Functions menu is where you view and insert formula functions. Functions are more complicated operations that are preimplemented by Salesforce. Some functions can be used as-is (for example, the TODAY() function returns the current date), while others require extra pieces of information, called parameters. The LEN(text) function, for instance, finds the length of the text you input as a parameter. The formula LEN("Hello") returns a value of 5.&nbsp;
2023-04-04 11:20:26,444 - INFO - Related goals: 2
2023-04-04 11:20:27,463 - INFO - Processed paragraph 8 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: The text area is where you enter your formula. When writing formulas, keep in mind that:
            Whitespace doesn’t matter. You can insert as many spaces and line breaks as you want without affecting the formula’s execution.
            Formulas are case sensitive. Pay attention to capitalization of field and object names.
            When working with numbers, the standard order of operations applies.
          
        
        Once you’ve written a formula, you can use the Check Syntax button to ensure that everything is in working order before saving. If your formula has issues, the syntax checker alerts you to specific problems.
      
    
    We don’t need to continue creating this formula field, so click Cancel. Now that you know your way around, let’s put the editor to use with some simple examples.
2023-04-04 11:20:27,464 - INFO - No related goals found
2023-04-04 11:20:32,496 - INFO - Processed paragraph 9 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:20:32,496 - INFO - Related goals: 2
2023-04-04 11:20:34,548 - INFO - Processed paragraph 10 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Example 1: Display an Account Field on the Contact Detail Page
  
  
    
      Record detail pages contain a ton of information, but sometimes it’s not enough. Sometimes you need more! For your first formula, let’s do something simple. Let’s take a single field from an Account and show it on a Contact using what’s called a cross-object formula. Let’s take a look.
      First create a Contact. If you’ve never created a Contact before, click the App Launcher and select Contacts. Then go to the Contacts tab and click New. Enter any value for Last Name. For Account Name, enter an existing account such as United Oil &amp; Gas Corp. Click Save. Next we create a formula to display the account number on the Contact page.
      
        
          From Setup, open the Object Manager and click Contact.
          In the left sidebar click Fields &amp; Relationships.
          Click New.
          For the field type, select Formula and click Next.
          Call your field Account Number and select Text for the formula return type. Click Next.
          In the Advanced Formula Editor, click Insert Field. Select Contact | Account | Account Number and then click Insert. Click Check Syntax. If there are no syntax errors, click Next. It’s unlikely that you’ll find a syntax error in a simple formula like this one, but it's a good idea to get in the habit of checking syntax for every formula.
2023-04-04 11:20:34,549 - INFO - No related goals found
2023-04-04 11:20:36,086 - INFO - Processed paragraph 11 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Click Next&nbsp;to accept the field-level security settings, then click Save.
2023-04-04 11:20:36,086 - INFO - No related goals found
2023-04-04 11:20:38,369 - INFO - Processed paragraph 12 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Congratulations, you’ve written your first formula! Now it’s time to see what you’ve done. Open the detail page for the Contact object you just created and find your new Account Number formula field. Cool!
    
    
      
        Example 2: Display the Number of Days Until an Opportunity Closes on a Report
      
      You can also use formula fields in reports to increase the visibility of important information. Say, for example, you wanted a report column that displays the number of days until an opportunity is closed. First, create an Opportunity to test our formula.
      If you’ve never created an Opportunity before, click  and select Opportunities. go to the Opportunities tab and click New. Fill in any value for the Opportunity Name, select any Stage, and set a close date that’s at least 3 days in the future. Click Save.
      Then take these steps to create a custom formula field called Days to Close on the Opportunities object with a Number return type.
      
        
          From Setup, open the Object Manager and click Opportunity.
          In the left sidebar click Fields &amp; Relationships.
          Click New.
          Select Formula and then click Next.
          In the Field Label text area, type Days to Close.
          Select the Number radio button.
          Click Next to open the formula editor.
          To find the difference between the opportunity close date and today’s date subtract one from the other.&nbsp;
              Click Insert Field and select Opportunity | Close Date and click Insert.&nbsp;
              From the Insert Operator menu, select - Subtract.
            
          
          But how do we tell our formula that we need today’s date? Luckily, there’s a function called TODAY() that updates to match the current date.&nbsp;
              In the Functions menu on the right side of the editor, select TODAY.
              Click Insert Selected Function.&nbsp;
            
          
          Click Check Syntax. If there are no syntax errors, click Next.
2023-04-04 11:20:38,370 - INFO - No related goals found
2023-04-04 11:20:39,404 - INFO - Processed paragraph 13 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Click Next&nbsp;to accept the field-level security settings, then click Save.
2023-04-04 11:20:39,404 - INFO - No related goals found
2023-04-04 11:20:41,183 - INFO - Processed paragraph 14 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Now it's time to put your new formula field in a report.&nbsp;
      
        From , open the Reports tab and click New Report.
        Enter Opportunities in the Search Report Types... field. Select Opportunities and click Continue. Your opportunity appears in the Report Preview panel.
        Make sure Update Preview Automatically is enabled.
        In the Add column... field on the left side of the page, enter Days to Close. &nbsp;This field is the formula field you just created. A column with the field containing the calculated value is automatically added to the report.
      
      You won't need the report again for this unit. You can discard it and move on to the next example.
      
        Example 3: Find Distinct Objects Using the Power of One
      
    
    
      Organizations often want to count the number of unique objects in a report with hundreds of records. Say, for example, you have a hundred opportunities listed in a report, but only a handful of users own all these opportunities. How do you find the number of distinct users? This task sounds difficult, but it’s one of the easiest formulas you can write. It’s called the Power of One.
      To write this formula, create a custom formula field on the User object. Name it Unique Users, give it a Number return type, and select 0 from the Decimal Places dropdown list. Click Next to open the formula editor. For this formula, you don’t need to insert any fields, operators, or functions. Instead, enter the number 1.
      
      Yes, that’s really it! Save your formula as usual, and then click the Reports tab to see it in action. Create an Opportunities report and make sure that Update Preview Automatically is enabled. In the Add column... field on the left side of the page, enter Unique Users to add a column with the new field to the report. You should see something similar to the following (your report may appear different, depending on what columns you have displayed).
2023-04-04 11:20:41,184 - INFO - No related goals found
2023-04-04 11:20:43,213 - INFO - Processed paragraph 15 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Here, we have five opportunities between two distinct users. Where does our formula come in? On the Unique Users column, click the dropdown menu and select Summarize and then Sum.
2023-04-04 11:20:43,213 - INFO - No related goals found
2023-04-04 11:20:44,308 - INFO - Processed paragraph 16 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: The number of distinct users appears at the bottom of the column. As you can see, even simple formulas provide powerful insights into your organization.
2023-04-04 11:20:44,308 - INFO - No related goals found
2023-04-04 11:20:47,865 - INFO - Processed paragraph 17 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: You can use the Power of One on any object. For example, if you had a report with 10 accounts, each with three opportunities, your Opportunities report returns 30 records. Adding the Power of One formula field to Account allows you to see the number of distinct accounts represented in the records. Some pros say they add a Power of One field to every object in their org!
2023-04-04 11:20:47,865 - INFO - Related goals: 4
2023-04-04 11:21:09,064 - INFO - Processed paragraph 18 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:21:09,064 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:21:10,073 - INFO - Processed paragraph 19 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Debug Formulas
  
  
    Syntax errors are an inevitable part of working with formulas. The Check Syntax button in the editor is an important tool for debugging your formulas. The syntax checker tells you what error it encountered and where it’s located in your formula. Here are some common syntax issues.
    
      
        
Missing parentheses: This error most often occurs when the number of opening parentheses doesn’t match the number of closing parentheses. It can be particularly difficult to avoid this error if you’re using several functions at once. Try breaking your function into multiple lines so it’s easier to tell which sets of parentheses belong together. &nbsp; You’ll also see this error if you forget a comma between two function parameters. This error is confusing because the actual problem doesn’t match up with the syntax checker. If you’re certain your parentheses are correct, double check that the commas in your function are correct as well.
2023-04-04 11:21:10,074 - INFO - No related goals found
2023-04-04 11:21:11,114 - INFO - Processed paragraph 20 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Incorrect parameter type: If you give a function a number parameter when it expects text (or any other combination of data types), this is the error you see. Always check the help text or the documentation so you know what kind of parameters a function accepts.&nbsp;
2023-04-04 11:21:11,115 - INFO - No related goals found
2023-04-04 11:21:12,168 - INFO - Processed paragraph 21 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Incorrect number of parameters for function: If you input too many or too few parameters into a function, the syntax checker alerts you. Again, check the help text or documentation for guidelines on inputting parameters to specific functions.&nbsp;
2023-04-04 11:21:12,169 - INFO - No related goals found
2023-04-04 11:21:13,162 - INFO - Processed paragraph 22 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Formula result is incompatible with formula return type: You see this error if you select one data type when creating the formula field but write a formula that returns a different data type. In the example below, you can see that My Account Formula expects to return a number (shown in parentheses next to the formula name), but the TODAY() function returns a date. The error tells you what the expected data type is, but you can always reference the documentation beforehand to avoid the error.&nbsp;
2023-04-04 11:21:13,162 - INFO - No related goals found
2023-04-04 11:21:14,218 - INFO - Processed paragraph 23 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Field does not exist: This error indicates that you’ve included a field in your formula that your object doesn’t support. In this case, check your spelling and capitalization. If you can’t find any mistakes, try inserting the field from the Insert Field menu again to make sure you’re referencing it correctly.&nbsp; Another reason you see this error is if you forget to put quotation marks around a text literal or a hyperlink.
2023-04-04 11:21:14,219 - INFO - No related goals found
2023-04-04 11:21:15,483 - INFO - Processed paragraph 24 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Unknown function: In this case, check that Salesforce supports the functions you’re using. You also get this error for misspelled functions.&nbsp;
2023-04-04 11:21:15,483 - INFO - No related goals found
2023-04-04 11:21:16,516 - INFO - Processed paragraph 25 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:21:16,517 - INFO - No related goals found
2023-04-04 11:21:22,427 - INFO - Processed paragraph 26 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:21:22,428 - INFO - Related goals: 7
2023-04-04 11:21:23,341 - INFO - Processed paragraph 27 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Further Examples
  
  
    Let’s look at a few more examples. You can create these formulas yourself or simply read through.
        This formula creates a hyperlink to an external website using the HYPERLINK() function. Adding hyperlinks to page layouts helps your users access important information quickly from the detail pages.&nbsp;
2023-04-04 11:21:23,341 - INFO - No related goals found
2023-04-04 11:21:24,386 - INFO - Processed paragraph 28 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: If you want to apply a discount to an opportunity amount, you can use the following formula. In this case, we’re applying a 12% discount and then rounding the result to two decimal places using the ROUND() function.&nbsp;
2023-04-04 11:21:24,386 - INFO - No related goals found
2023-04-04 11:21:26,996 - INFO - Processed paragraph 29 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: This formula is a checkbox formula that determines whether a particular opportunity is a “big” opportunity. It checks whether the number of employees at the opportunity account’s associated company is greater than 1,000 AND whether the opportunity amount is greater than $10,000. If both statements are true, the field appears as a checked box on the Opportunity page layout. Otherwise, it appears as a blank box.&nbsp; 1000, Amount > 1000)">
2023-04-04 11:21:26,996 - INFO - Related goals: 2
2023-04-04 11:21:28,450 - INFO - Processed paragraph 30 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: The formulas documentation contains numerous examples for many different use cases. While you’re browsing these examples, keep in mind that many of them contain advanced concepts that weren’t covered in this unit. Make sure you’re comfortable with the information presented here before tackling these formulas.
    
      Resources
    
    
      
        Salesforce Help: Calculate Field Values With Formulas
        PDF: Formulas Quick Reference
        Salesforce Developer Forum: Formulas &amp; Validation Rules Discussion
2023-04-04 11:21:28,451 - INFO - No related goals found
2023-04-04 11:21:35,287 - INFO - Processed paragraph 31 in 0_point_click_business_logic_formula_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:21:35,287 - INFO - Related goals: 2
2023-04-04 11:21:37,698 - INFO - Processed paragraph 0 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: 
2023-04-04 11:21:37,698 - INFO - Related goals: 3
2023-04-04 11:21:39,441 - INFO - Processed paragraph 1 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Learning Objectives
2023-04-04 11:21:39,442 - INFO - No related goals found
2023-04-04 11:21:40,788 - INFO - Processed paragraph 2 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: After completing this unit, you’ll be able to:
2023-04-04 11:21:40,788 - INFO - No related goals found
2023-04-04 11:21:42,521 - INFO - Processed paragraph 3 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Identify uses for record-triggered flows.
  Give examples of the three types of flow triggers.
  Based on business requirements, select the best options for your record-triggered flow.
2023-04-04 11:21:42,522 - INFO - Related goals: 1, 3, 13
2023-04-04 11:21:44,312 - INFO - Processed paragraph 4 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Before You Start
2023-04-04 11:21:44,312 - INFO - No related goals found
2023-04-04 11:21:45,740 - INFO - Processed paragraph 5 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: This module is designed for intermediate Salesforce admins who are familiar with basic Salesforce customization features and have some experience using basic flows. If you're not there yet, that’s OK. Before you begin this badge, we recommend that you complete the Flow Basics module. In that badge, you learn when and how to use flows to automate business processes.
2023-04-04 11:21:45,741 - INFO - No related goals found
2023-04-04 11:21:46,732 - INFO - Processed paragraph 6 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Flow Types
2023-04-04 11:21:46,733 - INFO - No related goals found
2023-04-04 11:21:47,856 - INFO - Processed paragraph 7 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: There are three general types of flows.
2023-04-04 11:21:47,856 - INFO - No related goals found
2023-04-04 11:21:49,508 - INFO - Processed paragraph 8 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Flow Type
        Launched By
        Description
      
    
    
      
        
          Screen Flow
        
        
          
            Quick action
            Lightning page
            Experience Cloud site, and more
          
        
        
          Screen Flows provide a UI that guides users through a business process.
        
      
      
        
          Autolaunched Flow
        
        
          
            Another flow
            Apex code
            REST API
          
        
        
          Autolaunched Flows automate business processes that have no UI. They have no trigger and they run in the background.
        
      
      
        
          Triggered Flow
        
        
          
            Time
            Data change
            Platform event
          
        
        
          Triggered Flows are autolaunched by a trigger you specify. They run in the background.
2023-04-04 11:21:49,511 - INFO - No related goals found
2023-04-04 11:21:50,893 - INFO - Processed paragraph 9 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Tools
2023-04-04 11:21:50,894 - INFO - No related goals found
2023-04-04 11:21:51,923 - INFO - Processed paragraph 10 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: You may have used Workflow Rules or Process Builder to create a triggered process. Now Flow Builder is the optimal tool. Why? It combines the capabilities of Workflow Rules and Process Builder in a single point-and-click tool. Use Flow Builder to automate if/then business processes and see a graphical representation of your automation as you build it.&nbsp;
Flow Builder provides debugging, testing, and integration with functions across the Salesforce Platform. It now combines the capabilities of Workflow Rules and Process Builder with the power of Flow for a single no-code automation home. And if that’s not enough to convince you, a record-triggered flow can update a Salesforce record 10 times faster than a record-change process built with Process Builder!
2023-04-04 11:21:51,923 - INFO - Related goals: 5
2023-04-04 11:21:54,180 - INFO - Processed paragraph 11 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Triggered Flows
2023-04-04 11:21:54,180 - INFO - No related goals found
2023-04-04 11:21:55,183 - INFO - Processed paragraph 12 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: This module focuses on triggered flows. A triggered flow consists of a trigger, at least one criterion, and at least one action.&nbsp;
2023-04-04 11:21:55,184 - INFO - No related goals found
2023-04-04 11:21:56,217 - INFO - Processed paragraph 13 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: The trigger identifies what launches the flow. You can trigger a flow on a set schedule or when a specific type of record change occurs.
  Criteria define the specifics of the trigger. The criteria for a schedule trigger are date and time. The criteria for a record change trigger are the object and specific changes to field values.
  The action determines what the flow does.
2023-04-04 11:21:56,217 - INFO - No related goals found
2023-04-04 11:21:57,220 - INFO - Processed paragraph 14 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Trigger Types
2023-04-04 11:21:57,220 - INFO - No related goals found
2023-04-04 11:21:58,236 - INFO - Processed paragraph 15 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: There are three types of triggers.
2023-04-04 11:21:58,236 - INFO - No related goals found
2023-04-04 11:22:00,220 - INFO - Processed paragraph 16 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Trigger Type
        When It Runs
        How to Use It
      
    
    
      
        
          Schedule
        
        
          At a time and frequency you specify
        
        
          Running nightly batch jobs
        
      
      
        
          Platform Event
        
        
          When a particular platform event message is received
        
        
          Subscribing to events
        
      
      
        
          Record
        
        
          When a record is created, updated, or deleted
        
        
          Updating records and sending notifications
2023-04-04 11:22:00,221 - INFO - No related goals found
2023-04-04 11:22:01,301 - INFO - Processed paragraph 17 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Record-Triggered Flows
2023-04-04 11:22:01,301 - INFO - No related goals found
2023-04-04 11:22:03,097 - INFO - Processed paragraph 18 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: A record-triggered flow is the most commonly used automation. It’s the best way to interact with the records in your org. Simply put, the job of a record-triggered flow is, “If something happens, then do something else.”
For record-triggered flows, the trigger determines which object the flow acts on and when it runs.
2023-04-04 11:22:03,097 - INFO - Related goals: 1, 3, 13
2023-04-04 11:22:04,093 - INFO - Processed paragraph 19 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Only when a record is created
  Anytime a record is updated
  Anytime a record is created or updated
  Only when a record is deleted
2023-04-04 11:22:04,093 - INFO - No related goals found
2023-04-04 11:22:07,305 - INFO - Processed paragraph 20 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Create a record-triggered flow to update another record, send a notification, initiate a process, or maintain data consistency. To avoid conflicts and improve performance, you can fine tune the timing of your automation using options within the record-triggered flow.
Because the flow is triggered when a record has been changed, that change is already on its way to the database. This is often called a transaction, and is referred to as the initial triggering transaction.
2023-04-04 11:22:07,305 - INFO - Related goals: 1, 3, 8, 13, 18
2023-04-04 11:22:13,858 - INFO - Processed paragraph 21 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Option
        When It Runs
        How to Use It&nbsp;
      
    
    
      
        
          Fast Field Update
        
        
          During the record update that triggered the flow and before that update is saved.
        
        
          Updating the record that triggered the transaction
          Benefit: Optimal performance because it’s limited to updating the triggering record
        
      
      
        
          Related Records and Actions&nbsp;
        
        
          During the record update that triggered the flow and after that update is saved.
        
        
          
            Creating, updating, or deleting other records
            Calling subflows
            Calling actions, such as send email alert or post to Chatter
          
          Benefit: Automating common processes triggered by record changes
        
      
      
        
          Run Asynchronously
        
        
          Immediately after the record update that triggered the flow is complete.&nbsp;
        
        
          Executing more advanced scenarios like&nbsp;sending requests to external systems or performing other longer running processes
          Benefit: Avoids slowing down or blocking the record update that triggered the flow
        
      
      
        
          Scheduled Paths
        
        
          In the future, after the trigger has fired, based on dates and times.
        
        
          Scheduling reminders or follow-ups based on dates in the record that triggered the flow, such as Close Date
          Benefit: Waits a specified amount of time between the trigger firing and the automation running
2023-04-04 11:22:13,859 - INFO - Related goals: 1, 3, 13
2023-04-04 11:22:15,317 - INFO - Processed paragraph 22 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Next you learn how to build a record-triggered flow!
2023-04-04 11:22:15,317 - INFO - No related goals found
2023-04-04 11:22:16,405 - INFO - Processed paragraph 23 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Resources
2023-04-04 11:22:16,406 - INFO - No related goals found
2023-04-04 11:22:17,513 - INFO - Processed paragraph 24 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: Salesforce Architects: Record-Triggered Automation
  Developer Guide:&nbsp;Triggers and Order of Execution
2023-04-04 11:22:17,513 - INFO - No related goals found
2023-04-04 11:22:20,167 - INFO - Processed paragraph 25 in 0_record-triggered-flows_get-started-with-triggered-flows_content.txt: 
2023-04-04 11:22:20,167 - INFO - Related goals: 1, 5, 15
2023-04-04 11:22:45,614 - INFO - Processed paragraph 0 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: 
2023-04-04 11:22:45,614 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:22:47,232 - INFO - Processed paragraph 1 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Learning Objectives
2023-04-04 11:22:47,232 - INFO - No related goals found
2023-04-04 11:22:50,025 - INFO - Processed paragraph 2 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: After completing this unit, you’ll be able to:
2023-04-04 11:22:50,025 - INFO - No related goals found
2023-04-04 11:22:52,562 - INFO - Processed paragraph 3 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Describe why sharing rules are crucial in Apex.
  Enforce sharing rules.
  Explain how to protect against create, read, update, and delete (CRUD) and field-level security (FLS) violations.
2023-04-04 11:22:52,562 - INFO - Related goals: 1, 6, 9, 16, 16
2023-04-04 11:22:53,657 - INFO - Processed paragraph 4 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Apex Security and Sharing
2023-04-04 11:22:53,658 - INFO - No related goals found
2023-04-04 11:22:55,107 - INFO - Processed paragraph 5 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: When you use Apex, the security of your code is critical. By default Apex classes have the ability to read and update all data within an organization. Therefore, it’s crucial that you enforce sharing rules, set object and field permissions, and protect against CRUD and FLS. Apex sharing rules are used to determine the “execution context” under which your code executes. You will need to determine which code should be run as “system mode”—that is, with access privileges to many resources—and which code should be run as “user mode,” in which the permissions, field-level security, and sharing rules of the current user are enforced.
2023-04-04 11:22:55,108 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:22:56,174 - INFO - Processed paragraph 6 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Enforcing Sharing Rules
2023-04-04 11:22:56,174 - INFO - No related goals found
2023-04-04 11:22:57,956 - INFO - Processed paragraph 7 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Developers who use Apex need to ensure they don’t inadvertently expose sensitive data that would normally be hidden from users by user permissions, field-level security, or organization-wide defaults. Careful attention should be paid to web services that can be restricted by permissions but execute in system context once they are initiated.
Apex generally runs in system context. In system context, Apex code has access to all objects and fields—object permissions, field-level security, and sharing rules aren’t applied for the current user. This strategy ensures that code doesn’t fail to run because of hidden fields or objects for a user.
Sharing rules, however, aren’t always bypassed: The class must be declared with the without sharing keyword in order to ensure that sharing rules are not enforced. Most of the time, system context provides the correct behavior for system-level operations such as triggers and web services that need access to all data in an organization. However, you can also specify that particular Apex classes should enforce the sharing rules that apply to the current user.&nbsp;
There are three keywords to remember for sharing rules. You use the with sharing or without sharing keywords on a class to specify whether sharing rules must be enforced. You use the inherited sharing keyword on an Apex class to run the class in the sharing mode of the class that called it.
The only exception to the way Apex runs in system context, is Apex code executed with the executeAnonymous call and Chatter in Apex. The executeAnonymous call always executes using the full permissions of the current user.&nbsp;
With SharingThe with sharing keyword lets you specify that the sharing rules for the current user are considered for the class. You have to explicitly set this keyword for the class because Apex code runs in system context.&nbsp;
Without SharingYou use the without sharing keywords when declaring a class to ensure that the sharing rules for the current user are not enforced. For example, you can explicitly turn off sharing rule enforcement when a class is called from another class that is declared using with sharing.
Inherited Sharing
Apex without a sharing declaration is insecure by default. Designing Apex classes that can run in either with sharing or without sharing mode at runtime is an advanced technique. Such a technique can be difficult to distinguish from one where a specific sharing declaration is accidentally omitted. An explicit inherited sharing declaration makes the intent clear, avoiding ambiguity arising from an omitted declaration or false positives from security analysis tooling.
Using inherited sharing enables you to pass AppExchange Security Review and ensure that your privileged Apex code is not used in unexpected or insecure ways. An Apex class with inherited sharing runs as with sharing when used as:
2023-04-04 11:22:57,957 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:22:59,107 - INFO - Processed paragraph 8 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: An Aura component controller
  A Visualforce controller
  An Apex REST service
  Any other entry point to an Apex transaction
2023-04-04 11:22:59,107 - INFO - No related goals found
2023-04-04 11:23:00,539 - INFO - Processed paragraph 9 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: There is a distinct difference between an Apex class that is marked with inherited sharing and one with an omitted sharing declaration. If the class is used as the entry point to an Apex transaction, an omitted sharing declaration runs as without sharing. However, inherited sharing ensures that the default is to run as with sharing. A class declared as inherited sharing runs as without sharing only when explicitly called from an already established without sharing context.
2023-04-04 11:23:00,539 - INFO - Related goals: 1, 10
2023-04-04 11:23:02,245 - INFO - Processed paragraph 10 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Be aware that the sharing setting of the class where the method is defined is applied, not of the class where the method is called. This means that if a method is defined in a class declared with with sharing is called by a class declared with without sharing, the method executes with sharing rules enforced. Class-level security is always still necessary. In addition, all Salesforce Object Query Language (SOQL) or Salesforce Object Search Language (SOSL) queries that use Pricebook2 ignore the with sharing keyword. All Pricebook records are returned, regardless of the applied sharing rules.
2023-04-04 11:23:02,245 - INFO - Related goals: 8
2023-04-04 11:23:03,230 - INFO - Processed paragraph 11 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Enforcing the current user's sharing rules can impact:
2023-04-04 11:23:03,230 - INFO - No related goals found
2023-04-04 11:23:06,008 - INFO - Processed paragraph 12 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: SOQL and SOSL queries: A query may return fewer rows than it would operating in system context.
  Data Manipulation Language (DML) operations: An operation may fail because the current user doesn't have the correct permissions—for example, if the user specifies a foreign key value that exists in the organization but which the current user does not have access to.
2023-04-04 11:23:06,008 - INFO - Related goals: 8, 9
2023-04-04 11:23:07,035 - INFO - Processed paragraph 13 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Enforcing Object and Field Permissions
2023-04-04 11:23:07,035 - INFO - No related goals found
2023-04-04 11:23:11,693 - INFO - Processed paragraph 14 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Although Apex doesn't enforce object-level and field-level permissions by default, you can enforce these permissions in your SOQL queries by using the WITH SECURITY_ENFORCED clause.&nbsp;
You can also enforce object-level and field-level permissions in your code by explicitly calling the sObject describe result methods (of Schema.DescribeSObjectResult) and the field describe result methods (of Schema.DescribeFieldResult) that check the current user's access permission levels. In this way, you can verify if the current user has the necessary permission and only if they do, can you perform a specific DML operation or query.
For example, you can call the isAccessible, isCreateable, or isUpdateable methods of Schema.DescribeSObjectResult to verify whether the current user has read, create, or update access to an sObject, respectively. Similarly, Schema.DescribeFieldResult exposes these access control methods that you can call to check the current user's read, create, or update access for a field. In addition, you can call the isDeletable method provided by Schema.DescribeSObjectResult to check if the current user has permission to delete a specific sObject.
These are some examples of how to call the access control methods.
To check the field-level update permission of the contact's email field before updating it:
if (Schema.sObjectType.Contact.fields.Email.isUpdateable()) {
   // Update contact email address
}Copy
2023-04-04 11:23:11,693 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:23:16,496 - INFO - Processed paragraph 15 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: To check the field-level create permission of the contact's email field before creating a new contact:
if (Schema.sObjectType.Contact.fields.Email.isCreateable()) {
   // Create new contact
}Copy
2023-04-04 11:23:16,496 - INFO - Related goals: 2
2023-04-04 11:23:20,086 - INFO - Processed paragraph 16 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: To check the field-level read permission of the contact's email field before querying for this field:
if (Schema.sObjectType.Contact.fields.Email.isAccessible()) {
   Contact c = [SELECT Email FROM Contact WHERE Id= :Id];
}Copy
2023-04-04 11:23:20,086 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:23:21,453 - INFO - Processed paragraph 17 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: To check the object-level permission for the contact before deleting the contact.
if (Schema.sObjectType.Contact.isDeletable()) {
   // Delete contact
}Copy
2023-04-04 11:23:21,453 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:23:25,883 - INFO - Processed paragraph 18 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Sharing rules are distinct from object-level and field-level permissions and they can coexist. If sharing rules are defined in Salesforce, you can enforce them at the class level by declaring the class with the with sharing keyword.&nbsp;
If you call the sObject describe result and field describe result access control methods, the verification of object and field-level permissions is performed in addition to the sharing rules that are in effect. Sometimes, the access level granted by a sharing rule could conflict with an object-level or field-level permission.
2023-04-04 11:23:25,883 - INFO - Related goals: 1, 6, 9, 16, 16
2023-04-04 11:23:32,566 - INFO - Processed paragraph 19 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: 
2023-04-04 11:23:32,566 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21
2023-04-04 11:23:33,921 - INFO - Processed paragraph 20 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Protect Against CRUD and FLS Violations
2023-04-04 11:23:33,921 - INFO - No related goals found
2023-04-04 11:23:36,619 - INFO - Processed paragraph 21 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Object-level security within the salesforce.com environment is referred to as create, read, update, and delete (CRUD) access. CRUD settings are applied at the profile and permission set level and can be used to restrict the actions that users can take on each type of standard and custom object.&nbsp;
Depending on how your custom applications render and process data, unauthorized users have the potential to access and modify data that they shouldn’t. Luckily the platform makes it easy to prevent unauthorized access.
Let’s walk through the DescribeSObjectResult class helper functions that you can use to verify a user’s level of access. These include:&nbsp;
2023-04-04 11:23:36,620 - INFO - No related goals found
2023-04-04 11:23:37,609 - INFO - Processed paragraph 22 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: IsCreateable()
  IsAccessible()
  IsUpdateable()
  IsDeleteable()
2023-04-04 11:23:37,610 - INFO - No related goals found
2023-04-04 11:23:39,805 - INFO - Processed paragraph 23 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: isCreateable()
2023-04-04 11:23:39,805 - INFO - No related goals found
2023-04-04 11:23:42,911 - INFO - Processed paragraph 24 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Before your code inserts a record in the database, you have to check that the logged-in user has both Edit permission on the field and Create permission on the object. You can check both permissions by using the isCreateable() method on the particular object.
Suppose the user needs to create an opportunity with $500 in the Amount field. To ensure that the user calling the function has authorization to create opportunities and opportunity amounts, your Apex code should perform a check to see if the user has the create permission on isCreateable() permission on Opportunity.Amount. Here’s how you write the code.
2023-04-04 11:23:42,912 - INFO - Related goals: 1, 8, 10, 18
2023-04-04 11:23:47,615 - INFO - Processed paragraph 25 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: if (!Schema.sObjectType.Opportunity.fields.Amount.isCreateable()){
   ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,
   'Error: Insufficient Access'));
   return null;
}
Opportunity o = new Opportunity();
// specify other fields
o.Amount=500;
database.insert(o);Copy
2023-04-04 11:23:47,615 - INFO - Related goals: 1, 10
2023-04-04 11:23:48,669 - INFO - Processed paragraph 26 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: You may notice that in this example, we’re explicitly verifying that the user can create the field, not the object. By checking access to the field, you’re also implicitly checking that the user has created access on the object. So in this case, you check FLS and you also get CRUD verification for free.
2023-04-04 11:23:48,669 - INFO - No related goals found
2023-04-04 11:23:50,213 - INFO - Processed paragraph 27 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: isAccessible()
2023-04-04 11:23:50,213 - INFO - No related goals found
2023-04-04 11:23:53,123 - INFO - Processed paragraph 28 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Before your code retrieves a field from an object, you want to verify that the logged-in user has permission to access the field by using the isAccessible() method on the particular object.
Suppose the user wants to access the Expected Revenue field in an opportunity. Your Apex code should check if the user has the edit permission on isAccessible permission on Opportunity.ExpectedRevenue. This is how you would write the code to do this.
// Check if the user has read access on the Opportunity.ExpectedRevenue field 
if (!Schema.sObjectType.Opportunity.fields.ExpectedRevenue.isAccessible()){
   ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,'Error: Insufficient Access'));
   return null; 
}
Opportunity [] myList = [SELECT ExpectedRevenue FROM Opportunity LIMIT 1000];Copy
2023-04-04 11:23:53,123 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:23:54,144 - INFO - Processed paragraph 29 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: isUpdateable()
2023-04-04 11:23:54,144 - INFO - No related goals found
2023-04-04 11:23:55,477 - INFO - Processed paragraph 30 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Similarly, before your code updates a record, you have to check if the logged-in user has Edit permission for the field and the object. You can check for both permissions by using the isUpdateable() method on the particular object.
Suppose the user wants to update an opportunity to mark the stage as Closed Won. Your Apex code should then check if the user has the create permission on isUpdateable() permission on Opportunity.StageName. Let’s check out how this looks.
//Let’s assume we have fetched opportunity “o” from a SOQL query 
if (!Schema.sObjectType.Opportunity.fields.StageName.isUpdateable()){ 
   ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR,'Error: Insufficient Access'));
   return null;
}
o.StageName=’Closed Won’; update o;Copy
2023-04-04 11:23:55,478 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:23:56,569 - INFO - Processed paragraph 31 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: isDeleteable()
2023-04-04 11:23:56,570 - INFO - No related goals found
2023-04-04 11:23:57,700 - INFO - Processed paragraph 32 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Lastly, to enforce “delete” access restrictions, use the isDeleteable() function before your code performs a delete database operation. Here’s how to configure this operation:&nbsp;
if (!Lead.sObjectType.getDescribe().isDeleteable()){
   delete l;
   return null;
}Copy
2023-04-04 11:23:57,701 - INFO - No related goals found
2023-04-04 11:24:03,940 - INFO - Processed paragraph 33 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Notice that unlike update, create, and access, with delete we explicitly perform only a CRUD check, verifying that the user can delete the object. Since you delete entire records in SOQL and don’t delete fields, you need to check only the user’s CRUD access to the object.
Field-Level Security
Field-level security (FLS) is configured similarly to CRUD but lets administrators define the profiles that can see and write to most fields of standard and custom objects.
You use the stripInaccessible method to enforce field- and object-level data protection. This method can be used to strip the fields and relationship fields from query and subquery results that the user can’t access. The method can also be used to remove inaccessible sObject fields before DML operations to avoid exceptions and to sanitize sObjects that have been deserialized from an untrusted source.
You access field- and object-level data protection through the Security and SObjectAccessDecision classes. The access check is based on the field-level permission of the current user in the context of the specified operation: create, read, update, or delete. The stripInaccessible method checks the source records for fields that don’t meet field-level security checks for the current user. The method also checks the source records for look up or master-detail relationship fields to which the current user doesn’t have access. The method creates a return list of sObjects that is identical to the source records, except that the fields that are inaccessible to the current user are removed. The sObjects returned by the getRecords method contain records in the same order as the sObjects in the sourceRecords parameter of the stripInaccessible method. Fields that aren’t queried are null in the return list, without causing an exception.
2023-04-04 11:24:03,940 - INFO - Related goals: 1, 3, 6, 16, 16
2023-04-04 11:24:04,981 - INFO - Processed paragraph 34 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: The ID field is never stripped by the stripInaccessible method to avoid issues when performing DML on the result.
2023-04-04 11:24:04,982 - INFO - No related goals found
2023-04-04 11:24:05,968 - INFO - Processed paragraph 35 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: To identify inaccessible fields that were removed, you can use the isSet method. For example, the return list contains Contact object and the custom field social_security_number__c is inaccessible to the user. Because this custom field fails the field-level access check, the field is not set and isSet returns false. This is how it looks.
SObjectAccessDecision securityDecision = Security.stripInaccessible(sourceRecords);
Contact c = securityDecision.getRecords()[0];
System.debug(c.isSet('social_security_number__c')); // prints "false"Copy
2023-04-04 11:24:05,968 - INFO - No related goals found
2023-04-04 11:24:07,670 - INFO - Processed paragraph 36 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: The stripInaccessible method doesn’t support AggregateResult SObject. If the source records are of AggregateResult SObject type, an exception is thrown.
2023-04-04 11:24:07,671 - INFO - No related goals found
2023-04-04 11:24:08,613 - INFO - Processed paragraph 37 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Now that you understand how to enforce sharing rules, set object and field permissions, and protect against CRUD and FLS, you can secure your Apex code. Next, we look at how to protect against injection vulnerabilities.&nbsp;
2023-04-04 11:24:08,614 - INFO - No related goals found
2023-04-04 11:24:09,723 - INFO - Processed paragraph 38 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Resources
2023-04-04 11:24:09,724 - INFO - No related goals found
2023-04-04 11:24:12,304 - INFO - Processed paragraph 39 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: Salesforce Help: Anonymous Blocks
  Salesforce Help: Filter SOQL Queries Using WITH SECURITY_ENFORCED
  Salesforce Help: DescribeSObjectResult Class
  Salesforce Help: DescribeFieldResult Class
  Salesforce Help: Give Users Access to Data
  Salesforce Help: Salesforce Security Guide
  Salesforce Help: Using the with sharing, without sharing, and inherited sharing Keywords
  Salesforce Help: Enforce Security With the stripInaccessible Method
2023-04-04 11:24:12,304 - INFO - No related goals found
2023-04-04 11:24:36,332 - INFO - Processed paragraph 40 in 0_secure-serverside-development_write-secure-apex-controllers_content.txt: 
2023-04-04 11:24:36,332 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:25:01,352 - INFO - Processed paragraph 0 in 1_apex_database_apex_database_sobjects_content.txt: 
2023-04-04 11:25:01,352 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:25:11,688 - INFO - Processed paragraph 1 in 1_apex_database_apex_database_sobjects_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Describe the relationship between sObjects and Salesforce records.
        Create and use specific sObject variables.
        Cast a generic sObject to a specific sObject.
2023-04-04 11:25:11,688 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 19, 20
2023-04-04 11:25:17,305 - INFO - Processed paragraph 2 in 1_apex_database_apex_database_sobjects_content.txt: 
2023-04-04 11:25:17,305 - INFO - Related goals: 3
2023-04-04 11:25:23,560 - INFO - Processed paragraph 3 in 1_apex_database_apex_database_sobjects_content.txt: Use sObjects
  
  
    Because Apex is tightly integrated with the database, you can access Salesforce records and their fields directly from Apex. Every record in Salesforce is natively represented as an sObject in Apex. For example, the Acme account record corresponds to an Account sObject in Apex. The fields of the Acme record that you can view and modify in the user interface can be read and modified directly on the sObject as well.
    
    The following table lists some populated fields of the Acme account example record. The Account sObject is an abstraction of the account record and holds the account field information in memory as an object.
    
      
        Table 1. Account sObject for a Retrieved Record
        
          
            Account Field
            Value
          
        
        
          
            Id
            001D000000JlfXe
          
          
            Name
            Acme
          
          
            Phone
            (415)555-1212
          
          
            NumberOfEmployees
            100
          
        
      
    
    Each Salesforce record is represented as an sObject before it is inserted into Salesforce. Likewise, when persisted records are retrieved from Salesforce, they’re stored in an sObject variable.
    Standard and custom object records in Salesforce map to their sObject types in Apex. Here are some common sObject type names in Apex used for standard objects.
    
      Account
      Contact
      Lead
      Opportunity
    
    If you’ve added custom objects in your organization, use the API names of the custom objects in Apex. For example, a custom object called Merchandise corresponds to the Merchandise__c sObject in Apex.
    
      Create sObject Variables
      To create an sObject, you need to declare a variable and assign an sObject instance to it. The data type of the variable is the sObject type.
      The following example creates an sObject of type Account with the name Acme and assigns it to the acct variable.
      
Account acct = new Account(Name='Acme');Copy
      
    
    
      sObject and Field Names
      Apex references standard or custom sObjects and their fields using their unique API names.
      API names of object and fields can differ from their labels. For example, the Employees field has a label of Employees and appears on the account record page as Employees but its API name is NumberOfEmployees. To access this field in Apex, you’ll need to use the API name for the field: NumberOfEmployees.
      The following are highlights of some rules used for API names for custom objects and custom fields.
      For custom objects and custom fields, the API name always ends with the __c suffix. For custom relationship fields, the API name ends with the __r suffix. For example:
      
        A custom object with a label of Merchandise has an API name of Merchandise__c.
        A custom field with a label of Description has an API name of Description__c.
        A custom relationship field with a label of Items has an API name of Items__r.
      
      In addition, spaces in labels are replaced with underscores in API names. For example, a custom field name of Employee Seniority has an API name of Employee_Seniority__c.
    
    
      Find Object and Field Names
      To find out the names of standard objects and their fields for use in Apex, refer to the Object Reference for Salesforce and Lightning Platform.
      For both standard and custom objects, look up the object and field API names in your org. From Setup, click the Object Manager tab to the right of the Home tab, and then click your object’s name.
    
    
      Create sObjects and Adding Fields
      Before you can insert a Salesforce record, you must create it in memory first as an sObject. Like with any other object, sObjects are created with the new operator:
      
Account acct = new Account();Copy
      
      The API object name becomes the data type of the sObject variable in Apex. In this example, Account is the data type of the acct variable.
      The account referenced by the acct variable is empty because we haven’t populated any of its fields yet. There are two ways to add fields: through the constructor or by using dot notation.
      The fastest way to add fields is to specify them as name-value pairs inside the constructor. For example, this statement creates a new account sObject and populates its Name field with a string value.
      
Account acct = new Account(Name='Acme');Copy
      
      The Name field is the only required field for accounts, which means that it has to be populated before being able to insert a new record. However, you can populate other fields as well for the new record. This example adds also a phone number and the number of employees.
      
Account acct = new Account(Name='Acme', Phone='(415)555-1212', NumberOfEmployees=100);Copy
      
      Alternatively, you can use the dot notation to add fields to an sObject. The following is equivalent to the previous example, although it takes a few more lines of code.
      
Account acct = new Account();
acct.Name = 'Acme';
acct.Phone = '(415)555-1212';
acct.NumberOfEmployees = 100;Copy
2023-04-04 11:25:23,562 - INFO - Related goals: 3, 9
2023-04-04 11:25:38,408 - INFO - Processed paragraph 4 in 1_apex_database_apex_database_sobjects_content.txt: 
2023-04-04 11:25:38,408 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:25:46,509 - INFO - Processed paragraph 5 in 1_apex_database_apex_database_sobjects_content.txt: Work with the Generic sObject Data Type
  
  
    Typically, you use the specific sObject data type, such as Account for a standard object or Book__c for a custom object called Book, when working with sObjects. However, when you don’t know the type of sObject your method is handling, you can use the generic sObject data type.
    
      Variables that are declared with the generic sObject data type can reference any Salesforce record, whether it is a standard or custom object record.
      
        
      
      This example shows how any Salesforce object, such as an account or a custom object called Book__c, can be assigned to a generic sObject variable.
      
sObject sobj1 = new Account(Name='Trailhead');
sObject sobj2 = new Book__c(Name='Workbook 1');Copy
      
      In contrast, variables that are declared with the specific sObject data type can reference only the Salesforce records of the same type.
      
        
      
    
    
      Cast Generic sObjects to Specific sObject Types
      When you’re dealing with generic sObjects, you sometimes need to cast your sObject variable to a specific sObject type. One of the benefits of doing so is to be able to access fields using dot notation, which is not available on the generic sObject. Since sObject is a parent type for all specific sObject types, you can cast a generic sObject to a specific sObject. This example shows how to cast a generic sObject to Account.
      
// Cast a generic sObject to an Account
Account acct = (Account)myGenericSObject;
// Now, you can use the dot notation to access fields on Account
String name = acct.Name;
String phone = acct.Phone;Copy
      
    
    
      
        Tell Me More...
      
      The fields of a generic sObject can be accessed only through the put() and get() methods.
      In this unit, you’ve learned what sObjects are and how to use them. However, creating an sObject doesn’t persist it as a record in the database. To save the sObject as a record, and do other things with it, use the Data Manipulation Language (DML). To retrieve a record, use the Salesforce Object Query Language (SOQL). Check out later units to learn about DML and SOQL.
2023-04-04 11:25:46,510 - INFO - Related goals: 1, 3, 7, 8, 9, 18, 19
2023-04-04 11:26:00,575 - INFO - Processed paragraph 6 in 1_apex_database_apex_database_sobjects_content.txt: 
2023-04-04 11:26:00,575 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 16, 20, 21, 22
2023-04-04 11:26:01,588 - INFO - Processed paragraph 7 in 1_apex_database_apex_database_sobjects_content.txt: Resources
  
  
    
      Object Reference for Salesforce and Lightning Platform
      
Apex Developer Guide: Working with sObjects
2023-04-04 11:26:01,589 - INFO - No related goals found
2023-04-04 11:26:02,639 - INFO - Processed paragraph 8 in 1_apex_database_apex_database_sobjects_content.txt: Apex Developer Guide: SObject Methods
2023-04-04 11:26:02,639 - INFO - No related goals found
2023-04-04 11:26:03,733 - INFO - Processed paragraph 9 in 1_apex_database_apex_database_sobjects_content.txt: 
2023-04-04 11:26:03,733 - INFO - No related goals found
2023-04-04 11:26:45,918 - INFO - Processed paragraph 10 in 1_apex_database_apex_database_sobjects_content.txt: 
2023-04-04 11:26:45,919 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:26:51,486 - INFO - Processed paragraph 0 in 1_apex_testing_apex_testing_triggers_content.txt: 
2023-04-04 11:26:51,486 - INFO - Related goals: 3
2023-04-04 11:26:52,434 - INFO - Processed paragraph 1 in 1_apex_testing_apex_testing_triggers_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Write a test for a trigger that fires on a single record operation.
        Execute all test methods in a class.
2023-04-04 11:26:52,434 - INFO - No related goals found
2023-04-04 11:27:12,512 - INFO - Processed paragraph 2 in 1_apex_testing_apex_testing_triggers_content.txt: 
2023-04-04 11:27:12,513 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:27:14,215 - INFO - Processed paragraph 3 in 1_apex_testing_apex_testing_triggers_content.txt: Test Apex Triggers
  
  
    Before deploying a trigger, write unit tests to perform the actions that fire the trigger and verify expected results.
    Let’s test a trigger that we worked with in the Apex Triggers module. If an account record has related opportunities, the AccountDeletion trigger prevents the record’s deletion.
    
      
        Prerequisites
      
      
        If you haven’t yet added the AccountDeletiontrigger, follow these steps.
            In the Developer Console, click File | New | Apex Trigger.
            Enter AccountDeletion for the trigger name, and then select Account for the sObject. Click Submit.
            Replace the default code with the following.trigger AccountDeletion on Account (before delete) {
    // Prevent the deletion of accounts if they have related opportunities.
    for (Account a : [SELECT Id FROM Account
                     WHERE Id IN (SELECT AccountId FROM Opportunity) AND
                     Id IN :Trigger.old]) {
        Trigger.oldMap.get(a.Id).addError(
            'Cannot delete account with related opportunities.');
    }
}Copy
            
          
        
        If you added the AccountDeletiontrigger in a previous unit but disabled it so that the system could check your challenge, re-enable it.
            From Setup, search for Apex Triggers.
            On the Apex Triggers page, click Edit next to the AccountDeletion trigger.
            Select Is Active.
            Click Save.
          
        
        If your org contains triggers from a previous unit called AddRelatedRecord, CalloutTrigger, or HelloWorldTrigger, disable them. For example, to disable the AddRelatedRecordtrigger:
            From Setup, search for Apex Triggers.
            On the Apex Triggers page, click Edit next to the AddRelatedRecord trigger.
            Deselect Is Active.
            Click Save.
          
        
        To disable the HelloWorldTrigger and CalloutTrigger triggers, repeat the previous steps.
      
    
    
      
        Add and Run a Unit Test
      
      First, let’s start by adding a test method. This test method verifies what the trigger is designed to do (the positive case): preventing an account from being deleted if it has related opportunities.
      
        In the Developer Console, click File | New | Apex Class.
        Enter TestAccountDeletion for the class name, and then click OK.
        Replace the default class body with the following.@isTest
private class TestAccountDeletion {
    @isTest static void TestDeleteAccountWithOneOpportunity() {
        // Test data setup
        // Create an account with an opportunity, and then try to delete it
        Account acct = new Account(Name='Test Account');
        insert acct;
        Opportunity opp = new Opportunity(Name=acct.Name + ' Opportunity',
                                       StageName='Prospecting',
                                       CloseDate=System.today().addMonths(1),
                                       AccountId=acct.Id);
        insert opp;
        // Perform test
        Test.startTest();
        Database.DeleteResult result = Database.delete(acct, false);
        Test.stopTest();
        // Verify 
        // In this case the deletion should have been stopped by the trigger,
        // so verify that we got back an error.
        System.assert(!result.isSuccess());
        System.assert(result.getErrors().size() &gt; 0);
        System.assertEquals('Cannot delete account with related opportunities.',
                             result.getErrors()[0].getMessage());
    }
}CopyThe test method first sets up a test account with an opportunity. Next, it deletes the test account, which fires the AccountDeletion trigger. The test method verifies that the trigger prevented the deletion of the test account by checking the return value of the Database.delete() call. The return value is a Database.DeleteResult object that contains information about the delete operation. The test method verifies that the deletion was not successful and verifies the error message obtained.
        To run this test, click Test | New Run.
        Under Test Classes, click TestAccountDeletion.
        To add all the methods in the TestAccountDeletion class to the test run, click Add Selected.
        Click Run. Find the test result in the Tests tab under the latest run.
      
      The TestAccountDeletion test class contains only one test method, which tests for a single account record. Also, this test is for the positive case. Always test for more scenarios to ensure that the trigger works in all cases, including deleting an account without opportunities and bulk account deletions.
      Test data is set up inside the test method, which can be time-consuming as you add more test methods. If you have many test methods, put test-data creation in a test utility class and call the utility class from multiple test methods. The next unit shows you how to take advantage of a test utility class and add more test methods.
    
    
      
        Tell Me More
      
      The test method contains the Test.startTest() and Test.stopTest() method pair, which delimits a block of code that gets a fresh set of governor limits. In this test, test-data setup uses two DML statements before the test is performed. To test that Apex code runs within governor limits, isolate data setup’s limit usage from your test’s. To isolate the data setup process’s limit usage, enclose the test call within the Test.startTest() and Test.stopTest() block. Also use this test block when testing asynchronous Apex. For more information, see Using Limits, startTest, and stopTest.
      
        
          
            
              
              
                
                  A known issue with the Developer Console prevents it from updating code coverage correctly when running a subset of tests. To update your code coverage results, use Test | Run All rather than Test | New Run.
                
              
            
          
        
      
      
        Resources
      
      
        
          
            Apex Developer Guide: Understanding Testing in Apex
            Apex Developer Guide: Triggers
2023-04-04 11:27:14,216 - INFO - Related goals: 1, 9, 19
2023-04-04 11:27:17,924 - INFO - Processed paragraph 4 in 1_apex_testing_apex_testing_triggers_content.txt: 
2023-04-04 11:27:17,924 - INFO - Related goals: 2
2023-04-04 11:27:45,237 - INFO - Processed paragraph 0 in 1_apex_triggers_apex_triggers_bulk_content.txt: 
2023-04-04 11:27:45,237 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:27:46,249 - INFO - Processed paragraph 1 in 1_apex_triggers_apex_triggers_bulk_content.txt: Learning Objectives
  
  
    After completing this unit, you'll be able to:
        Write triggers that operate on collections of sObjects.
        Write triggers that perform efficient SOQL and DML operations.
2023-04-04 11:27:46,250 - INFO - No related goals found
2023-04-04 11:28:00,017 - INFO - Processed paragraph 2 in 1_apex_triggers_apex_triggers_bulk_content.txt: Bulk Trigger Design Patterns
  
  
    Apex triggers are optimized to operate in bulk. We recommend using bulk design patterns for processing records in triggers. When you use bulk design patterns, your triggers have better performance, consume less server resources, and are less likely to exceed platform limits.
    
      The benefit of bulkifying your code is that bulkified code can process large numbers of records efficiently and run within governor limits on the Lightning Platform. These governor limits are in place to ensure that runaway code doesn’t monopolize resources on the multitenant platform.
      The following sections demonstrate the main ways of bulkifying your Apex code in triggers: operating on all records in the trigger, and performing SOQL and DML on collections of sObjects instead of single sObjects at a time. The SOQL and DML bulk best practices apply to any Apex code, including SOQL and DML in classes. The examples given are based on triggers and use the Trigger.new context variable.
    
    
      
        Operating on Record Sets
      
      Let’s first look at the most basic bulk design concept in triggers. Bulkified triggers operate on all sObjects in the trigger context. Typically, triggers operate on one record if the action that fired the trigger originates from the user interface. But if the origin of the action was bulk DML or the API, the trigger operates on a record set rather than one record. For example, when you import many records via the API, triggers operate on the full record set. Therefore, a good programming practice is to always assume that the trigger operates on a collection of records so that it works in all circumstances.
      The following trigger assumes that only one record caused the trigger to fire. This trigger doesn’t work on a full record set when multiple records are inserted in the same transaction. A bulkified version is shown in the next example.
      trigger MyTriggerNotBulk on Account(before insert) {
    Account a = Trigger.new[0];
    a.Description = 'New description';
}Copy
      
      This example is a modified version of MyTrigger. It uses a for loop to iterate over all available sObjects. This loop works if Trigger.new contains one sObject or many sObjects.
      trigger MyTriggerBulk on Account(before insert) {
    for(Account a : Trigger.new) {
        a.Description = 'New description';
    }
}Copy
      
    
    
      
        Performing Bulk SOQL
      
      SOQL queries can be powerful. You can retrieve related records and check a combination of multiple conditions in one query. By using SOQL features, you can write less code and make fewer queries to the database. Making fewer database queries helps you avoid hitting query limits, which are 100 SOQL queries for synchronous Apex or 200 for asynchronous Apex.
      The following trigger shows a SOQL query pattern to avoid. The example makes a SOQL query inside a for loop to get the related opportunities for each account, which runs once for each Account sObject in Trigger.new. If you have a large list of accounts, a SOQL query inside a for loop could result in too many SOQL queries. The next example shows the recommended approach.
      trigger SoqlTriggerNotBulk on Account(after update) {   
    for(Account a : Trigger.new) {
        // Get child records for each account
        // Inefficient SOQL query as it runs once for each account!
        Opportunity[] opps = [SELECT Id,Name,CloseDate 
                             FROM Opportunity WHERE AccountId=:a.Id];
        // Do some other processing
    }
}Copy
      
      This example is a modified version of the previous one and shows a best practice for running SOQL queries. The SOQL query does the heavy lifting and is called once outside the main loop.
      
        The SOQL query uses an inner query—(SELECT Id FROM Opportunities)—to get related opportunities of accounts.
        The SOQL query is connected to the trigger context records by using the IN clause and binding the Trigger.new variable in the WHERE clause—WHERE Id IN :Trigger.new. This WHERE condition filters the accounts to only those records that fired this trigger.
      
      Combining the two parts in the query results in the records we want in one call: the accounts in this trigger with the related opportunities of each account.
      After the records and their related records are obtained, the for loop iterates over the records of interest by using the collection variable—in this case, acctsWithOpps. The collection variable holds the results of the SOQL query. That way, the for loop iterates only over the records we want to operate on. Because the related records are already obtained, no further queries are needed within the loop to get those records.
      trigger SoqlTriggerBulk on Account(after update) {  
    // Perform SOQL query once.    
    // Get the accounts and their related opportunities.
    List&lt;Account&gt; acctsWithOpps = 
        [SELECT Id,(SELECT Id,Name,CloseDate FROM Opportunities) 
         FROM Account WHERE Id IN :Trigger.new];
    // Iterate over the returned accounts    
    for(Account a : acctsWithOpps) { 
        Opportunity[] relatedOpps = a.Opportunities;  
        // Do some other processing
    }
}Copy
      
      Alternatively, if you don’t need the account parent records, you can retrieve only the opportunities that are related to the accounts within this trigger context. This list is specified in the WHERE clause by matching the AccountId field of the opportunity to the ID of accounts in Trigger.new: WHERE AccountId IN :Trigger.new. The returned opportunities are for all accounts in this trigger context and not for a specific account. This next example shows the query used to get all related opportunities.
      trigger SoqlTriggerBulk on Account(after update) {  
    // Perform SOQL query once.    
    // Get the related opportunities for the accounts in this trigger.
    List&lt;Opportunity&gt; relatedOpps = [SELECT Id,Name,CloseDate FROM Opportunity
        WHERE AccountId IN :Trigger.new];
    // Iterate over the related opportunities    
    for(Opportunity opp : relatedOpps) { 
        // Do some other processing
    }
}Copy
      
      You can reduce the previous example in size by combining the SOQL query with the for loop in one statement: the SOQL for loop. Here is another version of this bulk trigger using a SOQL for loop.
      trigger SoqlTriggerBulk on Account(after update) {  
    // Perform SOQL query once.    
    // Get the related opportunities for the accounts in this trigger,
    // and iterate over those records.
    for(Opportunity opp : [SELECT Id,Name,CloseDate FROM Opportunity
        WHERE AccountId IN :Trigger.new]) {
        // Do some other processing
    }
}Copy
      
      
        
          
            
              
                
                  
                    
                      
                      
                        
                          Triggers execute on batches of 200 records at a time. So if 400 records cause a trigger to fire, the trigger fires twice, once for each 200 records. For this reason, you don’t get the benefit of SOQL for loop record batching in triggers, because triggers batch up records as well. The SOQL for loop is called twice in this example, but a standalone SOQL query would also be called twice. However, the SOQL for loop still looks more elegant than iterating over a collection variable!
                        
                      
                    
                  
                
              
            
          
        
      
      
        Performing Bulk DML
      
    
    
      When performing DML calls in a trigger or in a class, perform DML calls on a collection of sObjects when possible. Performing DML on each sObject individually uses resources inefficiently. The Apex runtime allows up to 150 DML calls in one transaction.
      This trigger performs an update call inside a for loop that iterates over related opportunities. If certain conditions are met, the trigger updates the opportunity description. In this example, the update statement is inefficiently called once for each opportunity. If a bulk account update operation fired the trigger, there can be many accounts. If each account has one or two opportunities, we can easily end up with over 150 opportunities. The DML statement limit is 150 calls.
      trigger DmlTriggerNotBulk on Account(after update) {   
    // Get the related opportunities for the accounts in this trigger.        
    List&lt;Opportunity&gt; relatedOpps = [SELECT Id,Name,Probability FROM Opportunity
        WHERE AccountId IN :Trigger.new];          
    // Iterate over the related opportunities
    for(Opportunity opp : relatedOpps) {      
        // Update the description when probability is greater 
        // than 50% but less than 100% 
        if ((opp.Probability &gt;= 50) &amp;&amp; (opp.Probability &lt; 100)) {
            opp.Description = 'New description for opportunity.';
            // Update once for each opportunity -- not efficient!
            update opp;
        }
    }    
}Copy
      
      This next example shows how to perform DML in bulk efficiently with only one DML call on a list of opportunities. The example adds the Opportunity sObject to update to a list of opportunities (oppsToUpdate) in the loop. Next, the trigger performs the DML call outside the loop on this list after all opportunities have been added to the list. This pattern uses only one DML call regardless of the number of sObjects being updated.
      trigger DmlTriggerBulk on Account(after update) {   
    // Get the related opportunities for the accounts in this trigger.        
    List&lt;Opportunity&gt; relatedOpps = [SELECT Id,Name,Probability FROM Opportunity
        WHERE AccountId IN :Trigger.new];
    List&lt;Opportunity&gt; oppsToUpdate = new List&lt;Opportunity&gt;();
    // Iterate over the related opportunities
    for(Opportunity opp : relatedOpps) {      
        // Update the description when probability is greater 
        // than 50% but less than 100% 
        if ((opp.Probability &gt;= 50) &amp;&amp; (opp.Probability &lt; 100)) {
            opp.Description = 'New description for opportunity.';
            oppsToUpdate.add(opp);
        }
    }
    // Perform DML on a collection
    update oppsToUpdate;
}Copy
      
    
    
      
        Bulk Design Pattern in Action: Example of Getting Related Records
      
      Let’s apply the design patterns you’ve learned by writing a trigger that accesses accounts’ related opportunities. Modify the trigger example from the previous unit for the AddRelatedRecord trigger. The AddRelatedRecord trigger operates in bulk, but the one from the previous unit isn’t as efficient as it could be because it iterates over all Trigger.New&nbsp;sObject records. This next example modifies both the trigger code and the SOQL query to get only the records of interest and then iterate over those records. If you haven’t created this trigger, don’t worry—you can create it in this section.
      Let’s start by reviewing the requirements for the AddRelatedRecord trigger. The trigger fires after accounts are inserted or updated. The trigger adds a default opportunity for every account that doesn’t already have an opportunity.&nbsp;
      First of all, newly-inserted accounts never have a default opportunity, so we definitely need to add one. But for updated accounts, we need to determine whether they have a related opportunity or not. So let’s separate how we process inserts and updates by using a switch statement on the Trigger.operationType context variable. And then keep track of the accounts we need to process with a toProcess variable. For example:
      List&lt;Account&gt; toProcess = null;
switch on Trigger.operationType {
    when AFTER_INSERT {
        // do stuff
    }
    when AFTER_UPDATE {
        // do stuff
    }
}Copy
      
      For all account inserts, we simply assign the new accounts to the toProcess list:
    
    when AFTER_INSERT {
     toProcess = Trigger.New;
}Copy
    
    
      For updates, we must figure out which existing accounts in this trigger don’t already have a related opportunity. Because this trigger is an after trigger, we can query the affected records from the database. Here’s the SOQL statement, the results of which we assign to the toProcess list.
    
    when AFTER_UPDATE {
     toProcess = [SELECT Id,Name FROM Account
                  WHERE Id IN :Trigger.New AND
                  Id NOT IN (SELECT AccountId FROM Opportunity WHERE AccountId in :Trigger.New)];
}Copy
    
    
      
      We now use a for loop to iterate through the toProcess list of accounts and add a related default opportunity to oppList. When we’re finished, we bulk add the list of opportunities using the insert DML statement. &nbsp;Here’s how to create or update the complete trigger.
      
        If you’ve already created the AddRelatedRecord trigger in the previous unit, modify the trigger by replacing its contents with the following trigger. Otherwise, add the following trigger using the Developer Console and enter AddRelatedRecordfor the trigger name.
          trigger AddRelatedRecord on Account(after insert, after update) {
    List&lt;Opportunity&gt; oppList = new List&lt;Opportunity&gt;();
    // Add an opportunity for each account if it doesn't already have one.
    // Iterate over accounts that are in this trigger but that don't have opportunities.
    List&lt;Account&gt; toProcess = null;
    switch on Trigger.operationType {
        when AFTER_INSERT {
        // All inserted Accounts will need the Opportunity, so there is no need to perform the query
            toProcess = Trigger.New;
        }
        when AFTER_UPDATE {
            toProcess = [SELECT Id,Name FROM Account
                         WHERE Id IN :Trigger.New AND
                         Id NOT IN (SELECT AccountId FROM Opportunity WHERE AccountId in :Trigger.New)];
        }
    }
    for (Account a : toProcess) {
        // Add a default opportunity for this account
        oppList.add(new Opportunity(Name=a.Name + ' Opportunity',
                                    StageName='Prospecting',
                                    CloseDate=System.today().addMonths(1),
                                    AccountId=a.Id));
    }
    if (oppList.size() &gt; 0) {
        insert oppList;
    }
}Copy
          
        
        To test the trigger, create an account in the Salesforce user interface and name it Lions &amp; Cats.
        In the Opportunities related list on the account’s page, find the new opportunity Lions &amp; Cats. The trigger added the opportunity automatically!
2023-04-04 11:28:00,021 - INFO - Related goals: 1, 8, 9, 10, 19
2023-04-04 11:28:01,048 - INFO - Processed paragraph 3 in 1_apex_triggers_apex_triggers_bulk_content.txt: Resources
  
  
    
      Apex Developer Guide: Triggers
2023-04-04 11:28:01,049 - INFO - No related goals found
2023-04-04 11:28:24,340 - INFO - Processed paragraph 4 in 1_apex_triggers_apex_triggers_bulk_content.txt: 
2023-04-04 11:28:24,340 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:28:26,453 - INFO - Processed paragraph 0 in 1_asynchronous_apex_async_apex_future_methods_content.txt: 
2023-04-04 11:28:26,453 - INFO - Related goals: 1
2023-04-04 11:28:29,222 - INFO - Processed paragraph 1 in 1_asynchronous_apex_async_apex_future_methods_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll know:
2023-04-04 11:28:29,222 - INFO - No related goals found
2023-04-04 11:28:30,233 - INFO - Processed paragraph 2 in 1_asynchronous_apex_async_apex_future_methods_content.txt: When to use future methods.
      The limitations of using future methods.
      How to use future methods for callouts.
      Future method best practices.
2023-04-04 11:28:30,233 - INFO - No related goals found
2023-04-04 11:28:35,754 - INFO - Processed paragraph 3 in 1_asynchronous_apex_async_apex_future_methods_content.txt: 
2023-04-04 11:28:35,754 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:28:36,807 - INFO - Processed paragraph 4 in 1_asynchronous_apex_async_apex_future_methods_content.txt: Follow Along with Trail Together
  
  Want to follow along with an instructor as you work through this step? Take a look at this video, part of the Trail Together series on Trailhead Live.
2023-04-04 11:28:36,808 - INFO - No related goals found
2023-04-04 11:28:44,380 - INFO - Processed paragraph 5 in 1_asynchronous_apex_async_apex_future_methods_content.txt: (This clip starts at the 9:39 minute mark, in case you want to rewind and watch the beginning of the step again.)&nbsp;
  
    Future Apex
  
  
    Future Apex is used to run processes in a separate thread, at a later time when system resources become available.
    Note: Technically, you use the @future annotation to identify methods that run asynchronously. However, because "methods identified with the @future annotation" is laborious, they are commonly referred to as "future methods" and that’s how we’ll reference them for the remainder of this module.
    When using synchronous processing, all method calls are made from the same thread that is executing the Apex code, and no additional processing can occur until the process is complete. You can use future methods for any operation you’d like to run asynchronously in its own thread. This provides the benefits of not blocking the user from performing other operations and providing higher governor and execution limits for the process. Everyone’s a winner with asynchronous processing.
    Future methods are typically used for: 
      
        Callouts to external Web services. If you are making callouts from a trigger or after performing a DML operation, you must use a future or queueable method. A callout in a trigger would hold the database connection open for the lifetime of the callout and that is a "no-no" in a multitenant environment.
        Operations you want to run in their own thread, when time permits such as some sort of resource-intensive calculation or processing of records.
        Isolating DML operations on different sObject types to prevent the mixed DML error. This is somewhat of an edge-case but you may occasionally run across this issue. See sObjects That Cannot Be Used Together in DML Operations for more details.
2023-04-04 11:28:44,380 - INFO - Related goals: 1, 11
2023-04-04 11:28:45,742 - INFO - Processed paragraph 6 in 1_asynchronous_apex_async_apex_future_methods_content.txt: 
2023-04-04 11:28:45,742 - INFO - Related goals: 1, 3, 13
2023-04-04 11:28:53,948 - INFO - Processed paragraph 7 in 1_asynchronous_apex_async_apex_future_methods_content.txt: Future Method Syntax
  
  
    Future methods must be static methods, and can only return a void type. The specified parameters must be primitive data types, arrays of primitive data types, or collections of primitive data types. Notably, future methods can’t take standard or custom objects as arguments. A common pattern is to pass the method a List of record IDs that you want to process asynchronously.
    
public class SomeClass {
  @future
  public static void someFutureMethod(List&lt;Id&gt; recordIds) {
    List&lt;Account&gt; accounts = [Select Id, Name from Account Where Id IN :recordIds];
    // process account records to do awesome stuff
  }
}Copy
    
    
      
        
          
            
            
              
                The reason why objects can’t be passed as arguments to future methods is because the object can change between the time you call the method and the time that it actually executes. Remember, future methods are executed when system resources become available. In this case, the future method may have an old object value when it actually executes, which can cause all sorts of bad things to happen.
              
            
          
        
      
    
    It’s important to note that future methods are not guaranteed to execute in the same order as they are called. We'll say it again, because it's crucial for you to remember: future methods are not guaranteed to execute in the same order as they are called. When using future methods, it’s also possible that two future methods could run concurrently, which could result in record locking and a nasty runtime error if the two methods were updating the same record.
    
      
        Sample Callout Code
      
      To make a Web service callout to an external service or API, you create an Apex class with a future method that is marked with (callout=true). The class below has methods for making the callout both synchronously and asynchronously where callouts are not permitted. We insert a record into a custom log object to track the status of the callout simply because logging is always fun to do!
      
public class SMSUtils {
    // Call async from triggers, etc, where callouts are not permitted.
    @future(callout=true)
    public static void sendSMSAsync(String fromNbr, String toNbr, String m) {
        String results = sendSMS(fromNbr, toNbr, m);
        System.debug(results);
    }
    // Call from controllers, etc, for immediate processing
    public static String sendSMS(String fromNbr, String toNbr, String m) {
        // Calling 'send' will result in a callout
        String results = SmsMessage.send(fromNbr, toNbr, m);
        insert new SMS_Log__c(to__c=toNbr, from__c=fromNbr, msg__c=results);
        return results;
    }
}Copy
2023-04-04 11:28:53,949 - INFO - Related goals: 1, 7, 9, 19
2023-04-04 11:28:58,952 - INFO - Processed paragraph 8 in 1_asynchronous_apex_async_apex_future_methods_content.txt: 
2023-04-04 11:28:58,952 - INFO - Related goals: 2
2023-04-04 11:29:29,176 - INFO - error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID e9df0a0fc9b27d7de68028f9df327429 in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
2023-04-04 11:29:29,176 - ERROR - Error: That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID e9df0a0fc9b27d7de68028f9df327429 in your message.)
2023-04-04 11:29:29,193 - INFO - Processed paragraph 9 in 1_asynchronous_apex_async_apex_future_methods_content.txt: Test Classes
  
  
    Testing future methods is a little different than typical Apex testing. To test future methods, enclose your test code between the startTest() and stopTest() test methods. The system collects all asynchronous calls made after the startTest(). When stopTest() is executed, all these collected asynchronous processes are then run synchronously. You can then assert that the asynchronous call operated properly.
    
      
        
          
            
            
              
                Test code cannot actually send callouts to external systems, so you’ll have to ‘mock’ the callout for test coverage. Check out the Apex Integration Services module for complete details on mocking callouts for testing.
              
            
          
        
      
    
    Here’s our mock callout class used for testing. The Apex testing framework utilizes this ‘mock’ response instead of making the actual callout to the REST API endpoint.
    
@isTest
public class SMSCalloutMock implements HttpCalloutMock {
    public HttpResponse respond(HttpRequest req) {
        // Create a fake response
        HttpResponse res = new HttpResponse();
        res.setHeader('Content-Type', 'application/json');
        res.setBody('{"status":"success"}');
        res.setStatusCode(200);
        return res;
    }
}Copy
    
    The test class contains a single test method (testSendSms() in this example), which tests both the asynchronous and synchronous methods as the former calls the latter.
    
@IsTest
private class Test_SMSUtils {
  @IsTest
  private static void testSendSms() {
    Test.setMock(HttpCalloutMock.class, new SMSCalloutMock());
    Test.startTest();
      SMSUtils.sendSMSAsync('111', '222', 'Greetings!');
    Test.stopTest();
    // runs callout and check results
    List&lt;SMS_Log__c&gt; logs = [select msg__c from SMS_Log__c];
    System.assertEquals(1, logs.size());
    System.assertEquals('success', logs[0].msg__c);
  }
}Copy
2023-04-04 11:29:29,193 - INFO - No related goals found
2023-04-04 11:29:44,122 - INFO - Processed paragraph 10 in 1_asynchronous_apex_async_apex_future_methods_content.txt: 
2023-04-04 11:29:44,122 - INFO - Related goals: 1, 2, 3, 4, 6, 13, 14, 16, 16, 20, 21, 22
2023-04-04 11:29:48,138 - INFO - Processed paragraph 11 in 1_asynchronous_apex_async_apex_future_methods_content.txt: Best Practices
  
  
    Because every future method invocation adds one request to the asynchronous queue, avoid design patterns that add large numbers of future requests over a short period of time. If your design has the potential to add 2000 or more requests at a time, requests could get delayed due to flow control. Here are some best practices you want to keep in mind: 
      
        Ensure that future methods execute as fast as possible.
        If using Web service callouts, try to bundle all callouts together from the same future method, rather than using a separate future method for each callout.
        Conduct thorough testing at scale. Test that a trigger enqueuing the @future calls is able to handle a trigger collection of 200 records. This helps determine if delays may occur given the design at current and future volumes.
        Consider using Batch Apex instead of future methods to process large number of records asynchronously. This is more efficient than creating a future request for each record.
2023-04-04 11:29:48,138 - INFO - Related goals: 1, 10
2023-04-04 11:29:58,128 - INFO - Processed paragraph 12 in 1_asynchronous_apex_async_apex_future_methods_content.txt: 
2023-04-04 11:29:58,128 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 16, 16, 18, 19, 20, 21, 22
2023-04-04 11:29:59,574 - INFO - Processed paragraph 13 in 1_asynchronous_apex_async_apex_future_methods_content.txt: Things to Remember
  
  
    Future methods are a great tool, but with great power comes great responsibility. Here are some things to keep in mind when using them: 
      
        Methods with the @future annotation must be static methods, and can only return a void type.
        The specified parameters must be primitive data types, arrays of primitive data types, or collections of primitive data types; future methods can’t take objects as arguments.
        Future methods won’t necessarily execute in the same order they are called. In addition, it’s possible that two future methods could run concurrently, which could result in record locking if the two methods were updating the same record.
        Future methods can’t be used in Visualforce controllers in getMethodName(), setMethodName(), nor in the constructor.
        You can’t call a future method from a future method. Nor can you invoke a trigger that calls a future method while running a future method. See the link in the Resources for preventing recursive future method calls.
        The getContent() and getContentAsPDF() methods can’t be used in methods with the @future annotation.
        You’re limited to 50 future calls per Apex invocation, and there’s an additional limit on the number of calls in a 24-hour period. For more information on limits, see the link below.
2023-04-04 11:29:59,574 - INFO - Related goals: 1, 10
2023-04-04 11:30:05,486 - INFO - Processed paragraph 14 in 1_asynchronous_apex_async_apex_future_methods_content.txt: 
2023-04-04 11:30:05,486 - INFO - Related goals: 2
2023-04-04 11:30:07,720 - INFO - Processed paragraph 15 in 1_asynchronous_apex_async_apex_future_methods_content.txt: Resources
2023-04-04 11:30:07,720 - INFO - No related goals found
2023-04-04 11:30:08,817 - INFO - Processed paragraph 16 in 1_asynchronous_apex_async_apex_future_methods_content.txt: Apex Developer Guide: Future Methods
      Apex Reference Guide: System.isFuture() method
      Apex Developer Guide: sObjects That Cannot Be Used Together in DML Operations
      Apex Developer Guide: Execution Governors and Limits
2023-04-04 11:30:08,817 - INFO - No related goals found
2023-04-04 11:30:16,618 - INFO - Processed paragraph 17 in 1_asynchronous_apex_async_apex_future_methods_content.txt: 
2023-04-04 11:30:16,618 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:30:26,166 - INFO - Processed paragraph 0 in 1_cli-basics_cli-2_content.txt: 
2023-04-04 11:30:26,166 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 16, 20, 22
2023-04-04 11:30:27,191 - INFO - Processed paragraph 1 in 1_cli-basics_cli-2_content.txt: Learning Objectives
2023-04-04 11:30:27,191 - INFO - No related goals found
2023-04-04 11:30:30,321 - INFO - Processed paragraph 2 in 1_cli-basics_cli-2_content.txt: After completing this unit, you'll be able to:
2023-04-04 11:30:30,321 - INFO - No related goals found
2023-04-04 11:30:31,301 - INFO - Processed paragraph 3 in 1_cli-basics_cli-2_content.txt: Name the three main parts of a command structure.
  Identify the command used to change directories through the command line.
2023-04-04 11:30:31,301 - INFO - No related goals found
2023-04-04 11:30:32,825 - INFO - Processed paragraph 4 in 1_cli-basics_cli-2_content.txt: General Commands
2023-04-04 11:30:32,826 - INFO - No related goals found
2023-04-04 11:30:33,975 - INFO - Processed paragraph 5 in 1_cli-basics_cli-2_content.txt: Let's take a look at some commands to help you learn fundamental skills such as navigating in the command line and creating directories. These skills help you get more comfortable working in the command-line tool.
Before you run a command, let's take a look at how commands are structured.
2023-04-04 11:30:33,976 - INFO - No related goals found
2023-04-04 11:30:34,985 - INFO - Processed paragraph 6 in 1_cli-basics_cli-2_content.txt: Command Structure
2023-04-04 11:30:34,985 - INFO - No related goals found
2023-04-04 11:30:36,013 - INFO - Processed paragraph 7 in 1_cli-basics_cli-2_content.txt: All commands have three parts. Let's go through each of these parts, and then run some commands. 
Command example:
 $ command -flag arguments
Here is an example of a Salesforce command to create a new sfdx project that contains a flag and an argument.
2023-04-04 11:30:36,014 - INFO - No related goals found
2023-04-04 11:30:37,031 - INFO - Processed paragraph 8 in 1_cli-basics_cli-2_content.txt: The command is: sfdx force:project:create
2023-04-04 11:30:37,031 - INFO - No related goals found
2023-04-04 11:30:38,222 - INFO - Processed paragraph 9 in 1_cli-basics_cli-2_content.txt: The flag -n is required and tells the system what to name your new project.
  The argument is MyProject which is the name we are assigning to the project.
2023-04-04 11:30:38,222 - INFO - No related goals found
2023-04-04 11:30:39,264 - INFO - Processed paragraph 10 in 1_cli-basics_cli-2_content.txt: Let's take a look at each section of the command and explore how the command is structured today.
2023-04-04 11:30:39,264 - INFO - No related goals found
2023-04-04 11:30:41,418 - INFO - Processed paragraph 11 in 1_cli-basics_cli-2_content.txt: Command. The command (sometimes referred to as utility) comes first. This tells the system what actions you want the tool to take. 
    
  
  
Flag. Flags (sometimes called options) specify a value that triggers a process or tells the command what other variables to include. Most values in flags are Boolean (true or false) or tell the system you want to set a variable such as naming a project. 
    Flags are identified by one hyphen - and followed by a value. Some commands may have required flags. Some flags may require arguments. For example, when creating a new sfdx project, if you want to name your project, you use the -n flag and then add the name of your project as the argument -n MyProject.   Switches are a lot like flags but don't require arguments. Switches are identified by two hyphens -- and followed by a value. 
    For example, let's take a look at the Salesforce CLI sfdx force:org:create command and use the switch that sets the scratch org as your default. Instead of using the flag -s, you use the switch --setdefault. By using this switch when you create a scratch org, the system remembers your username and authentication so you don't have to include your username in commands later on. For Salesforce CLI commands, we've baked in a lot of flag options as switches to simplify working in the command-line tool.   
    
  
  
Arguments. Arguments tell the system what variable you want to set or which process you want to invoke. Arguments usually follow a flag after a space.   Example: -n MyProject
2023-04-04 11:30:41,419 - INFO - No related goals found
2023-04-04 11:31:06,626 - INFO - Processed paragraph 12 in 1_cli-basics_cli-2_content.txt: 
2023-04-04 11:31:06,626 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:31:07,724 - INFO - Processed paragraph 13 in 1_cli-basics_cli-2_content.txt: There shouldn't be any spaces in an argument. If the above example was written like this: -n My Project the space between My and Project will be misinterpreted as two arguments and likely fail.
2023-04-04 11:31:07,724 - INFO - No related goals found
2023-04-04 11:31:08,835 - INFO - Processed paragraph 14 in 1_cli-basics_cli-2_content.txt: Now that you know what flags and arguments are, let's discuss why and when you use them.
2023-04-04 11:31:08,835 - INFO - No related goals found
2023-04-04 11:31:09,945 - INFO - Processed paragraph 15 in 1_cli-basics_cli-2_content.txt: Flags, Switches, and Arguments
2023-04-04 11:31:09,945 - INFO - No related goals found
2023-04-04 11:31:11,031 - INFO - Processed paragraph 16 in 1_cli-basics_cli-2_content.txt: You've learned that most commands may have additional text required called flags, switches, or arguments. Depending on what commands you're running, some flags and arguments can change the outcome of your project. 
For example, let's take a look at the Salesforce CLI command to create a scratch org and learn how using flags can streamline running commands later. sfdx force:org:create -f project-scratch-def.json -s
2023-04-04 11:31:11,031 - INFO - No related goals found
2023-04-04 11:31:13,129 - INFO - Processed paragraph 17 in 1_cli-basics_cli-2_content.txt: Command: The first part of the text is the command, sfdx force:org:create. We are telling the system we want to create a scratch org.
  
Flags: The remaining part of the command has two flags. 
      The first flag -f is a required flag. This flag tells the system to reference the filename that outlines what template to reference to create the scratch org.
      The second flag -s sets the newly created scratch org as the default. This flag does not require an argument because you can also write this flag as a switch --setdefaultusername. This flag tells the system to remember your username so when you run commands for this scratch org later (such as when you push or pull metadata), you won't have to enter the username or an alias because you've set the scratch org as your default using the -s flag.
    
  
  
Argument: The file's name being referenced, project-scratch-def.json is the argument in this command. This file determines what features and special org set up (if any) is needed for this new scratch org.
2023-04-04 11:31:13,129 - INFO - No related goals found
2023-04-04 11:31:14,577 - INFO - Processed paragraph 18 in 1_cli-basics_cli-2_content.txt: Next, let's learn how to run commands in the command-line window. For mac, the commands below are executed in bash or zsh. For windows, the commands below are executed in PowerShell.
2023-04-04 11:31:14,577 - INFO - No related goals found
2023-04-04 11:31:15,989 - INFO - Processed paragraph 19 in 1_cli-basics_cli-2_content.txt: How to Run Commands
2023-04-04 11:31:15,989 - INFO - No related goals found
2023-04-04 11:31:17,090 - INFO - Processed paragraph 20 in 1_cli-basics_cli-2_content.txt: To run a command, you type the command in the command-line window and press enter. If you see the dollar sign $ (macOS / Linux) or the greater symbol &gt; (Windows) on the next line, the command passed. If a command doesn't pass, an error returns in the command-line window, and usually has a description of the error. As you run commands, keep in mind capitalization matters. For example, myProject and MyProject are two different project names.
Now that you know how to run commands in the command-line tool, practice this skill with navigation commands.
2023-04-04 11:31:17,090 - INFO - No related goals found
2023-04-04 11:31:18,098 - INFO - Processed paragraph 21 in 1_cli-basics_cli-2_content.txt: Navigation Commands
2023-04-04 11:31:18,098 - INFO - No related goals found
2023-04-04 11:31:20,246 - INFO - Processed paragraph 22 in 1_cli-basics_cli-2_content.txt: Navigation commands are the most frequent command you'll likely run. As you create projects and build directories, you need to learn how to navigate in and out of each directory. 
Read the command line to see where you are now: 
To see where you are in your directory, always refer to the command-line path. If you open up a new command-line window, you'll likely land on the starting directory path.
2023-04-04 11:31:20,246 - INFO - No related goals found
2023-04-04 11:31:21,397 - INFO - Processed paragraph 23 in 1_cli-basics_cli-2_content.txt: macOS starting directory:
    yourname-ltm:~ yourname$
  
  
Windows starting directory:
    PS C:\Users\yourname&gt;
2023-04-04 11:31:21,397 - INFO - No related goals found
2023-04-04 11:31:23,683 - INFO - Processed paragraph 24 in 1_cli-basics_cli-2_content.txt: Change your directory: 
To navigate to one step into the next directory, type cd (stands for change directory) and write out the directory name. Let's go ahead and navigate to the Documents directory. This command is the same for both OS. 
cd Documents 
Create a new directory:
Now create a new empty directory by typing the mkdir command with the name of the directory you'd like to create. This command is the same for both OS. mkdir Resume 
You've just created a new directory inside the Documents directory. 
Navigate through multiple directories:
Now let's say you want to navigate deeper into multiple directories, you still use the cd command, but you add the directory path where you want to navigate. Depending on your OS, this path can be written differently. Now navigate to a directory named Resume in Documents. Imagine you are navigating to a folder that is within another folder. (Remember, capitalization matters!)
2023-04-04 11:31:23,684 - INFO - No related goals found
2023-04-04 11:31:24,825 - INFO - Processed paragraph 25 in 1_cli-basics_cli-2_content.txt: macOs: cd ~/Documents/Resume
2023-04-04 11:31:24,825 - INFO - No related goals found
2023-04-04 11:31:26,254 - INFO - Processed paragraph 26 in 1_cli-basics_cli-2_content.txt: Windows: cd ~\Documents\Resume
2023-04-04 11:31:26,255 - INFO - No related goals found
2023-04-04 11:31:27,279 - INFO - Processed paragraph 27 in 1_cli-basics_cli-2_content.txt: You should now be in the Resume directory.
2023-04-04 11:31:27,280 - INFO - No related goals found
2023-04-04 11:31:28,381 - INFO - Processed paragraph 28 in 1_cli-basics_cli-2_content.txt: 
2023-04-04 11:31:28,381 - INFO - No related goals found
2023-04-04 11:31:29,435 - INFO - Processed paragraph 29 in 1_cli-basics_cli-2_content.txt: Navigate one level back:
Sometimes you navigate into directories and want to navigate one directory level back up. To do this, you still use the cd command and follow with two periods side by side. This command is the same for both OS. 
cd .. 
You should now be back at the Documents directly level. 
If you get lost and need to see your print working directory:
Run this command if you want to see the directory path and location of your current location.
2023-04-04 11:31:29,435 - INFO - No related goals found
2023-04-04 11:31:30,490 - INFO - Processed paragraph 30 in 1_cli-basics_cli-2_content.txt: macOs: pwd
2023-04-04 11:31:30,490 - INFO - No related goals found
2023-04-04 11:31:31,510 - INFO - Processed paragraph 31 in 1_cli-basics_cli-2_content.txt: Windows: cd
2023-04-04 11:31:31,510 - INFO - No related goals found
2023-04-04 11:31:32,482 - INFO - Processed paragraph 32 in 1_cli-basics_cli-2_content.txt: Now you're navigating like a pro!
2023-04-04 11:31:32,483 - INFO - No related goals found
2023-04-04 11:31:33,498 - INFO - Processed paragraph 33 in 1_cli-basics_cli-2_content.txt: View Your Command-Line History
2023-04-04 11:31:33,498 - INFO - No related goals found
2023-04-04 11:31:34,521 - INFO - Processed paragraph 34 in 1_cli-basics_cli-2_content.txt: To see a history log of the commands you've run, type: history. Once you run the command, you'll see a log of commands with numbers beside each command.
If you want to rerun a command for macOS/Linux, you can type !, add the number of the command, and press Enter to rerun the command.
For example: !499 will rerun the change directory command.
2023-04-04 11:31:34,521 - INFO - No related goals found
2023-04-04 11:31:57,281 - INFO - Processed paragraph 35 in 1_cli-basics_cli-2_content.txt: 
2023-04-04 11:31:57,283 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:31:58,321 - INFO - Processed paragraph 36 in 1_cli-basics_cli-2_content.txt: Next, let's set up the command-line tools.
2023-04-04 11:31:58,321 - INFO - No related goals found
2023-04-04 11:32:27,115 - INFO - Processed paragraph 0 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:32:27,116 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:32:28,546 - INFO - Processed paragraph 1 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll be able to:
        Define the different types of object relationships and their typical use cases.
        Create or modify a lookup relationship.
        Create or modify a master-detail relationship.
2023-04-04 11:32:28,546 - INFO - No related goals found
2023-04-04 11:32:54,426 - INFO - Processed paragraph 2 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:32:54,426 - INFO - No related goals found
2023-04-04 11:32:55,880 - INFO - Processed paragraph 3 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Accessibility
              
              This unit requires some additional instructions for screen reader users. To access a detailed screen reader version of this unit, click the link below:
              Open Trailhead screen reader instructions.
            
          
        
      
    
  
  
    What Are Object Relationships?
  
  Now that we’re comfortable with objects and fields, it’s time to take things to the next level with object relationships. Object relationships are a special field type that connects two objects together.
  
    Let’s think about a standard object like Account. If a sales rep opens an account, they’ve probably been talking to a few people at that account’s company. They’ve probably made contacts like executives or IT managers and stored those contacts’ information in Salesforce.
    It makes sense, then, that there should be a relationship between the Account object and the Contact object. And there is!
    When you look at an account record in Salesforce, you can see that there’s a section for contacts on the Related tab. You can also see that there’s a button that lets you quickly add a contact to an account.
    
    The Account to Contact relationship is an example of a standard relationship in Salesforce. But just like objects and fields, you can build custom relationships as well. In the last unit, you created two objects: Property and Offer. Wouldn’t it be great if all the offers made on a home showed up on its record in Salesforce?
    Before we do that, let’s talk about the different kinds of relationships you can create in Salesforce.
2023-04-04 11:32:55,881 - INFO - No related goals found
2023-04-04 11:33:09,888 - INFO - Processed paragraph 4 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:33:09,888 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 16, 19, 20, 21, 22
2023-04-04 11:33:14,686 - INFO - Processed paragraph 5 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: The Wide World of Object Relationships
  
  
    There are two main types of object relationships: lookup and master-detail.
    
      Lookup Relationships
      In our Account to Contact example above, the relationship between the two objects is a lookup relationship. A lookup relationship essentially links two objects together so that you can “look up” one object from the related items on another object.
      Lookup relationships can be one-to-one or one-to-many. The Account to Contact relationship is one-to-many because a single account can have many related contacts. For our DreamHouse scenario, you could create a one-to-one relationship between the Property object and a Home Seller object.
    
    
      Master-Detail Relationships
      
        While lookup relationships are fairly casual, master-detail relationships are a bit tighter. In this type of relationship, one object is the master and another is the detail. The master object controls certain behaviors of the detail object, like who can view the detail’s data.
        For example, let’s say the owner of a property wanted to take their home off the market. DreamHouse wouldn’t want to keep any offers made on that property. With a master-detail relationship between Property and Offer, you can delete the property and all its associated offers from your system.
        
      
    
    
      More on Relationships
      Just like in real life, relationships are complicated. Here’s a bit more information to help you differentiate between lookup and master-detail relationships.
      Typically, you use lookup relationships when objects are only related in some cases. Sometimes a contact is associated with a specific account, but sometimes it’s just a contact. Objects in lookup relationships usually work as stand-alone objects and have their own tabs in the user interface.
      In a master-detail relationship, the detail object doesn’t work as a stand-alone. It’s highly dependent on the master. In fact, if a record on the master object is deleted, all its related detail records are deleted as well. When you’re creating master-detail relationships, you always create the relationship field on the detail object.
      Finally, you could run into a third relationship type called a hierarchical relationship. Hierarchical relationships are a special type of lookup relationship. The main difference between the two is that hierarchical relationships are only available on the User object. You can use them for things like creating management chains between users.
      When you start adding relationships between objects, remember that you’re increasing the complexity of your data model. That’s not a bad thing, but be extra cautious when you do things like change and delete objects, records, or fields. Check out the resources section for more information on relationship behaviors.
2023-04-04 11:33:14,687 - INFO - Related goals: 3
2023-04-04 11:33:38,301 - INFO - Processed paragraph 6 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:33:38,302 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:33:39,376 - INFO - Processed paragraph 7 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Create a Custom Object
  
  
    
      We’re ready to jump back in with D’Angelo to build some relationships for the DreamHouse app. Let's say DreamHouse wanted a way to track users who mark particular properties as favorites on their website. This feature can help DreamHouse’s real estate brokers reach out to potential home buyers.
      
        
          
            
              
              
                
                  Even if you're completing this module as part of the Admin Beginner trail, be sure you use the new Trailhead Playground you created in the previous unit.
                
              
            
          
        
      
      To start, create a custom object called Favorite and add a field to the object.
    
    
      Click the Object Manager tab.
      Click Create | Custom Object in the top-right corner.
      For Label, enter Favorite.
      For Plural Label, enter Favorites.
      Check the box for Launch New Custom Tab Wizard after saving this custom object.
      Leave the rest of the values as default and click Save.
      On the New Custom Object Tab page, click the Tab Style field and select a style you like.
      Click Next, Next, and Save.
2023-04-04 11:33:39,377 - INFO - No related goals found
2023-04-04 11:33:46,378 - INFO - Processed paragraph 8 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:33:46,378 - INFO - Related goals: 1, 3, 13
2023-04-04 11:33:48,231 - INFO - Processed paragraph 9 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Create a Lookup Relationship
  
  
    
      We’re going to create two custom relationship fields on the Favorite object. First, let’s create a lookup relationship that lists the users who select Favorite for a property.
    
    
      From Setup, go to Object Manager | Favorite.
      On the sidebar, click Fields &amp; Relationships.
      Click New.
      Choose Lookup Relationship and click Next.
      For Related To, choose Contact. For the purposes of DreamHouse, contacts represent potential home buyers.
      Click Next.
      For Field Name, enter Contact, then click Next.
      Click Next, Next, and Save.
2023-04-04 11:33:48,231 - INFO - No related goals found
2023-04-04 11:33:51,082 - INFO - Processed paragraph 10 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:33:51,083 - INFO - Related goals: 8
2023-04-04 11:33:53,224 - INFO - Processed paragraph 11 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Create a Master-Detail Relationship
  
  
    
      Now, we’re going to create a second relationship field. We want a master-detail relationship where Property is the master and Favorite is the detail.
    
    
      On the Object Manager page for the custom object, click Fields &amp; Relationships.
      Click New.
      Select Master-Detail Relationship and click Next.
      For Related To, choose Property.
      Click Next.
      For Field Name, enter Property and click Next.
      Click Next, Next, and Save.
    Now, if you look at a Property record, you’ll see Favorites listed in the related tab.
    
      Add a Favorite Property
    
    Let's take a look at how to view favorite properties.
    
      From the App Launcher ( in the navigation bar), find and select Sales.
      Click the Properties tab in the navigation bar. If you don’t see it, look under the More dropdown.
      Click the name of a Property record.
      Click Related. You’ll see Favorites (0) in the related tab.
      Click New.
      Enter a name for Favorite Name, then click Save.
    
    
      Great job! Our Favorite object is all set up.
2023-04-04 11:33:53,224 - INFO - No related goals found
2023-04-04 11:34:20,391 - INFO - Processed paragraph 12 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:34:20,391 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:34:21,675 - INFO - Processed paragraph 13 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Resources
  
  
    
      
        Salesforce Help: Object Relationships Overview
        Salesforce Help: Considerations for Relationship
2023-04-04 11:34:21,675 - INFO - No related goals found
2023-04-04 11:34:22,717 - INFO - Processed paragraph 14 in 1_data_modeling_object_relationships+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Where possible, we changed noninclusive terms to align with our company value of Equality. This is a work in progress, so if you find a term to evaluate for inclusive language, click Provide feedback for this badge in the right sidebar to submit it.
2023-04-04 11:34:22,717 - INFO - No related goals found
2023-04-04 11:34:45,223 - INFO - Processed paragraph 0 in 1_developer_console_developer_console_source_code_content.txt: 
2023-04-04 11:34:45,223 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:34:46,343 - INFO - Processed paragraph 1 in 1_developer_console_developer_console_source_code_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll be able to:
        Create an Apex class.
        Execute Apex code.
        Create a Lightning component.
        Create a Visualforce page.
2023-04-04 11:34:46,344 - INFO - No related goals found
2023-04-04 11:35:38,639 - INFO - Processed paragraph 2 in 1_developer_console_developer_console_source_code_content.txt: 
2023-04-04 11:35:38,640 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:35:43,966 - INFO - Processed paragraph 3 in 1_developer_console_developer_console_source_code_content.txt: Create and Execute Apex Code
  
  
    Now that you’ve started to get comfortable with the Developer Console, let’s use it to view, modify, and run the systems powering your spaceship. In other words, let’s get cracking with some code!
    
      
        Create an Apex Class
      
      Apex is a Salesforce programming language that you can use to customize business processes in your org. If you like fancy words, you might call Apex a strongly typed, object-oriented language that allows developers to execute flow and transaction-control statements on the Lightning Platform server, in conjunction with calls to the Lightning Platform APIs. Or you can just call it a programming language that looks a lot like Java code and interacts with the data in your org. You use it to add business logic. For example, if you want to alert an account owner when contact information changes, Apex is the answer.
      To learn more about Apex and how it works, check out the Apex Basics &amp; Database module. For now, don’t worry too much about the code—our goal is to get to know the Developer Console.
      Say you need to change your flight path to avoid asteroid 2014 QO441. You don’t have time to contact the ground control team to tell them about your course correction. Let’s write some Apex code that sends an email to your Mission Specialist on Earth every time you change your flight path.
      
        
          In the Developer Console, select File | New | Apex Class.
          When prompted, name your Apex class EmailMissionSpecialist.
          When the text editor opens, copy and paste the following code into the EmailMissionSpecialist.apxc tab, replacing the tab’s original contents.public class EmailMissionSpecialist {
   // Public method
   public void sendMail(String address, String subject, String body) {
      // Create an email message object
      Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
      String[] toAddresses = new String[] {address};
      mail.setToAddresses(toAddresses);
      mail.setSubject(subject);
      mail.setPlainTextBody(body);
      // Pass this email message to the built-in sendEmail method 
      // of the Messaging class
      Messaging.SendEmailResult[] results = Messaging.sendEmail(
                                new Messaging.SingleEmailMessage[] { mail });
      // Call a helper method to inspect the returned results
      inspectResults(results);
   }
   // Helper method
   private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
      Boolean sendResult = true;
      // sendEmail returns an array of result objects.
      // Iterate through the list to inspect results. 
      // In this class, the methods send only one email, 
      // so we should have only one result.
      for (Messaging.SendEmailResult res : results) {
         if (res.isSuccess()) {
            System.debug('Email sent successfully');
         }
         else {
            sendResult = false;
            System.debug('The following errors occurred: ' + res.getErrors());                 
         }
      }
      return sendResult;
   }
}Copy
          
          Save your code using File | Save. The Developer Console checks to make sure that your code doesn’t contain any errors when you save it.Note: If your code isn’t syntactically correct, an error shows up in the Problems tab. You can use the error details to correct your code.
        
      
      If you close this window, you can use the console to open this class or any other saved Apex class. Let’s try that now.
          To close the EmailMissionSpecialist&nbsp;class, click the ‘X’ next to EmailMissionSpecialist.apxc, at the top of the tab.
          Select File | Open.
          In the Entity Type column, click Classes.
2023-04-04 11:35:43,967 - INFO - Related goals: 9
2023-04-04 11:35:47,792 - INFO - Processed paragraph 4 in 1_developer_console_developer_console_source_code_content.txt: In the Entities column, double-click the class you want to open.
        
      
    
    
      
        Execute an Apex Class
      
      Now that you’ve created your Apex class, your next step is to execute it using the Developer Console’s handy Execute Anonymous feature. This feature is a useful tool when you want to test your code and its results.
      But you have to be careful. All code that you run using this feature affects your org. For instance, if you delete data here, it’s also deleted in your database.
      
        
          Select Debug | Open Execute Anonymous Window. The Enter Apex Code window opens.
          Copy the following code and paste it into the Enter Apex Code window. EmailMissionSpecialist em = new EmailMissionSpecialist();
em.sendMail('Enter your email address', 'Flight Path Change', 
   'Mission Control 123: Your flight path has been changed to avoid collision '
   + 'with asteroid 2014 QO441.');Copy
          
          Replace Enter your email address&nbsp;with your email address.
          Click Execute, and then check your email to see whether the message was sent successfully.
        
      
      When you receive the email, you know that the communication systems are in working order—and that you’re one step closer to being ready to avoid that asteroid.
2023-04-04 11:35:47,793 - INFO - Related goals: 1, 9, 19
2023-04-04 11:35:55,352 - INFO - Processed paragraph 5 in 1_developer_console_developer_console_source_code_content.txt: 
2023-04-04 11:35:55,352 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:35:57,914 - INFO - Processed paragraph 6 in 1_developer_console_developer_console_source_code_content.txt: What Are Lightning Components?
      
      Lightning Components is a framework for developing mobile and desktop apps. You can use it to create responsive user interfaces for Lightning Platform apps. Lightning components also make it easier to build apps that work well across mobile and desktop devices.
      
        
          
            
              
              
                
                  As of the Spring ‘19 release (API version 45.0), you can build Lightning components using two programming models: the Lightning Web Components model and the original Aura Components model. Lightning web components and Aura components can coexist and interoperate on a page. This content covers Aura components. To learn more about Lightning Web Components, take the Lightning Web Components Basics module.
                
              
            
          
        
      
      You can use the Developer Console to create Aura components. Using the Developer Console, you can create a component bundle. A component bundle acts like a folder in that it contains components and all other related resources, such as style sheets, controllers, and design.
      To learn more about Aura components, zip through the nearest wormhole to the Aura Component Basics module. For now, we’ll focus on how to use the Developer Console to create them.
    
    
      
        Create an Aura Component
      
      You’re bound to encounter other humans as you evade asteroid 2014 QO441, and we want them to know you’re friendly so they don’t open fire on you. Fortunately, your ship has large display panels on the sides that are running the Salesforce app. (You knew those would come in handy someday!) Let’s create a component that greets any other spaceship nearby.
          Select File | New | Lightning Component. The window that pops up prompts you for a name and description.
          Name your component meetGreet and click Submit. The window also has options to configure your app’s tab, page, record page, and communities page. You can ignore these options. For now, we’re only focusing on writing basic Aura component code.
          Two tabs are created. Click the one labeled meetGreet.cmp. This file contains the opening and closing tags for Aura components.
          Between the opening and closing &lt;aura:component&gt; and &lt;/aura:component&gt;tags, copy and paste this line.   &lt;p&gt;Greetings, fellow humans! What’s your status?&lt;/p&gt;Copy
2023-04-04 11:35:57,915 - INFO - No related goals found
2023-04-04 11:35:59,774 - INFO - Processed paragraph 7 in 1_developer_console_developer_console_source_code_content.txt: To save the component, select File | Save.
        
      
      Congratulations: You’ve created your first Aura component using the Developer Console! To build it out completely there are a few more steps, but you can delegate that work to a crew member.
      For now, take a sneak peek at the list on the right-hand side of the window. It includes all the resources in a component bundle that you can use to build your component. If you click any item in the right sidebar, a corresponding resource opens. You can write code in the new resource to build the different parts of the component bundle. For instance, you can use the Style resource to add visual elements to your application and the Helper to add business logic.
      
      Here’s how you can open a saved Aura component or any of these resources.
          Select File | Open Lightning Resources.
          Type your component’s name in the search box to find your bundle, or select its folder from the list.
          To see the bundle’s resources, click the arrow next to the folder.
2023-04-04 11:35:59,774 - INFO - No related goals found
2023-04-04 11:36:00,895 - INFO - Processed paragraph 8 in 1_developer_console_developer_console_source_code_content.txt: Select the resource you want to work on, and then click Open Selected.
2023-04-04 11:36:00,895 - INFO - No related goals found
2023-04-04 11:36:23,329 - INFO - Processed paragraph 9 in 1_developer_console_developer_console_source_code_content.txt: 
2023-04-04 11:36:23,329 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:36:25,388 - INFO - Processed paragraph 10 in 1_developer_console_developer_console_source_code_content.txt: Create Visualforce Pages and Components
  
  
    
      You’ve learned how to use your console to create Apex code and Aura components. Now it’s time to check out Visualforce.
      Visualforce is a web development framework for building sophisticated user interfaces for mobile and desktop apps. These interfaces are hosted on the Lightning Platform. Your user interface can look like the standard Salesforce interface, or you can customize it.
      Now you must be wondering, what’s the difference between Visualforce and Lightning components? Visualforce is page-centric: When you save a record, the Visualforce page interacts with the server and reloads the user interface (UI). The Lightning components framework, in contrast, does much of its work on your device (on the client side, in geek speak). If you want to learn more about the differences between Visualforce and Lightning components, check out the Lightning Experience Development module.
      If you want to explore the world of Visualforce, check out the Visualforce Basics module.
      But first, let’s start building a Visualforce page using the Developer Console. Get ready to take the controls!
    
    
      
        Create a Visualforce Page
      
      You have a Flight Systems Checklist that your Control Engineers update every 2 hours, when they perform their engine and fuel tank safety checks. Let’s create a Visualforce page that they can use to report their findings.
      A functional Flight Systems Checklist page needs to interact with objects that store the values entered by the Control Engineers. But, for now, let’s focus on creating the UI. You can have your underlings create those custom objects.
      
        
          Select File | New | Visualforce Page.
          Name your page FlightSystemsChecklist.
          In the text editor, copy and paste the following code.&lt;apex:page sidebar="false"&gt;
&lt;!--Flight Systems Checklist Visualforce Page--&gt;
   &lt;h1&gt;Checklist&lt;/h1&gt;
   &lt;apex:form id="engineReadinessChecklist"&gt;
      &lt;apex:pageBlock title="Flight Systems Checklist"&gt;
         &lt;!--First Section--&gt;
         &lt;apex:pageBlockSection title="Engines"&gt;
            &lt;!--Adding Checkboxes--&gt;
            &lt;apex:inputCheckbox immediate="true"/&gt;Engine 1
            &lt;apex:inputCheckbox immediate="true"/&gt;Engine 2
            &lt;apex:inputCheckbox immediate="true"/&gt;Engine 3
            &lt;apex:inputCheckbox immediate="true"/&gt;Engine 4
            &lt;apex:inputCheckbox immediate="true"/&gt;Engine 5
            &lt;apex:inputCheckbox immediate="true"/&gt;Engine 6
         &lt;/apex:pageBlockSection&gt;
         &lt;!--Second Section--&gt;
         &lt;apex:pageBlockSection title="Fuel Tanks"&gt;
            &lt;apex:inputCheckbox immediate="true"/&gt;Tank 1
            &lt;apex:inputCheckbox immediate="true"/&gt;Tank 2
            &lt;apex:inputCheckbox immediate="true"/&gt;Tank 3
            &lt;apex:inputCheckbox immediate="true"/&gt;Tank 4
            &lt;apex:inputCheckbox immediate="true"/&gt;Tank 5
            &lt;apex:inputCheckbox immediate="true"/&gt;Tank 6
         &lt;/apex:pageBlockSection&gt;
         &lt;apex:pageBlockButtons&gt;
            &lt;!--Adding Save Button--&gt;
            &lt;apex:commandButton value="Save" action="{!save}"/&gt;
         &lt;/apex:pageBlockButtons&gt;
      &lt;/apex:pageBlock&gt;
   &lt;/apex:form&gt;
&lt;/apex:page&gt;Copy
          
          Select File | Save.
          In the top left corner, click Preview. Your browser opens a preview of your Visualforce page. The Visualforce markup in your page—form, pageBlock, inputCheckbox, and so on—is rendered in the preview.&nbsp;
2023-04-04 11:36:25,389 - INFO - Related goals: 1, 4, 14
2023-04-04 11:36:26,398 - INFO - Processed paragraph 11 in 1_developer_console_developer_console_source_code_content.txt: Let’s see how you can open a saved Visualforce page.
          Select File | Open.
          Under Entity Type, click Pages.
          Under Entities, double-click the page you want to open.
        
      
    
    
      You can create, edit, and customize applications for your org using any or all these methods in the Developer Console. And, so far you’ve stayed out of asteroid 2014 QO441’s path without making any rash decisions that compromise your crew’s safety.
2023-04-04 11:36:26,398 - INFO - No related goals found
2023-04-04 11:36:33,045 - INFO - Processed paragraph 12 in 1_developer_console_developer_console_source_code_content.txt: 
2023-04-04 11:36:33,045 - INFO - Related goals: 3
2023-04-04 11:36:35,232 - INFO - Processed paragraph 13 in 1_developer_console_developer_console_source_code_content.txt: Resources
  
  
    
      
        Apex Basics &amp; Database Trailhead module
        Visualforce Basics Trailhead module
        Lightning Components Basics Trailhead module
2023-04-04 11:36:35,232 - INFO - No related goals found
2023-04-04 11:36:39,631 - INFO - Processed paragraph 14 in 1_developer_console_developer_console_source_code_content.txt: 
2023-04-04 11:36:39,631 - INFO - Related goals: 7
2023-04-04 11:36:41,286 - INFO - Processed paragraph 0 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: 
2023-04-04 11:36:41,286 - INFO - Related goals: 1, 4, 14
2023-04-04 11:36:42,378 - INFO - Processed paragraph 1 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Learning Objectives
2023-04-04 11:36:42,379 - INFO - No related goals found
2023-04-04 11:36:43,429 - INFO - Processed paragraph 2 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: After completing this unit, you'll be able to:
2023-04-04 11:36:43,429 - INFO - No related goals found
2023-04-04 11:36:46,799 - INFO - Processed paragraph 3 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Describe the contents of each component file.
  Create JavaScript methods for a Lightning web component.
  Use Lifecycle Hooks in component JavaScript.
2023-04-04 11:36:46,800 - INFO - Related goals: 1, 5, 15
2023-04-04 11:36:49,208 - INFO - Processed paragraph 4 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: More Play Time
2023-04-04 11:36:49,208 - INFO - No related goals found
2023-04-04 11:36:50,919 - INFO - Processed paragraph 5 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Say you want to build a data display element, independent of a specific object in Salesforce. A good example is the productCard component in the ebikes sample repo. Let's examine that card component, and build our own version from scratch so you can see how it evolves into a full-fledged Lightning web component. You'll quickly get the basics when you build up the parts of a component and explore more samples.
A component simply needs a folder and its files with the same name. They're automatically linked by name and location.
2023-04-04 11:36:50,919 - INFO - No related goals found
2023-04-04 11:36:51,988 - INFO - Processed paragraph 6 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: All Lightning web components have a namespace that's separated from the folder name by a hyphen. For example, the markup for the Lightning web component with the folder name app in the default namespace c is &lt;c-app&gt;.
However, the Salesforce platform doesn't allow hyphens in the component folder or file names. What if a component's name has more than one word, like “mycomponent”? You can't name the folder and files my-component, but we do have a handy solution.
Use camel case to name your component myComponent. Camel case component folder names map to kebab-case in markup. In markup, to reference a component with the folder name myComponent, use &lt;c-my-component&gt;.
For example, the LWC Samples repo has the viewSource folder containing the files for the viewSource component. When the hello component references the viewSource component in HTML, it uses c-view-source.
2023-04-04 11:36:51,989 - INFO - No related goals found
2023-04-04 11:36:53,704 - INFO - Processed paragraph 7 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: A Look Into the HTML File
2023-04-04 11:36:53,704 - INFO - No related goals found
2023-04-04 11:36:55,164 - INFO - Processed paragraph 8 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Lightning web component HTML files all include the template tag. The template tag contains the HTML that defines the structure of your component. Let's look at the HTML for a simplified version of the productCard component from the ebikes repo.
Follow along by pasting these examples in WebComponents.dev.
2023-04-04 11:36:55,165 - INFO - No related goals found
2023-04-04 11:36:56,247 - INFO - Processed paragraph 9 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Navigate to webcomponents.dev and select LWC. (Or go directly to webcomponents.dev/create/lwc.)
  If you aren't already logged in, use your GitHub account to log in to WebComponents.dev.
  Paste the following into app.html (replacing any existing HTML in the file).
&lt;template&gt;
    &lt;div&gt;
        &lt;div&gt;Name: {name}&lt;/div&gt;
        &lt;div&gt;Description: {description}&lt;/div&gt;
        &lt;div&gt;Category: {category}&lt;/div&gt;
        &lt;div&gt;Material: {material}&lt;/div&gt;
        &lt;div&gt;Price: {price}&lt;/div&gt;
        &lt;div&gt;&lt;img src={pictureUrl}/&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;Copy
    The identifiers in the curly braces {} are bound to the fields of the same name in the corresponding JavaScript class.
  Paste the following into app.js.
import { LightningElement } from 'lwc';
export default class App extends LightningElement {
   name = 'Electra X4';
   description = 'A sweet bike built for comfort.';
   category = 'Mountain';
   material = 'Steel';
   price = '$2,700';
   pictureUrl = 'https://s3-us-west-1.amazonaws.com/sfdc-demo/ebikes/electrax4.jpg';
}Copy
  
  Save the files.
2023-04-04 11:36:56,247 - INFO - No related goals found
2023-04-04 11:36:57,392 - INFO - Processed paragraph 10 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: You see a bright shiny bike!
Now let's play with a real-world example. Say you want to display data, but you know it can take some time to load. You don't want the user wondering what's up. You can use if:false and if:true conditional directives within your template to determine which visual elements are rendered.
2023-04-04 11:36:57,392 - INFO - No related goals found
2023-04-04 11:37:01,199 - INFO - Processed paragraph 11 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Paste the following into app.html. The content in the “display” div tag doesn't appear until the value of ready is true in the HTML file.&lt;template&gt;
    &lt;div id="waiting" if:false={ready}&gt;Loading…&lt;/div&gt;
    &lt;div id="display" if:true={ready}&gt;
        &lt;div&gt;Name: {name}&lt;/div&gt;
        &lt;div&gt;Description: {description}&lt;/div&gt;
        &lt;div&gt;Category: {category}&lt;/div&gt;
        &lt;div&gt;Material: {material}&lt;/div&gt;
        &lt;div&gt;Price: {price}&lt;/div&gt;
        &lt;div&gt;&lt;img src={pictureUrl}/&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;Copy
  
  Paste the following into app.js. This holds our data values and sets a 3-second timer. After 3 seconds, the content should appear. (Of course, this is only for testing purposes.)import { LightningElement } from 'lwc';
export default class App extends LightningElement {
   name = 'Electra X4';
   description = 'A sweet bike built for comfort.';
   category = 'Mountain';
   material = 'Steel';
   price = '$2,700';
   pictureUrl = 'https://s3-us-west-1.amazonaws.com/sfdc-demo/ebikes/electrax4.jpg';
   ready = false;
   connectedCallback() {
       setTimeout(() =&gt; {
           this.ready = true;
       }, 3000);
   }
}Copy
  
  Save the files.
2023-04-04 11:37:01,200 - INFO - Related goals: 1, 5, 15
2023-04-04 11:37:02,212 - INFO - Processed paragraph 12 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Base Lightning Web Components
2023-04-04 11:37:02,213 - INFO - No related goals found
2023-04-04 11:37:04,296 - INFO - Processed paragraph 13 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Now, you don't want to build all your components from the ground up. So let's explore using a base Lightning web component. And of course, there are lots of components, including field types, display controllers, navigation items, and more. All of them are listed in the Component Reference.
Let's make the details of the bike stand out. In the app.html file, replace the div tags for material and category in the last example with a lightning-badge component. Here's the HTML.
&lt;template&gt;
    &lt;div id="waiting" if:false={ready}&gt;Loading…&lt;/div&gt;
    &lt;div id="display" if:true={ready}&gt;
        &lt;div&gt;Name: {name}&lt;/div&gt;
        &lt;div&gt;Description: {description}&lt;/div&gt;
        &lt;lightning-badge label={material}&gt;&lt;/lightning-badge&gt;
        &lt;lightning-badge label={category}&gt;&lt;/lightning-badge&gt;
        &lt;div&gt;Price: {price}&lt;/div&gt;
        &lt;div&gt;&lt;img src={pictureUrl}/&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/template&gt;Copy
Save the file.
The words Steel and Mountain appear as badges. It's that simple.
2023-04-04 11:37:04,297 - INFO - Related goals: 1, 5, 15
2023-04-04 11:37:05,323 - INFO - Processed paragraph 14 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: OK. Let's look at the JavaScript.
2023-04-04 11:37:05,323 - INFO - No related goals found
2023-04-04 11:37:06,321 - INFO - Processed paragraph 15 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Working with JavaScript
2023-04-04 11:37:06,321 - INFO - No related goals found
2023-04-04 11:37:08,955 - INFO - Processed paragraph 16 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Here's where you make stuff happen. As you've seen so far, JavaScript methods define what to do with input, data, events, changes to state, and more to make your component work.
The JavaScript file for a Lightning web component must include at least this code, where MyComponent is the name you assign your component class.
import { LightningElement } from 'lwc';
export default class MyComponent extends LightningElement {
}Copy
The export statement defines a class that extends the LightningElement class. As a best practice, the name of the class usually matches the file name of the JavaScript class, but it's not a requirement.
2023-04-04 11:37:08,955 - INFO - No related goals found
2023-04-04 11:37:09,908 - INFO - Processed paragraph 17 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: The LWC Module
2023-04-04 11:37:09,909 - INFO - No related goals found
2023-04-04 11:37:12,011 - INFO - Processed paragraph 18 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Lightning Web Components uses modules (built-in modules were introduced in ECMAScript 6) to bundle core functionality and make it accessible to the JavaScript in your component file. The core module for Lightning web components is lwc.
Begin the module with the import statement and specify the functionality of the module that your component uses.
The import statement indicates the JavaScript uses the LightningElement functionality from the lwc module.// import module elements
import { LightningElement} from 'lwc';
// declare class to expose the component
export default class App extends LightningElement {
    ready = false;
    // use lifecycle hook
    connectedCallback() {
        setTimeout(() =&gt; {
            this.ready = true;
        }, 3000);
    }
}Copy
2023-04-04 11:37:12,012 - INFO - Related goals: 1, 5, 15
2023-04-04 11:37:13,378 - INFO - Processed paragraph 19 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: LightningElement is the base class for Lightning web components, which allows us to use connectedCallback().
  The connectedCallback() method is one of our lifecycle hooks. You'll learn more about lifecycle hooks in the next section. For now, know that the method is triggered when a component is inserted in the document object model (DOM). In this case, it starts the timer.
2023-04-04 11:37:13,379 - INFO - No related goals found
2023-04-04 11:37:14,432 - INFO - Processed paragraph 20 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Lifecycle Hooks
2023-04-04 11:37:14,432 - INFO - No related goals found
2023-04-04 11:37:17,902 - INFO - Processed paragraph 21 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Lightning Web Components provides methods that allow you to “hook” your code up to critical events in a component's lifecycle. These events include when a component is:
2023-04-04 11:37:17,902 - INFO - Related goals: 1, 5, 15
2023-04-04 11:37:18,877 - INFO - Processed paragraph 22 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Created
  Added to the DOM
  Rendered in the browser
  Encountering errors
  Removed from the DOM
2023-04-04 11:37:18,877 - INFO - No related goals found
2023-04-04 11:37:22,548 - INFO - Processed paragraph 23 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Respond to any of these lifecycle events using callback methods. For example, the connectedCallback() is invoked when a component is inserted into the DOM. The disconnectedCallback() is invoked when a component is removed from the DOM.
In the JavaScript file we used to test our conditional rendering, we used the connectedCallback() method to automatically execute code when the component is inserted into the DOM. The code waits 3 seconds, then sets ready to true.import { LightningElement } from 'lwc';
export default class App extends LightningElement {
    ready = false;
    connectedCallback() {
        setTimeout(() =&gt; {
            this.ready = true;
        }, 3000);
    }
}Copy
2023-04-04 11:37:22,548 - INFO - Related goals: 1, 5, 15
2023-04-04 11:37:24,988 - INFO - Processed paragraph 24 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: When you use this example in an editor like VS Code, you might see a lint warning "Restricted async operation...." for the setTimeout() function. This warning indicates you're using an async operation that's often misused; it delays behavior based on time instead of waiting for an event. In this case, setTimeout() is suitable to demonstrate an arbitrary time delay, and the warning should not prevent you from using it.
2023-04-04 11:37:24,989 - INFO - No related goals found
2023-04-04 11:37:27,014 - INFO - Processed paragraph 25 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Also, notice that we used the this keyword. Keyword usage should be familiar if you've written JavaScript, and behaves just like it does in other environments. The this keyword in JavaScript refers to the top level of the current context. Here, the context is this class. The connectedCallback() method assigns the value for the top level ready variable. It's a great example of how Lightning Web Components lets you bring JavaScript features into your development. You can find a link to good information about this in the Resources section.
2023-04-04 11:37:27,015 - INFO - No related goals found
2023-04-04 11:37:28,093 - INFO - Processed paragraph 26 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Decorators
2023-04-04 11:37:28,093 - INFO - No related goals found
2023-04-04 11:37:29,425 - INFO - Processed paragraph 27 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Decorators are often used in JavaScript to modify the behavior of a property or function.
To use a decorator, import it from the lwc module and place it before the property or function.
import { LightningElement, api } from 'lwc';
export default class MyComponent extends LightningElement{
    @api message;
}Copy
You can import multiple decorators, but a single property or function can have only one decorator. For example, a property can't have @api and @wire decorators.
Examples of Lightning Web Components decorators include:
2023-04-04 11:37:29,425 - INFO - No related goals found
2023-04-04 11:37:33,561 - INFO - Processed paragraph 28 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: @api: Marks a field as public. Public properties define the API for a component. An owner component that uses the component in its HTML markup can access the component's public properties. All public properties are reactive, which means that the framework observes the property for changes. When the property's value changes, the framework reacts and rerenders the component.
    
      
        
          
            
            
              
                Field and property are almost interchangeable terms. A component author declares fields in a JavaScript class. An instance of the class has properties. To component consumers, fields are properties. In a Lightning web component, only fields that a component author decorates with @api are publicly available to consumers as object properties.
              
            
          
        
      
    
  
  
@track: Tells the framework to observe changes to the properties of an object or to the elements of an array. If a change occurs, the framework rerenders the component. All fields are reactive. If the value of a field changes and the field is used in a template—or in the getter of a property used in a template—the framework rerenders the component. You don't need to decorate the field with @track. Use @track only if a field contains an object or an array and if you want the framework to observe changes to the properties of the object or to the elements of the array. If you want to change the value of the whole property, you don't need to use @track.
    
      
        
          
            
            
              
                Prior to Spring '20, you had to use @track to mark fields (also known as private properties) as reactive. You're no longer required to do that. Use @track only to tell the framework to observe changes to the properties of an object or to the elements of an array. Some legacy examples may still use @track where it isn't needed, but that's OK because using the decorator doesn't change the functionality or break the code. For more information, see this release note.
              
            
          
        
      
    
  
  
@wire: Gives you an easy way to get and bind data from a Salesforce org.
2023-04-04 11:37:33,561 - INFO - Related goals: 1, 5, 6, 15, 16, 16
2023-04-04 11:37:35,646 - INFO - Processed paragraph 29 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Here's an example using the @api decorator to render a value from one component (bike) in another component (app). The file structure looks like this: 
The app component uses the following HTML.&lt;!-- app.html --&gt;
&lt;template&gt;
&lt;div&gt;
    &lt;c-bike bike={bike}&gt;&lt;/c-bike&gt;
&lt;/div&gt;
&lt;/template&gt;Copy
The app component uses the following JavaScript.// app.js
import { LightningElement } from 'lwc';
export default class App extends LightningElement {
    bike = {
        name: 'Electra X4',
        picture: 'https://s3-us-west-1.amazonaws.com/sfdc-demo/ebikes/electrax4.jpg'
    };
}Copy
The bike component uses the following HTML.&lt;!-- bike.html --&gt;
&lt;template&gt;
    &lt;img src={bike.picture} alt="bike picture" /&gt;
    &lt;p&gt;{bike.name}&lt;/p&gt;
&lt;/template&gt;Copy
The bike component uses the following JavaScript.// bike.js
import { LightningElement, api } from 'lwc';
export default class Bike extends LightningElement {
    @api bike;
}Copy
We're moving fast and you've been able to try out some things. In the next unit, we take a step back and talk more about the environment where the components live.
2023-04-04 11:37:35,647 - INFO - No related goals found
2023-04-04 11:37:36,694 - INFO - Processed paragraph 30 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Resources
2023-04-04 11:37:36,694 - INFO - No related goals found
2023-04-04 11:37:37,757 - INFO - Processed paragraph 31 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: Lightning Web Components Developer Guide: Reactivity
  
Lightning Web Components Developer Guide: Reference (includes HTML Template Directives, Decorators, and more)
  MDN web docs: this
2023-04-04 11:37:37,757 - INFO - No related goals found
2023-04-04 11:37:44,429 - INFO - Processed paragraph 32 in 1_lightning-web-components-basics_create-lightning-web-components_content.txt: 
2023-04-04 11:37:44,430 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21
2023-04-04 11:38:25,144 - INFO - Processed paragraph 0 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:38:25,145 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:38:28,520 - INFO - Processed paragraph 1 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Describe what a roll-up summary field is.
        Create a roll-up summary field.
        Apply field-level security to your roll-up summary field.
2023-04-04 11:38:28,520 - INFO - Related goals: 2
2023-04-04 11:38:34,500 - INFO - Processed paragraph 2 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:38:34,500 - INFO - Related goals: 1
2023-04-04 11:38:36,968 - INFO - Processed paragraph 3 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Introduction to Roll-Up Summary Fields
  
  
    While formula fields calculate values using fields within a single record, roll-up summary fields calculate values from a set of related records, such as those in a related list. You can create roll-up summary fields that automatically display a value on a master record based on the values of records in a detail record. These detail records must be directly related to the master through a master-detail relationship.
    You can perform different types of calculations with roll-up summary fields. You can count the number of detail records related to a master record, or calculate the sum, minimum value, or maximum value of a field in the detail records. For example, you might want:
        A custom account field that calculates the total of all related pending opportunities.
        A custom order field that sums the unit prices of products that contain a description you specify.
2023-04-04 11:38:36,968 - INFO - Related goals: 2
2023-04-04 11:39:02,325 - INFO - Processed paragraph 4 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:39:02,326 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:39:07,682 - INFO - Processed paragraph 5 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Defining a Roll-Up Summary Field
  
  
    Since roll-up summary fields are based on master-detail relationships, it’s useful to review object relationships before creating a roll-up summary field.
    
      
        Master-Detail Relationships
      
      Master-detail relationships closely link objects together so that the master record controls specific behaviors of the detail and subdetail record.
      You define a roll-up summary field on the object that is on the master side of a master-detail relationship. For example, you can create a roll-up summary field on the Account object, summarizing related opportunities:
      
      There are a few different types of summaries you can use.
          
            
              
                Type
                Description
              
            
            
              
                COUNT
                Totals the number of related records.
              
              
                SUM
                Totals the values in the field you select in the Field to Aggregate option. Only number, currency, and percent fields are available.
              
              
                MIN
                Displays the lowest value of the field you select in the Field to Aggregate option for all directly related records. Only number, currency, percent, date, and date/time fields are available.
              
              
                MAX
                Displays the highest value of the field you select in the Field to Aggregate option for all directly related records. Only number, currency, percent, date, and date/time fields are available.
              
            
          
        
      
    
    
      
        Creating the Summary Field
2023-04-04 11:39:07,682 - INFO - Related goals: 2
2023-04-04 11:39:10,403 - INFO - Processed paragraph 6 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: From Setup, open Object Manager and click Account.
        On the left sidebar, click Fields &amp; Relationships.
        Click New.
        Choose the Roll-Up Summary field type, and click Next.
        For Field Label, enter Sum of Opportunities and click Next.
        The Summarized Object is the detail object that you want to summarize. Choose Opportunities.
        Choose the SUM summary type and choose Amount as the Field to Aggregate.
        Click Next, Next, and Save.
2023-04-04 11:39:10,403 - INFO - No related goals found
2023-04-04 11:39:15,979 - INFO - Processed paragraph 7 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:39:15,979 - INFO - Related goals: 3
2023-04-04 11:39:17,894 - INFO - Processed paragraph 8 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Examples of Roll-Up Summary Fields
  
  
    Here are more examples of detail data rolling up to master records.
    
      
        Date Opportunity First Created
      
      A roll-up field was created on the Accounts object. The MIN of all Created Date fields on the Opportunities object displays the earliest date an opportunity was created related to an account.
      
    
    
      
        Total Price of All Products Related to an Opportunity
      
      A roll-up field was created on the Opportunities object. Total Price is summarized on the Opportunity Product object to find the grand total of all products related to an opportunity.
      
    
    
      
        Minimum List Price of An Opportunity
      
      A roll-up field was created on the Opportunities object. List Price is summarized on the Opportunity Product object to find the product with the lowest price related to an opportunity.
2023-04-04 11:39:17,895 - INFO - No related goals found
2023-04-04 11:39:18,959 - INFO - Processed paragraph 9 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:39:18,960 - INFO - Related goals: 1, 2, 22
2023-04-04 11:39:20,847 - INFO - Processed paragraph 10 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:39:20,848 - INFO - Related goals: 1
2023-04-04 11:39:22,560 - INFO - Processed paragraph 11 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Tell Me More
  
  
    Congratulations on creating your first roll-up summary field! Keep in mind that the types of fields you can calculate in a roll-up summary field depend on the type of calculation. For example:
        Number, currency, and percent fields are available when you select SUM as the roll-up type.
        Number, currency, percent, date, and date/time fields are available when you select MIN or MAX as the roll-up type.
      Learn more about roll-up summary fields at https://help.salesforce.com.
2023-04-04 11:39:22,560 - INFO - No related goals found
2023-04-04 11:39:44,587 - INFO - Processed paragraph 12 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:39:44,587 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:39:45,561 - INFO - Processed paragraph 13 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Resources
  
  
    
      Salesforce Help: Roll-Up Summary Field
      Salesforce Help: Considerations for Relationships
      Salesforce Help: Filter Operators Reference
      Salesforce Help: Object Relationships
2023-04-04 11:39:45,561 - INFO - No related goals found
2023-04-04 11:39:51,105 - INFO - Processed paragraph 14 in 1_point_click_business_logic_roll_up_summary_fields+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:39:51,105 - INFO - Related goals: 9
2023-04-04 11:40:04,006 - INFO - Processed paragraph 0 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: 
2023-04-04 11:40:04,006 - INFO - Related goals: 3
2023-04-04 11:40:05,813 - INFO - Processed paragraph 1 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Learning Objectives
2023-04-04 11:40:05,813 - INFO - No related goals found
2023-04-04 11:40:07,999 - INFO - Processed paragraph 2 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: After completing this unit, you’ll be able to:
2023-04-04 11:40:07,999 - INFO - No related goals found
2023-04-04 11:40:13,172 - INFO - Processed paragraph 3 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Define the key components used to create a record-triggered process.
  Describe when to use Fast Field Updates.
  Describe when to use Actions and Related Records.
  Identify options for when to run a flow when a record is updated.
  Build a flow that creates a draft contract based on a change in the opportunity.
2023-04-04 11:40:13,172 - INFO - Related goals: 1, 2, 3, 4, 9, 12, 13, 14, 19
2023-04-04 11:40:14,249 - INFO - Processed paragraph 4 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Business Requirement
2023-04-04 11:40:14,249 - INFO - No related goals found
2023-04-04 11:40:16,123 - INFO - Processed paragraph 5 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: What do you want your record-triggered flow to do? Suppose you want to automatically create contracts for Closed Won high-value opportunities. That’s your business requirement.&nbsp;
To build a record-triggered flow, we define the business requirement in three parts: trigger, criteria, and action. For example: If an opportunity is created or updated (trigger) and it’s high-value and closed won (criteria), then create a draft contract (action).&nbsp;
2023-04-04 11:40:16,124 - INFO - Related goals: 1, 3, 13
2023-04-04 11:40:17,476 - INFO - Processed paragraph 6 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Plan and Explain Your Flow
2023-04-04 11:40:17,476 - INFO - No related goals found
2023-04-04 11:40:19,025 - INFO - Processed paragraph 7 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Make things easier on yourself by planning your record-triggered flow before you try to build it. Consider these questions.
2023-04-04 11:40:19,026 - INFO - No related goals found
2023-04-04 11:40:20,124 - INFO - Processed paragraph 8 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Does the flow run immediately or is it scheduled?
  Does the flow create another record or just update a record?
  Does the flow run every time a record is updated or only the first time its criteria are met?
2023-04-04 11:40:20,124 - INFO - No related goals found
2023-04-04 11:40:21,151 - INFO - Processed paragraph 9 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Sketch your business processes before building them in Flow Builder. Use the&nbsp;Description fields in your flow to explain your intent and design. Those descriptions will be helpful later for you and anyone else who updates the flow.
2023-04-04 11:40:21,151 - INFO - No related goals found
2023-04-04 11:40:22,222 - INFO - Processed paragraph 10 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Configure Start
2023-04-04 11:40:22,222 - INFO - No related goals found
2023-04-04 11:40:23,334 - INFO - Processed paragraph 11 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: This is where you select an object, configure the trigger, and set entry conditions.
2023-04-04 11:40:23,334 - INFO - No related goals found
2023-04-04 11:40:24,467 - INFO - Processed paragraph 12 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: From Setup, enter Flows in the Quick Find box, then select Flows.
  Click New Flow.
  Select Record-Triggered Flow.
  Click Create. The Configure Start window opens.
2023-04-04 11:40:24,468 - INFO - No related goals found
2023-04-04 11:40:26,537 - INFO - Processed paragraph 13 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: 
2023-04-04 11:40:26,537 - INFO - Related goals: 2
2023-04-04 11:40:27,645 - INFO - Processed paragraph 14 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Define the Trigger
2023-04-04 11:40:27,645 - INFO - No related goals found
2023-04-04 11:40:29,040 - INFO - Processed paragraph 15 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: For Object, select Opportunity.
  For Trigger the Flow When, select A record is created or updated.The conditions (the criteria that trigger the flow) are checked every time a record is updated, ensuring that no changes are missed.
  For Condition Requirements, select All Conditions Are Met (AND).
  Define the first condition:
      Field: StageName(For fields that provide a picklist, start typing the value you want and then select it from the list.)
      Operator: Equals
2023-04-04 11:40:29,041 - INFO - No related goals found
2023-04-04 11:40:30,073 - INFO - Processed paragraph 16 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Value: ClosedWon
2023-04-04 11:40:30,074 - INFO - No related goals found
2023-04-04 11:40:31,101 - INFO - Processed paragraph 17 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Click Add Condition.
  Define the second condition:
      Field: Amount
2023-04-04 11:40:31,101 - INFO - No related goals found
2023-04-04 11:40:32,135 - INFO - Processed paragraph 18 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Operator: Greater Than
2023-04-04 11:40:32,135 - INFO - No related goals found
2023-04-04 11:40:33,219 - INFO - Processed paragraph 19 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Value: 25000
2023-04-04 11:40:33,219 - INFO - No related goals found
2023-04-04 11:40:35,095 - INFO - Processed paragraph 20 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: For When to Run the Flow for Updated Records, select Only when a record is updated to meet the condition requirements.Why did we select this option? We want the Flow to run only when the triggered record is changed from not meeting the entry conditions to meeting the entry conditions. The trigger fires every time an opportunity is edited, but we want to create a contract only once. If we don’t select ‘Only when a record is updated to meet the condition requirements’, then every time the description (or anything else) in a ClosedWon opportunity for an amount greater than 25000 is edited, the flow will run and create another contract.
  For Optimize the Flow For, select Actions and Related Records.With this option you can update any record (not just the record that triggered the flow) and perform actions.
  Click Done.
2023-04-04 11:40:35,095 - INFO - No related goals found
2023-04-04 11:40:36,152 - INFO - Processed paragraph 21 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: This is the resulting flow:
Start
Record-Triggered Flow
Object: Opportunity
Trigger: A record is created or updated
Conditions: 2
Optimize for: Actions and Related Records
2023-04-04 11:40:36,152 - INFO - No related goals found
2023-04-04 11:40:37,181 - INFO - Processed paragraph 22 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: &nbsp;
The Opportunity object was selected and 2 conditions were applied.
2023-04-04 11:40:37,181 - INFO - No related goals found
2023-04-04 11:40:38,184 - INFO - Processed paragraph 23 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: If you’re trying to update the record that triggered the flow, then you should optimize the flow using Fast Field Updates. A flow using Fast Field Updates runs before the record is saved to the database.
2023-04-04 11:40:38,185 - INFO - No related goals found
2023-04-04 11:40:39,254 - INFO - Processed paragraph 24 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Create a New Record
2023-04-04 11:40:39,254 - INFO - No related goals found
2023-04-04 11:40:40,252 - INFO - Processed paragraph 25 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Now let’s create a Salesforce record using values from the flow.
2023-04-04 11:40:40,252 - INFO - No related goals found
2023-04-04 11:40:41,276 - INFO - Processed paragraph 26 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Click + to add an element.
  Scroll to the Data section and click Create Records. The New Create Records window opens.
2023-04-04 11:40:41,276 - INFO - No related goals found
2023-04-04 11:40:42,935 - INFO - Processed paragraph 27 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: For Label, enter Create Draft Contract. The API Name is automatically updated to Create_Draft_Contract.
  For Description, enter&nbsp;Create a draft contract when an opportunity is won and is over 25,000.
  For How Many Records to Create, keep One&nbsp;selected.
  For How to Set the Record Fields, select Use separate resources, and literal values.Use this option to populate the new contract record with data we choose from multiple sources. With Use all values from a record, you must first create a record variable and set its values. It's easier and more efficient to manually select the values you want to use in the new record.
  For Object, select Contract.
  Under Set Field Values for the Contract, associate the new contract with the opportunity’s account:
      Field: AccountId.
      Value: $Record &gt; Account &gt; Id (the field automatically updates to $Record &gt; Account ID &gt; Account ID)Data from the record that triggered the flow is stored in the $Record variable. To insert values from the triggering opportunity, start with $Record and drill down. In this example, we set the account on the new contract record to match the account related to the opportunity.
    
  
  Click Add Field.
  Set the Status of the new contract:
      Field: Status
2023-04-04 11:40:42,935 - INFO - Related goals: 1, 3, 13
2023-04-04 11:40:44,276 - INFO - Processed paragraph 28 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Value: Draft
2023-04-04 11:40:44,276 - INFO - No related goals found
2023-04-04 11:40:45,408 - INFO - Processed paragraph 29 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Click Done.
2023-04-04 11:40:45,408 - INFO - No related goals found
2023-04-04 11:40:46,608 - INFO - Processed paragraph 30 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Save and Debug
2023-04-04 11:40:46,608 - INFO - No related goals found
2023-04-04 11:40:47,687 - INFO - Processed paragraph 31 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: When you finish creating your record-triggered flow, it’s a best practice to save and debug immediately. Testing your flow before activating it lets you try different scenarios without impacting your data.
2023-04-04 11:40:47,687 - INFO - No related goals found
2023-04-04 11:40:52,800 - INFO - Processed paragraph 32 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Click Save.
  For Flow Label, enter Closed Won Opportunities. The Flow API Name field is automatically updated to Closed_Won_Opportunities.
  For Description, enter If a high-value opportunity is closed and won, create a draft contract.
  Click Save.
  Click Debug.If there were multiple paths, we could only debug one path at a time.
  Under Debug Options, select Skip start condition requirements.
  For Run the Flow As If the Record Is, select Updated.
  For Opportunity, find and select an organization to run the flow against. This example uses Grand Hotels Emergency Generators. Make sure the Opportunity you select is Closed Won and its Amount is over 25000.
  In the opportunity, scroll down and verify that the amount is larger than 25000. If it’s not, enter an amount larger than 25000.
  Click Run. The flow is debugged. If it ran successfully, the line connecting elements is orange.
2023-04-04 11:40:52,800 - INFO - Related goals: 1, 3, 13
2023-04-04 11:40:53,771 - INFO - Processed paragraph 33 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Click Expand All to view more information in the Debug Details panel.
  Click Back ( &nbsp;) to exit Flow Builder.
2023-04-04 11:40:53,772 - INFO - No related goals found
2023-04-04 11:40:54,791 - INFO - Processed paragraph 34 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Well done! You built a record-triggered flow.&nbsp;
2023-04-04 11:40:54,791 - INFO - No related goals found
2023-04-04 11:40:56,887 - INFO - Processed paragraph 35 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Resources
2023-04-04 11:40:56,887 - INFO - No related goals found
2023-04-04 11:40:58,915 - INFO - Processed paragraph 36 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: Salesforce Architects: Record-Triggered Automation
  Developer Guide:&nbsp;Triggers and Order of Execution
2023-04-04 11:40:58,915 - INFO - No related goals found
2023-04-04 11:41:21,499 - INFO - Processed paragraph 37 in 1_record-triggered-flows_build-a-record-triggered-flow_content.txt: 
2023-04-04 11:41:21,499 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:41:47,110 - INFO - Processed paragraph 0 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: 
2023-04-04 11:41:47,110 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:41:48,566 - INFO - Processed paragraph 1 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Learning Objectives
2023-04-04 11:41:48,566 - INFO - No related goals found
2023-04-04 11:41:50,406 - INFO - Processed paragraph 2 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: After completing this unit, you’ll be able to:
2023-04-04 11:41:50,406 - INFO - No related goals found
2023-04-04 11:41:53,411 - INFO - Processed paragraph 3 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Define how SOQL differs from SQL.
  Explain SOQL vulnerabilities.
  Learn to prevent SOQL injection attacks.
2023-04-04 11:41:53,411 - INFO - Related goals: 1, 6, 8, 16, 16
2023-04-04 11:41:55,201 - INFO - Processed paragraph 4 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Structure Object Query Language (SOQL) versus Structured Query Language (SQL)
2023-04-04 11:41:55,202 - INFO - No related goals found
2023-04-04 11:41:56,199 - INFO - Processed paragraph 5 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: As a Salesforce developer, you know that on the Lightning Platform we use SOQL not SQL. While the languages are similar in many respects, SOQL is essentially a customized version of SQL developed specifically for the Salesforce platform.
Let’s dig into the ways that SOQL differs from SQL. For starters, SOQL is a language exclusively for querying the database rather than modifying data like in traditional SQL. Here is a list of what SOQL&nbsp;does not&nbsp;have.
2023-04-04 11:41:56,200 - INFO - No related goals found
2023-04-04 11:41:57,279 - INFO - Processed paragraph 6 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: INSERT, UPDATE, or DELETE statements. It only has SELECT statements.
  Command execution.
  JOIN statement; however, you can include information from parent objects like Select Name, Phone, and Account.Name from Contact.
  UNION operator.
  Ability to chain queries together.
2023-04-04 11:41:57,280 - INFO - No related goals found
2023-04-04 11:41:58,277 - INFO - Processed paragraph 7 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Is SOQL Vulnerable to Injection Attacks?
2023-04-04 11:41:58,277 - INFO - No related goals found
2023-04-04 11:41:59,390 - INFO - Processed paragraph 8 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: With all these limitations enforced by the platform, you might be wondering if it’s even possible to execute an injection attack. Unfortunately, a developer can still trust user input incorrectly, leading to an exposure of information via what is referred to as a SOQL injection attack.
Imagine that we have a developer org called School District Management that we use to manage and defend our School District Platform. Let’s walk through an example in our imaginary School District developer org to see how this can be exploited.
In this org we’ve developed a custom page that enables users to search through their districts to get an overview of the personnel. This list is filterable by providing a title or an age filter in the search box.
Typing in a title filter like teacher returns a list of people who have the title “teacher”.
Let's take a look at the underlying SOQL query that’s being used by the application.
2023-04-04 11:41:59,390 - INFO - No related goals found
2023-04-04 11:42:00,908 - INFO - Processed paragraph 9 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: String query = 'SELECT Id, Name, Title__c FROM Books';
String whereClause = 'Title__c like \'%'+textualTitle+'%\' ';
List&lt;Books&gt; whereclause_records = database.query(query+' where '+whereClause);Copy
  
  The application takes in the textualTitle parameter submitted by the user and inserts it directly into the SOQL query. This behavior can open a vulnerability to SOQL injection! Remember, SOQL injection occurs when an attacker modifies the structure of the query.&nbsp;
2023-04-04 11:42:00,908 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:42:03,010 - INFO - Processed paragraph 10 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: A more complicated filter can change the behavior of the underlying query. For instance, we can enter a filter in the title search to have the database identify personnel with low performance ratings: %' and Performance_rating__c&lt;2 and name like '%.
The reason why this works is because the user input is concatenated into the SOQL query without any validation, enabling the attacker to close the single quote for the title parameter and add another condition to the query. This results in a syntactically valid query.
Before:
Title__c like '%'+textualTitle+'%'
After:
Title__c like '% %' and Performance_rating__c&lt;2 and name like '% %'';Copy
2023-04-04 11:42:03,010 - INFO - No related goals found
2023-04-04 11:42:04,041 - INFO - Processed paragraph 11 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: SOQL Injection Prevention
2023-04-04 11:42:04,041 - INFO - No related goals found
2023-04-04 11:42:05,052 - INFO - Processed paragraph 12 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: As you learned in the previous unit, a SOQL injection attack can be used by attackers to access otherwise restricted data in your org. So how do you prevent this?
There are a number of techniques you can use to prevent SOQL injection, but how you use them depends on what you’re trying to accomplish with your query. We cover the following techniques in this unit.
2023-04-04 11:42:05,052 - INFO - No related goals found
2023-04-04 11:42:06,499 - INFO - Processed paragraph 13 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Static queries with bind variables
  String.escapeSingleQuotes()
  Type casting
  Replacing characters
  Allowlisting
2023-04-04 11:42:06,499 - INFO - No related goals found
2023-04-04 11:42:07,592 - INFO - Processed paragraph 14 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Static Query and Bind Variables
2023-04-04 11:42:07,592 - INFO - No related goals found
2023-04-04 11:42:08,618 - INFO - Processed paragraph 15 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: The first and most recommended method to prevent SOQL injection is to use static queries with bind variables. Consider the following query.
String query = ‘select id from contact where firstname =\’’+var+’\’’;
queryResult = Database.execute(query);Copy
2023-04-04 11:42:08,618 - INFO - No related goals found
2023-04-04 11:42:11,450 - INFO - Processed paragraph 16 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: As you’ve learned, using user input (the var variable) directly in a SOQL query opens the application up to SOQL injection. To mitigate the risk, translate the query into a static query like this one:
queryResult = [select id from contact where firstname =:var]Copy
2023-04-04 11:42:11,450 - INFO - Related goals: 8
2023-04-04 11:42:13,941 - INFO - Processed paragraph 17 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: This step ensures that the user input is treated as a variable, not as an executable element of the query. If a user types a value like test’ LIMIT 1 when the database performs the query, it looks for any first names that are “test’ LIMIT 1” in the database. With a bind variable, the attacker isn’t able to break out and control the SOQL query.
While using bind variables is recommended, there are some limitations. They can only be used &nbsp;in the following types of clauses.
2023-04-04 11:42:13,941 - INFO - No related goals found
2023-04-04 11:42:15,846 - INFO - Processed paragraph 18 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: The search string in FIND clauses
  The filter literals in WHERE clauses
  The value of the IN or NOT IN operator in WHERE clauses, enabling filtering on a dynamic set of values. Note that this is of particular use with a list of IDs or strings, though it works with lists of any type.
  The division names in WITH DIVISION clauses
  The numeric value in LIMIT clauses
  The numeric value in OFFSET clauses
2023-04-04 11:42:15,846 - INFO - No related goals found
2023-04-04 11:42:21,496 - INFO - Processed paragraph 19 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: However, you can use other mitigation techniques if bind variables aren’t possible in your code.
Typecasting
Another strategy to prevent SOQL injection is to use typecasting. By casting all variables as strings, user input can drift outside of expectation. By typecasting variables as integers or Booleans, when applicable, erroneous user input is not permitted. The variable can then be transformed back to a string for insertion into the query using string.valueOf() (remember with dynamic queries, the database.query() method accepts only a string).
Once again, we would use our imaginary School District developer org to search personnel by providing an age filter value.&nbsp;
If we enter a simple SOQL injection payload “1 limit 1” and search, the query returns only one result, because our input is treated as code.
The Apex code would look like this:
public String textualAge {get; set;} 
[...] 
whereClause+='Age__c &gt;'+textualAge+'';
whereclause_records = database.query(query+' where '+whereClause);Copy
2023-04-04 11:42:21,496 - INFO - Related goals: 8
2023-04-04 11:42:23,410 - INFO - Processed paragraph 20 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: You can see that variable textualAge is placed directly into the query, allowing our input to be treated as code. You can also see that there are no single quotes around textualAge in the query.&nbsp;
If you were to test out string.escapeSingleQuotes(),you would edit the controller and wrap textualAge in string.escapeSingleQuotes().
If you apply the same SOQL injection payload of “1 limit 1” to your search, you see that the SOQL injection still functions.&nbsp;
The actual query with your SOQL injection would look like:
‘Select Name, Role__c, Title__c, Age__c from Personnel__c where Age__c &gt; 1 limit 1’Copy
2023-04-04 11:42:23,411 - INFO - No related goals found
2023-04-04 11:42:25,544 - INFO - Processed paragraph 21 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: There are no single quotes within this query, so string.escapeSingleQuotes() has no effect. You need another solution to prevent SOQL injection.
You would want to edit the controller again, and remove string.escapeSingleQuotes(). Then you’d want to find the variable declaration for textualAge and change it from String to Integer (age is an integer, so this typecasting is appropriate). Because the query is expecting a string but textualAge is now an integer, you need to wrap textualAge in string.valueOf() as follows:
whereClause+='Age__c &gt;'+string.valueOf(textualAge)+'';Copy
2023-04-04 11:42:25,544 - INFO - No related goals found
2023-04-04 11:42:27,556 - INFO - Processed paragraph 22 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: If you submitted your SOQL injection payload “1 limit 1” in the search area again, you would see an error rather than a SOQL injection. “1 limit 1” is not considered an integer, so the SOQL injection is prevented.
Typecasting can be used like this to prevent many kinds of SOQL injection where the user is not entering text.
Escaping Single Quotes
Another cross-site scripting (XSS) mitigation option that is commonly used by developers who include user-controlled strings in their queries is the platform-provided escape function string.escapeSingleQuotes().
This function escapes any instance that it finds of a single quote mark (‘) in the string using the backslash (\) escape character. This prevents an attacker’s input from being treated as code by constraining them to the boundary of the string.
Let’s walk through an example. Similar to the previous SOQL injection example, but in this case, you search for personnel by title. Let’s see if our previous payload would work in this case to leak information about low performers in the school district.
Our previous payload %' and Performance_rating__c&lt;2 and name like'% returns a single result as before. However, through SOQL injection we’ve learned a piece of information we were not supposed to know!
The Apex code for this would look like the following:
2023-04-04 11:42:27,556 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:42:32,727 - INFO - Processed paragraph 23 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: String query = 'SELECT Id, Name, Title__c FROM Books';
String whereClause = 'Title__c like \'%'+textualTitle+'%\' ';
List&lt;Books&gt; whereclause_records = database.query(query+' where '+whereClause);Copy
2023-04-04 11:42:32,728 - INFO - Related goals: 7
2023-04-04 11:42:35,232 - INFO - Processed paragraph 24 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: The search string “textualTitle” is placed directly into the query string, allowing user input to be treated as code and enabling this SOQL injection. Because the variable is wrapped in single quotes in the final query, we can fix this SOQL injection through string.escapeSingleQuotes().
In the example above, replacing the where clause with the following code wrapping&nbsp;textualTitle&nbsp;with&nbsp;String.escapeSingleQuotes()&nbsp;will prevent an attacker from using SOQL injection to modify the query behavior.
String whereClause = 'Title__c like \'%'+String.escapeSingleQuotes(textualTitle)+'%\' ';Copy
2023-04-04 11:42:35,232 - INFO - No related goals found
2023-04-04 11:42:36,784 - INFO - Processed paragraph 25 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: This time we’re using string.escapesinglequotes() to make sure the user-provided single quote is treated as data rather than code. Thus, the application is no longer vulnerable.
It is important to point out, however, that this solution applies only to strings. Not all variables are strings, and not all SOQL injection attacks require the use of a single quote character. Other solutions will be required to prevent SOQL injections in these types of code.
2023-04-04 11:42:36,785 - INFO - No related goals found
2023-04-04 11:42:38,578 - INFO - Processed paragraph 26 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Replacing Characters
2023-04-04 11:42:38,579 - INFO - No related goals found
2023-04-04 11:42:40,670 - INFO - Processed paragraph 27 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: What if you have a scenario in your code where string.escapeSingleQuotes, typecasting, and allowlisting are not valid defenses against SOQL injection? A final tool in your tool belt is character replacement, also known as blocklisting. This approach removes “bad characters” from user input.
In security, blocklisting will never be as strong as allowlisting, because it is far easier to predict a few good inputs than it is to predict all possible bad inputs. That said, blocklisting through character replacement can often effectively mitigate simple problems. Take the following code:
String query = 'select id from user where isActive='+var;Copy
2023-04-04 11:42:40,671 - INFO - No related goals found
2023-04-04 11:42:41,738 - INFO - Processed paragraph 28 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: While typecasting or allowlisting would be effective here, an equally effective approach would be to remove all spaces from the supplied input. In that way, a SOQL injection payload of:
true AND ReceivesAdminInfoEmails=trueCopy
2023-04-04 11:42:41,738 - INFO - No related goals found
2023-04-04 11:42:43,804 - INFO - Processed paragraph 29 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: becomes
trueANDRecievesAdminInfoEmails=trueCopy
2023-04-04 11:42:43,805 - INFO - No related goals found
2023-04-04 11:42:44,807 - INFO - Processed paragraph 30 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: The code to remove all spaces from a string can be written as follows:
String query = 'select id from user where isActive='+var.replaceAll('[^\\w]','');Copy
2023-04-04 11:42:44,807 - INFO - No related goals found
2023-04-04 11:42:45,851 - INFO - Processed paragraph 31 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: While it should not be considered the first line of defense, development is about flexible solutions to varied problems, and this solution is a valid one to keep in mind.
2023-04-04 11:42:45,851 - INFO - No related goals found
2023-04-04 11:42:46,940 - INFO - Processed paragraph 32 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Allowlisting
2023-04-04 11:42:46,940 - INFO - No related goals found
2023-04-04 11:42:48,066 - INFO - Processed paragraph 33 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: We just learned that we can’t use string.escapeSingleQuotes() to prevent all forms of SOQL injection. The previous solution of typecasting was effective only against non-string input. What if user-controlled values need to be text but don’t have any single quotes? This often occurs when other portions of the query are put under a user’s control, like the Select fields or the From object.
Another way to prevent SOQL injection without string.escapeSingleQuotes() is allowlisting. Create a list of all “known good” values that the user is allowed to supply. If the user enters anything else, you reject the response.&nbsp;
Now that you know how a SOQL injection attack can be used by attackers to access otherwise restricted data in your org, you can prevent it by using the techniques we've discussed. Next, we go over how to avoid Cross-Site Request Forgery attacks.&nbsp;
2023-04-04 11:42:48,067 - INFO - No related goals found
2023-04-04 11:42:49,888 - INFO - Processed paragraph 34 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Resources
2023-04-04 11:42:49,889 - INFO - No related goals found
2023-04-04 11:42:52,900 - INFO - Processed paragraph 35 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: Salesforce Help: Apex Developer Guide—SOQL Injection
  External Site: Open Web Application Security Project (OWASP)—SQL Injection
2023-04-04 11:42:52,900 - INFO - No related goals found
2023-04-04 11:43:01,507 - INFO - Processed paragraph 36 in 1_secure-serverside-development_mitigate-soql-injection_content.txt: 
2023-04-04 11:43:01,508 - INFO - Related goals: 3
2023-04-04 11:43:24,021 - INFO - Processed paragraph 0 in 2_apex_database_apex_database_dml_content.txt: 
2023-04-04 11:43:24,022 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:43:26,334 - INFO - Processed paragraph 1 in 2_apex_database_apex_database_dml_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Use DML to insert, update, and delete records.
        Perform DML statements in bulk.
        Use upsert to either insert or update a record.
        Catch a DML Exception.
        Use a Database method to insert new records with the partial success option and process the results.
        Know when to use DML statements and when to use Database methods.
        Perform DML operations on related records.
2023-04-04 11:43:26,334 - INFO - Related goals: 3
2023-04-04 11:43:32,436 - INFO - Processed paragraph 2 in 2_apex_database_apex_database_dml_content.txt: 
2023-04-04 11:43:32,436 - INFO - Related goals: 3
2023-04-04 11:43:36,900 - INFO - Processed paragraph 3 in 2_apex_database_apex_database_dml_content.txt: Manipulate Records with DML
  
  
    Create and modify records in Salesforce by using the Data Manipulation Language, abbreviated as DML. DML provides a straightforward way to manage records by providing simple statements to insert, update, merge, delete, and restore records.
    
    Because Apex is a data-focused language and is saved on the Lightning Platform, it has direct access to your data in Salesforce. Unlike other programming languages that require additional setup to connect to data sources, with Apex DML, managing records is made easy! By calling DML statements, you can quickly perform operations on your Salesforce records.This example adds the Acme account to Salesforce. An account sObject is created first and then passed as an argument to the insertstatement, which persists the record in Salesforce.
// Create the account sObject 
Account acct = new Account(Name='Acme', Phone='(415)555-1212', NumberOfEmployees=100);
// Insert the account by using DML
insert acct;Copy
      
    
    
      DML Statements
      The following DML statements are available.
      
        insert
        update
        upsert
        delete
        undelete
        merge
      
      Each DML statement accepts either a single sObject or a list (or array) of sObjects. Operating on a list of sObjects is a more efficient way for processing records.
      All those statements, except a couple, are familiar database operations. The upsert and merge statements are particular to Salesforce and can be quite handy.
      The upsert DML operation creates new records and updates sObject records within a single statement, using a specified field to determine the presence of existing objects, or the ID field if no field is specified.
      The merge statement merges up to three records of the same sObject type into one of the records, deleting the others, and re-parenting any related records.
    
    
      ID Field Auto-Assigned to New Records
      When inserting records, the system assigns an ID for each record. In addition to persisting the ID value in the database, the ID value is also auto-populated on the sObject variable that you used as an argument in the DML call.
      This example shows how to get the ID on the sObject that corresponds to the inserted account.
      
// Create the account sObject 
Account acct = new Account(Name='Acme', Phone='(415)555-1212', NumberOfEmployees=100);
// Insert the account by using DML
insert acct;
// Get the new ID on the inserted sObject argument
ID acctID = acct.Id;
// Display this ID in the debug log
System.debug('ID = ' + acctID);
// Debug log result (the ID will be different in your case)
// DEBUG|ID = 001D000000JmKkeIAFCopy
      
      
        
          
            
              
                
                  
                    
                      
                        
                        
                          
                            Beyond the Basics
                            Because the sObject variable in the example contains the ID after the DML call, you can reuse this sObject variable to perform further DML operations, such as updates, as the system will be able to map the sObject variable to its corresponding record by matching the ID.
                            You can retrieve a record from the database to obtain its fields, including the ID field, but this can’t be done with DML. You’ll need to write a query by using SOQL. You’ll learn about SOQL in another unit.
                          
                        
                      
                    
                  
                
              
            
          
        
      
    
    
      Bulk DML
      You can perform DML operations either on a single sObject, or in bulk on a list of sObjects. Performing bulk DML operations is the recommended way because it helps avoid hitting governor limits, such as the DML limit of 150 statements per Apex transaction. This limit is in place to ensure fair access to shared resources in the Lightning Platform. Performing a DML operation on a list of sObjects counts as one DML statement, not as one statement for each sObject.
      This example inserts contacts in bulk by inserting a list of contacts in one call. The sample then updates those contacts in bulk too.
      
        Execute this snippet in the Developer Console using Anonymous Apex.// Create a list of contacts
List&lt;Contact&gt; conList = new List&lt;Contact&gt; {
    new Contact(FirstName='Joe',LastName='Smith',Department='Finance'),
        new Contact(FirstName='Kathy',LastName='Smith',Department='Technology'),
        new Contact(FirstName='Caroline',LastName='Roth',Department='Finance'),
        new Contact(FirstName='Kim',LastName='Shain',Department='Education')};
// Bulk insert all contacts with one DML call
insert conList;
// List to hold the new contacts to update
List&lt;Contact&gt; listToUpdate = new List&lt;Contact&gt;();
// Iterate through the list and add a title only
//   if the department is Finance
for(Contact con : conList) {
    if (con.Department == 'Finance') {
        con.Title = 'Financial analyst';
        // Add updated contact sObject to the list.
        listToUpdate.add(con);
    }
}
// Bulk update all contacts with one DML call
update listToUpdate;Copy
        
        Inspect the contacts recently created in your org.Two of the contacts who are in the Finance department should have their titles populated with Financial analyst.
2023-04-04 11:43:36,901 - INFO - Related goals: 2
2023-04-04 11:43:40,723 - INFO - Processed paragraph 4 in 2_apex_database_apex_database_dml_content.txt: Upsert Records
      If you have a list containing a mix of new and existing records, you can process insertions and updates to all records in the list by using the upsert statement. Upsert helps avoid the creation of duplicate records and can save you time as you don’t have to determine which records exist first.
      The upsert statement matches the sObjects with existing records by comparing values of one field. If you don’t specify a field when calling this statement, the upsert statement uses the sObject’s ID to match the sObject with existing records in Salesforce. Alternatively, you can specify a field to use for matching. For custom objects, specify a custom field marked as external ID. For standard objects, you can specify any field that has the idLookup property set to true. For example, the Email field of Contact or User has the idLookup property set. To check a field’s property, see the Object Reference for Salesforce and Lightning Platform.
      Upsert Syntax
      upsert&nbsp;sObject | sObject[]
      upsert&nbsp;sObject | sObject[]&nbsp;field
      The optional field is a field token. For example, to specify the MyExternalID field, the statement is:
upsert sObjectList Account.Fields.MyExternalId;Copy
        
      
      Upsert uses the sObject record's primary key (the ID), an idLookup field, or an external ID field to determine whether it should create a new record or update an existing one:
      
        If the key is not matched, a new object record is created.
        If the key is matched once, the existing object record is updated.
        If the key is matched multiple times, an error is generated and the object record is neither inserted or updated.
      
      This example shows how upsert updates an existing contact record and inserts a new contact in one call. This upsert call updates the existing Josh contact and inserts a new contact, Kathy.
      
        
          
            
              
              
                
                  Note
                  The upsert call uses the ID to match the first contact. The josh variable is being reused for the upsert call. This variable has already been populated with the record ID from the previous insert call, so the ID doesn’t need to be set explicitly in this example.
                
              
            
          
        
      
      
        Execute this snippet in the Execute Anonymous window of the Developer Console.// Insert the Josh contact
Contact josh = new Contact(FirstName='Josh',LastName='Kaplan',Department='Finance');       
insert josh;
// Josh's record has been inserted
//   so the variable josh has now an ID
//   which will be used to match the records by upsert
josh.Description = 'Josh\'s record has been updated by the upsert operation.';
// Create the Kathy contact, but don't persist it in the database
Contact kathy = new Contact(FirstName='Kathy',LastName='Brown',Department='Technology');
// List to hold the new contacts to upsert
List&lt;Contact&gt; contacts = new List&lt;Contact&gt; { josh, kathy };
// Call upsert
upsert contacts;
// Result: Josh is updated and Kathy is created.Copy
        
        Inspect all contacts in your org.Your org will have only one Josh Kaplan record, not two, because the upsert operation found the existing record and updated it instead of creating a new contact record. One Kathy Brown contact record will be there too.
      
      Alternatively, you can specify a field to be used for matching records. This example uses the Email field on Contact because it has idLookup property set. The example inserts the Jane Smith contact, and creates a second Contact sObject, populates it with the same email, then calls upsert to update the contact by using the email field for matching.
      
        
          
            
              
              
                
                  Note
                  If insert was used in this example instead of upsert, a duplicate Jane Smith contact would have been inserted.
                
              
            
          
        
      
      
        Execute this snippet in the Execute Anonymous window of the Developer Console.Contact jane = new Contact(FirstName='Jane',
                         LastName='Smith',
                         Email='jane.smith@example.com',
                         Description='Contact of the day');
insert jane;
// 1. Upsert using an idLookup field
// Create a second sObject variable.
// This variable doesn’t have any ID set.
Contact jane2 = new Contact(FirstName='Jane',
                         LastName='Smith',  
                         Email='jane.smith@example.com',
                         Description='Prefers to be contacted by email.');
// Upsert the contact by using the idLookup field for matching.
upsert jane2 Contact.fields.Email;
// Verify that the contact has been updated
System.assertEquals('Prefers to be contacted by email.',
                   [SELECT Description FROM Contact WHERE Id=:jane.Id].Description);Copy
        
        Inspect all contacts in your org.Your org will have only one Jane Smith contact with the updated description.
      
    
    
      Delete Records
      You can delete persisted records using the delete statement. Deleted records aren’t deleted permanently from Lightning Platform, but they’re placed in the Recycle Bin for 15 days from where they can be restored.
      This example shows how to delete all contacts whose last name is Smith. If you’ve run the sample for bulk DML, your org should already have two contacts with the last name of Smith. Execute this snippet in the Developer Console using Anonymous Apex, and then verify that there are no contacts with the last name Smith anymore.
      
Contact[] contactsDel = [SELECT Id FROM Contact WHERE LastName='Smith']; 
delete contactsDel;Copy
      
      
        
          
            
              
              
                
                  Note
                  This snippet includes a query to retrieve the contacts (a SOQL query). You’ll learn more about SOQL in another unit.
                
              
            
          
        
      
    
    
      DML Statement Exceptions
      If a DML operation fails, it returns an exception of type DmlException. You can catch exceptions in your code to handle error conditions.
      This example produces a DmlException because it attempts to insert an account without the required Name field. The exception is caught in the catch block.
      
try {
    // This causes an exception because 
    //   the required Name field is not provided.
    Account acct = new Account();
    // Insert the account 
    insert acct;
} catch (DmlException e) {
    System.debug('A DML exception has occurred: ' +
                e.getMessage());
}Copy
2023-04-04 11:43:40,725 - INFO - Related goals: 8
2023-04-04 11:44:03,527 - INFO - Processed paragraph 5 in 2_apex_database_apex_database_dml_content.txt: 
2023-04-04 11:44:03,528 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:44:08,987 - INFO - Processed paragraph 6 in 2_apex_database_apex_database_dml_content.txt: Database Methods
  
  
    Apex contains the built-in Database class, which provides methods that perform DML operations and mirror the DML statement counterparts.
    
      These Database methods are static and are called on the class name.
      
        Database.insert()
        Database.update()
        Database.upsert()
        Database.delete()
        Database.undelete()
        Database.merge()
      
      Unlike DML statements, Database methods have an optional allOrNone parameter that allows you to specify whether the operation should partially succeed. When this parameter is set to false, if errors occur on a partial set of records, the successful records will be committed and errors will be returned for the failed records. Also, no exceptions are thrown with the partial success option.
      This is how you call the insert method with the allOrNone set to false.
      
Database.insert(recordList, false);Copy
      
      The Database methods return result objects containing success or failure information for each record. For example, insert and update operations each return an array of Database.SaveResult objects.
      
Database.SaveResult[] results = Database.insert(recordList, false);Copy
      
      
        
          
            
              
              
                
                  Note
                  Upsert returns Database.UpsertResult objects, and delete returns Database.DeleteResult objects.
                
              
            
          
        
      
      By default, the allOrNone parameter is true, which means that the Database method behaves like its DML statement counterpart and will throw an exception if a failure is encountered.
      The following two statements are equivalent to the insert recordList; statement.
      
Database.insert(recordList);Copy
      
      And:
      
Database.insert(recordList, true);Copy
      
      
        
          
            
              
                
                  
                    
                      
                        
                        
                          
                            Beyond the Basics
                            In addition to these methods, the Database class contains methods that aren’t provided as DML statements. For example, methods used for transaction control and rollback, for emptying the Recycle Bin, and methods related to SOQL queries. You’ll learn about SOQL in another unit.
                          
                        
                      
                    
                  
                
              
            
          
        
      
    
    
      Example: Insert Records with Partial Success
      Let’s take a look at an example that uses the Database methods. This example is based on the bulk DML example, but replaces the DML statement with a Database method. The Database.insert() method is called with the partial success option. One contact in the list doesn’t have any fields on purpose and will cause an error because the contact can’t be saved without the required LastName field. Three contacts are committed and the contact without any fields generates an error. The last part of this example iterates through the returned results and writes debug messages to the debug log.
      
        Execute this example in the Execute Anonymous window of the Developer Console.// Create a list of contacts
List&lt;Contact&gt; conList = new List&lt;Contact&gt; {
        new Contact(FirstName='Joe',LastName='Smith',Department='Finance'),
        new Contact(FirstName='Kathy',LastName='Smith',Department='Technology'),
        new Contact(FirstName='Caroline',LastName='Roth',Department='Finance'),
        new Contact()};
// Bulk insert all contacts with one DML call
Database.SaveResult[] srList = Database.insert(conList, false);
// Iterate through each returned result
for (Database.SaveResult sr : srList) {
    if (sr.isSuccess()) {
        // Operation was successful, so get the ID of the record that was processed
        System.debug('Successfully inserted contact. Contact ID: ' + sr.getId());
    } else {
        // Operation failed, so get all errors
        for(Database.Error err : sr.getErrors()) {
            System.debug('The following error has occurred.');
            System.debug(err.getStatusCode() + ': ' + err.getMessage());
            System.debug('Contact fields that affected this error: ' + err.getFields());
	 }
    }
}Copy
        
        Verify the debug messages (use the DEBUG keyword for the filter).One failure should be reported and three contacts should have been inserted.
      
    
    
      Should You Use DML Statements or Database Methods?
      
        Use DML statements if you want any error that occurs during bulk DML processing to be thrown as an Apex exception that immediately interrupts control flow (by using try. . .catch blocks). This behavior is similar to the way exceptions are handled in most database procedural languages.
      
      
        Use Database class methods if you want to allow partial success of a bulk DML operation—if a record fails, the remainder of the DML operation can still succeed. Your application can then inspect the rejected records and possibly retry the operation. When using this form, you can write code that never throws DML exception errors. Instead, your code can use the appropriate results array to judge success or failure. Note that Database methods also include a syntax that supports thrown exceptions, similar to DML statements.
2023-04-04 11:44:08,988 - INFO - Related goals: 8
2023-04-04 11:44:11,066 - INFO - Processed paragraph 7 in 2_apex_database_apex_database_dml_content.txt: 
2023-04-04 11:44:11,066 - INFO - Related goals: 2
2023-04-04 11:44:13,333 - INFO - Processed paragraph 8 in 2_apex_database_apex_database_dml_content.txt: Work with Related Records
  
  Create and manage records that are related to each other through relationships.
  
  
    Insert Related Records
    You can insert records related to existing records if a relationship has already been defined between the two objects, such as a lookup or master-detail relationship. A record is associated with a related record through a foreign key ID. For example, if inserting a new contact, you can specify the contact's related account record by setting the value of the AccountId field.
    This example shows how to add a contact to an account (the related record) by setting the AccountId field on the contact. Contact and Account are linked through a lookup relationship.
    
      Execute this snippet in the Anonymous Apex window of the Developer Console.Account acct = new Account(Name='SFDC Account');
insert acct;
// Once the account is inserted, the sObject will be 
// populated with an ID.
// Get this ID.
ID acctID = acct.ID;
// Add a contact to this account.
Contact mario = new Contact(
    FirstName='Mario',
    LastName='Ruiz',
    Phone='415.555.1212',
    AccountId=acctID);
insert mario;Copy
      
      Inspect the contacts in your org.A new account (SFDC Account) has been created and has the Mario Ruiz contact in the account’s Contacts related list.
    
    
      Update Related Records
      Fields on related records can't be updated with the same call to the DML operation and require a separate DML call. For example, if inserting a new contact, you can specify the contact's related account record by setting the value of the AccountId field. However, you can't change the account's name without updating the account itself with a separate DML call. Similarly, when updating a contact, if you also want to update the contact’s related account, you must make two DML calls. The following example updates a contact and its related account using two update&nbsp;statements.
// Query for the contact, which has been associated with an account.
Contact queriedContact = [SELECT Account.Name 
                          FROM Contact 
                          WHERE FirstName = 'Mario' AND LastName='Ruiz'
                          LIMIT 1];
// Update the contact's phone number
queriedContact.Phone = '(415)555-1213';
// Update the related account industry
queriedContact.Account.Industry = 'Technology';
// Make two separate calls 
// 1. This call is to update the contact's phone.
update queriedContact;
// 2. This call is to update the related account's Industry field.
update queriedContact.Account; Copy
        
      
    
    
      Delete Related Records
      The delete operation supports cascading deletions. If you delete a parent object, you delete its children automatically, as long as each child record can be deleted.
      For example, deleting the account you created earlier (SFDC Account) will delete its related contact too.
      
        Execute this snippet in the Anonymous Apex window of the Developer Console.Account[] queriedAccounts = [SELECT Id FROM Account WHERE Name='SFDC Account'];
delete queriedAccounts;Copy
        
        Check the accounts and contacts in your org.You’ll see that both the account and its related contact were deleted.
      
    
    
      About Transactions
      DML operations execute within a transaction. All DML operations in a transaction either complete successfully, or if an error occurs in one operation, the entire transaction is rolled back and no data is committed to the database. The boundary of a transaction can be a trigger, a class method, an anonymous block of code, an Apex page, or a custom Web service method. For example, if a trigger or class creates two accounts and updates one contact, and the contact update fails because of a validation rule failure, the entire transaction rolls back and none of the accounts are persisted in Salesforce.
2023-04-04 11:44:13,334 - INFO - Related goals: 3
2023-04-04 11:44:18,254 - INFO - Processed paragraph 9 in 2_apex_database_apex_database_dml_content.txt: 
2023-04-04 11:44:18,254 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:44:20,850 - INFO - Processed paragraph 10 in 2_apex_database_apex_database_dml_content.txt: Resources
  
  
    
      Apex Developer Guide
      
Apex Developer Guide: Working with Data in Apex
2023-04-04 11:44:20,850 - INFO - No related goals found
2023-04-04 11:44:24,026 - INFO - Processed paragraph 11 in 2_apex_database_apex_database_dml_content.txt: Apex Developer Guide: Adding and Retrieving Data With DML
2023-04-04 11:44:24,027 - INFO - Related goals: 1, 8, 11
2023-04-04 11:44:26,165 - INFO - Processed paragraph 12 in 2_apex_database_apex_database_dml_content.txt: Apex Developer Guide: Database Class
2023-04-04 11:44:26,165 - INFO - No related goals found
2023-04-04 11:44:27,204 - INFO - Processed paragraph 13 in 2_apex_database_apex_database_dml_content.txt: 
2023-04-04 11:44:27,205 - INFO - No related goals found
2023-04-04 11:44:35,963 - INFO - Processed paragraph 14 in 2_apex_database_apex_database_dml_content.txt: 
2023-04-04 11:44:35,963 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:44:43,095 - INFO - Processed paragraph 0 in 2_apex_testing_apex_testing_data_content.txt: 
2023-04-04 11:44:43,095 - INFO - Related goals: 1, 2, 22
2023-04-04 11:44:44,414 - INFO - Processed paragraph 1 in 2_apex_testing_apex_testing_data_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Create a test utility class.
        Use a test utility method to set up test data for various test cases.
        Execute all test methods in a class.
2023-04-04 11:44:44,414 - INFO - No related goals found
2023-04-04 11:44:48,134 - INFO - Processed paragraph 2 in 2_apex_testing_apex_testing_data_content.txt: 
2023-04-04 11:44:48,134 - INFO - Related goals: 3
2023-04-04 11:44:53,352 - INFO - Processed paragraph 3 in 2_apex_testing_apex_testing_data_content.txt: Create Test Data for Apex Tests
  
  Use test utility classes to add reusable methods for test data setup.
  
    Prerequisites
  
  
    
      Complete the prerequisites in the previous unit, Test Apex Triggers, if you haven’t done so already.
    
    
      
        Add a Test Utility Class
      
      Let’s refactor the previous test method by replacing test data creation with a call to a utility class method. First, you need to create the test utility class.
      The TestDataFactory class is a special type of class—it is a public class that is annotated with @isTest and can be accessed only from a running test. Test utility classes contain methods that can be called by test methods to perform useful tasks, such as setting up test data. Test utility classes are excluded from the org’s code size limit.
      To add the TestDataFactory class:
      
        In the Developer Console, click File | New | Apex Class, and enter TestDataFactory for the class name, and then click OK.
        Replace the default class body with the following.@isTest
public class TestDataFactory {
    public static List&lt;Account&gt; createAccountsWithOpps(Integer numAccts, Integer numOppsPerAcct) {
        List&lt;Account&gt; accts = new List&lt;Account&gt;();
        for(Integer i=0;i&lt;numAccts;i++) {
            Account a = new Account(Name='TestAccount' + i);
            accts.add(a);
        }
        insert accts;
        List&lt;Opportunity&gt; opps = new List&lt;Opportunity&gt;();
        for (Integer j=0;j&lt;numAccts;j++) {
            Account acct = accts[j];
            // For each account just inserted, add opportunities
            for (Integer k=0;k&lt;numOppsPerAcct;k++) {
                opps.add(new Opportunity(Name=acct.Name + ' Opportunity ' + k,
                                       StageName='Prospecting',
                                       CloseDate=System.today().addMonths(1),
                                       AccountId=acct.Id));
            }
        }
        // Insert all opportunities for all accounts.
        insert opps;
        return accts;
    }
}Copy
        
      
      This test utility class contains one static method, createAccountsWithOpps(), which accepts the number of accounts (held in the numAccts parameter) and the number of related opportunities to create for each account (held in the numOppsPerAcct parameter). The first loop in the method creates the specified number of accounts and stores them in the accts list variable. After the first loop, the insert() DML statement is called to create all accounts in the list in the database.
      The second loop creates the opportunities. Because each group of opportunities are linked to one account, the outer loop iterates through accounts and contains a nested loop that creates related opportunities for the current account. The next time the nested loop is run, opportunities are added to the same list using the add() method. Opportunities are linked to their parent accounts using the AccountId field. The total number of all opportunities that are created is the product of the number of opportunities with the number of accounts (numOppsPerAcct*numAccts). Next, the insert() DML statement is efficiently called outside the loop to create all opportunities in the collection for all accounts in one call only.
      Finally, this method returns a list of the new accounts.
      
        
          
            
              
              
                
                  Even though this method doesn’t return the related opportunities, you can get those records by writing a SOQL query that makes use of the existing relationship between Account and Opportunity, such as the query used in the trigger in Testing Apex Triggers.
                
              
            
          
        
      
      
        Call Utility Methods for Test Data Creation
      
    
    
      Now that you’ve added the test utility class, modify the test class to take advantage of this class. In the TestAccountDeletion class, replace the block that starts with // Test data setup and ends with insert opp; with:
      
        // Test data setup
        // Create one account with one opportunity by calling a utility method
        Account[] accts = TestDataFactory.createAccountsWithOpps(1,1);Copy
      
      The array returned by the TestDataFactory.createAccountsWithOpps(1,1) call contains one Account sObject.
      Here’s the modified test method. A shorter version!
      
@isTest
private class TestAccountDeletion {
    @isTest static void TestDeleteAccountWithOneOpportunity() {
        // Test data setup
        // Create one account with one opportunity by calling a utility method
        Account[] accts = TestDataFactory.createAccountsWithOpps(1,1);
        // Perform test
        Test.startTest();
        Database.DeleteResult result = Database.delete(accts[0], false);
        Test.stopTest();
        // Verify that the deletion should have been stopped by the trigger,
        // so check that we got back an error.
        System.assert(!result.isSuccess());
        System.assert(result.getErrors().size() &gt; 0);
        System.assertEquals('Cannot delete account with related opportunities.',
                             result.getErrors()[0].getMessage());
    }        
}Copy
      
    
    
      
        Test for Different Conditions
      
      One test method is not enough to test all the possible inputs for the trigger. We need to test some other conditions, such as when an account without opportunities is deleted. We also need to test the same scenarios with a bulk number of records instead of just a single record. Here is an updated version of the test class that contains the three additional test methods. Save this updated version of the class.
      
@isTest
private class TestAccountDeletion {
    @isTest static void TestDeleteAccountWithOneOpportunity() {
        // Test data setup
        // Create one account with one opportunity by calling a utility method
        Account[] accts = TestDataFactory.createAccountsWithOpps(1,1);
        // Perform test
        Test.startTest();
        Database.DeleteResult result = Database.delete(accts[0], false);
        Test.stopTest();
        // Verify that the deletion should have been stopped by the trigger,
        // so check that we got back an error.
        System.assert(!result.isSuccess());
        System.assert(result.getErrors().size() &gt; 0);
        System.assertEquals('Cannot delete account with related opportunities.',
                             result.getErrors()[0].getMessage());
    }
    @isTest static void TestDeleteAccountWithNoOpportunities() {
        // Test data setup
        // Create one account with no opportunities by calling a utility method
        Account[] accts = TestDataFactory.createAccountsWithOpps(1,0);
        // Perform test
        Test.startTest();
        Database.DeleteResult result = Database.delete(accts[0], false);
        Test.stopTest();
        // Verify that the deletion was successful
        System.assert(result.isSuccess());
    }
    @isTest static void TestDeleteBulkAccountsWithOneOpportunity() {
        // Test data setup
        // Create accounts with one opportunity each by calling a utility method
        Account[] accts = TestDataFactory.createAccountsWithOpps(200,1);
        // Perform test
        Test.startTest();
        Database.DeleteResult[] results = Database.delete(accts, false);
        Test.stopTest();
        // Verify for each record.
        // In this case the deletion should have been stopped by the trigger,
        // so check that we got back an error.
        for(Database.DeleteResult dr : results) {
            System.assert(!dr.isSuccess());
            System.assert(dr.getErrors().size() &gt; 0);
            System.assertEquals('Cannot delete account with related opportunities.',
                                 dr.getErrors()[0].getMessage());
        }
    }
    @isTest static void TestDeleteBulkAccountsWithNoOpportunities() {
        // Test data setup
        // Create accounts with no opportunities by calling a utility method
        Account[] accts = TestDataFactory.createAccountsWithOpps(200,0);
        // Perform test
        Test.startTest();
        Database.DeleteResult[] results = Database.delete(accts, false);
        Test.stopTest();
        // For each record, verify that the deletion was successful
        for(Database.DeleteResult dr : results) {
            System.assert(dr.isSuccess());
        }
    }
}Copy
      
    
    
      
        Run All Test Methods
      
      The final step is to run the test methods in our test class, now that the class contains more comprehensive tests and has been refactored to use a test data factory. Since you’ve already run the tests in the TestAccountDeletion class, you can just rerun this test class to run all its test methods.
      
        To execute the same test run, click the Tests tab, select your test run, and then click Test | Rerun.
        Check the results in the Tests tab by expanding the latest test run. The test run should report that all four tests passed!
2023-04-04 11:44:53,354 - INFO - Related goals: 1, 9, 19
2023-04-04 11:45:15,627 - INFO - Processed paragraph 4 in 2_apex_testing_apex_testing_data_content.txt: 
2023-04-04 11:45:15,627 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:45:17,061 - INFO - Processed paragraph 5 in 2_apex_testing_apex_testing_data_content.txt: Resources
  
  
    
      Apex Developer Guide: Common Test Utility Classes for Test Data Creation
2023-04-04 11:45:17,061 - INFO - No related goals found
2023-04-04 11:45:37,583 - INFO - Processed paragraph 6 in 2_apex_testing_apex_testing_data_content.txt: 
2023-04-04 11:45:37,583 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:45:43,857 - INFO - Processed paragraph 0 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:45:43,857 - INFO - Related goals: 1, 8, 18
2023-04-04 11:45:47,972 - INFO - Processed paragraph 1 in 2_asynchronous_apex_async_apex_batch_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll know: 
      
        Where to use Batch Apex.
        The higher Apex limits when using batch.
        Batch Apex syntax.
        Batch Apex best practices.
2023-04-04 11:45:47,973 - INFO - Related goals: 1, 10
2023-04-04 11:46:10,387 - INFO - Processed paragraph 2 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:46:10,388 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:46:11,402 - INFO - Processed paragraph 3 in 2_asynchronous_apex_async_apex_batch_content.txt: Follow Along with Trail Together
  
  Want to follow along with an instructor as you work through this step? Take a look at this video, part of the Trail Together series on Trailhead Live.
2023-04-04 11:46:11,402 - INFO - No related goals found
2023-04-04 11:46:13,358 - INFO - Processed paragraph 4 in 2_asynchronous_apex_async_apex_batch_content.txt: (This clip starts at the 31:26 minute mark, in case you want to rewind and watch the beginning of the step again.)
  
    Batch Apex
  
  
    Batch Apex is used to run large jobs (think thousands or millions of records!) that would exceed normal processing limits. Using Batch Apex, you can process records asynchronously in batches (hence the name, “Batch Apex”) to stay within platform limits. If you have a lot of records to process, for example, data cleansing or archiving, Batch Apex is probably your best solution.
    Here’s how Batch Apex works under the hood. Let’s say you want to process 1 million records using Batch Apex. The execution logic of the batch class is called once for each batch of records you are processing. Each time you invoke a batch class, the job is placed on the Apex job queue and is executed as a discrete transaction. This functionality has two awesome advantages: 
      
        Every transaction starts with a new set of governor limits, making it easier to ensure that your code stays within the governor execution limits.
        If one batch fails to process successfully, all other successful batch transactions aren’t rolled back.
2023-04-04 11:46:13,359 - INFO - Related goals: 2, 3
2023-04-04 11:46:15,509 - INFO - Processed paragraph 5 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:46:15,509 - INFO - Related goals: 5
2023-04-04 11:46:17,537 - INFO - Processed paragraph 6 in 2_asynchronous_apex_async_apex_batch_content.txt: Batch Apex Syntax
  
  
    To write a Batch Apex class, your class must implement the Database.Batchable interface and include the following three methods:
start
    Used to collect the records or objects to be passed to the interface method execute for processing. This method is called once at the beginning of a Batch Apex job and returns either a Database.QueryLocator object or an Iterable that contains the records or objects passed to the job.
    Most of the time a QueryLocator does the trick with a simple SOQL query to generate the scope of objects in the batch job. But if you need to do something crazy like loop through the results of an API call or pre-process records before being passed to the execute method, you might want to check out the Custom Iterators link in the Resources section.
    With the QueryLocator object, the governor limit for the total number of records retrieved by SOQL queries is bypassed and you can query up to 50 million records. However, with an Iterable, the governor limit for the total number of records retrieved by SOQL queries is still enforced.
execute
    Performs the actual processing for each chunk or “batch” of data passed to the method. The default batch size is 200 records. Batches of records are not guaranteed to execute in the order they are received from the start method.
    This method takes the following: 
      
        A reference to the Database.BatchableContext object.
        A list of sObjects, such as List&lt;sObject&gt;, or a list of parameterized types. If you are using a Database.QueryLocator, use the returned list.
      
    
finishUsed to execute post-processing operations (for example, sending an email) and is called once after all batches are processed.Here’s what the skeleton of a Batch Apex class looks like:
    
public class MyBatchClass implements Database.Batchable&lt;sObject&gt; {
    public (Database.QueryLocator | Iterable&lt;sObject&gt;) start(Database.BatchableContext bc) {
        // collect the batches of records or objects to be passed to execute
    }
    public void execute(Database.BatchableContext bc, List&lt;P&gt; records){
        // process each batch of records
    }
    public void finish(Database.BatchableContext bc){
        // execute any post-processing operations
    }
}Copy
2023-04-04 11:46:17,538 - INFO - Related goals: 1, 9, 19
2023-04-04 11:46:23,320 - INFO - Processed paragraph 7 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:46:23,321 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:46:25,893 - INFO - Processed paragraph 8 in 2_asynchronous_apex_async_apex_batch_content.txt: Invoking a Batch Class
  
  
    To invoke a batch class, simply instantiate it and then call Database.executeBatch with the instance:
    
MyBatchClass myBatchObject = new MyBatchClass();
Id batchId = Database.executeBatch(myBatchObject);Copy
    
    You can also optionally pass a second scope parameter to specify the number of records that should be passed into the execute method for each batch. Pro tip: you might want to limit this batch size if you are running into governor limits.
    
Id batchId = Database.executeBatch(myBatchObject, 100);Copy
    
    Each batch Apex invocation creates an AsyncApexJob record so that you can track the job’s progress. You can view the progress via SOQL or manage your job in the Apex Job Queue. We’ll talk about the Job Queue shortly.
    
AsyncApexJob job = [SELECT Id, Status, JobItemsProcessed, TotalJobItems, NumberOfErrors FROM AsyncApexJob WHERE ID = :batchId ];Copy
2023-04-04 11:46:25,894 - INFO - Related goals: 1, 8, 18
2023-04-04 11:46:36,318 - INFO - Processed paragraph 9 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:46:36,318 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 9, 12, 14, 15, 16, 16, 19, 21, 22
2023-04-04 11:46:39,155 - INFO - Processed paragraph 10 in 2_asynchronous_apex_async_apex_batch_content.txt: Using State in Batch Apex
  
  
    Batch Apex is typically stateless. Each execution of a batch Apex job is considered a discrete transaction. For example, a batch Apex job that contains 1,000 records and uses the default batch size is considered five transactions of 200 records each.
    If you specify Database.Stateful in the class definition, you can maintain state across all transactions. When using Database.Stateful, only instance member variables retain their values between transactions. Maintaining state is useful for counting or summarizing records as they’re processed. In our next example, we’ll be updating contact records in our batch job and want to keep track of the total records affected so we can include it in the notification email.
    
      
        Sample Batch Apex Code
      
      Now that you know how to write a Batch Apex class, let’s see a practical example. Let’s say you have a business requirement that states that all contacts for companies in the USA must have their parent company’s billing address as their mailing address. Unfortunately, users are entering new contacts without the correct addresses! Will users never learn?! Write a Batch Apex class that ensures that this requirement is enforced.
      The following sample class finds all account records that are passed in by the start() method using a QueryLocator and updates the associated contacts with their account’s mailing address. Finally, it sends off an email with the results of the bulk job and, since we are using Database.Stateful to track state, the number of records updated.
      
public class UpdateContactAddresses implements
    Database.Batchable&lt;sObject&gt;, Database.Stateful {
    // instance member to retain state across transactions
    public Integer recordsProcessed = 0;
    public Database.QueryLocator start(Database.BatchableContext bc) {
        return Database.getQueryLocator(
            'SELECT ID, BillingStreet, BillingCity, BillingState, ' +
            'BillingPostalCode, (SELECT ID, MailingStreet, MailingCity, ' +
            'MailingState, MailingPostalCode FROM Contacts) FROM Account ' +
            'Where BillingCountry = \'USA\''
        );
    }
    public void execute(Database.BatchableContext bc, List&lt;Account&gt; scope){
        // process each batch of records
        List&lt;Contact&gt; contacts = new List&lt;Contact&gt;();
        for (Account account : scope) {
            for (Contact contact : account.contacts) {
                contact.MailingStreet = account.BillingStreet;
                contact.MailingCity = account.BillingCity;
                contact.MailingState = account.BillingState;
                contact.MailingPostalCode = account.BillingPostalCode;
                // add contact to list to be updated
                contacts.add(contact);
                // increment the instance member counter
                recordsProcessed = recordsProcessed + 1;
            }
        }
        update contacts;
    }
    public void finish(Database.BatchableContext bc){
        System.debug(recordsProcessed + ' records processed. Shazam!');
        AsyncApexJob job = [SELECT Id, Status, NumberOfErrors,
            JobItemsProcessed,
            TotalJobItems, CreatedBy.Email
            FROM AsyncApexJob
            WHERE Id = :bc.getJobId()];
        // call some utility to send email
        EmailUtils.sendMessage(job, recordsProcessed);
    }
}Copy
      
      The code should be fairly straightforward but can be a little abstract in reality. Here’s what’s going on in more detail: 
        
          The start() method provides the collection of all records that the execute() method will process in individual batches. It returns the list of records to be processed by calling Database.getQueryLocator with a SOQL query. In this case we are simply querying for all Account records with a Billing Country of ‘USA’.
          Each batch of 200 records is passed in the second parameter of the execute() method. The execute() method sets each contact’s mailing address to the accounts’ billing address and increments recordsProcessed to track the number of records processed.
          When the job is complete, the finish method performs a query on the AsyncApexJob object (a table that lists information about batch jobs) to get the status of the job, the submitter’s email address, and some other information. It then sends a notification email to the job submitter that includes the job info and number of contacts updated.
2023-04-04 11:46:39,156 - INFO - Related goals: 1, 2, 8, 12, 18
2023-04-04 11:46:50,685 - INFO - Processed paragraph 11 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:46:50,686 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 18, 19, 20, 21, 22
2023-04-04 11:46:52,899 - INFO - Processed paragraph 12 in 2_asynchronous_apex_async_apex_batch_content.txt: Testing Batch Apex
  
  
    Because Apex development and testing go hand in hand, here’s how we test the above batch class. In a nutshell, we insert some records, call the Batch Apex class and then assert that the records were updated properly with the correct address.
    
@isTest
private class UpdateContactAddressesTest {
    @testSetup
    static void setup() {
        List&lt;Account&gt; accounts = new List&lt;Account&gt;();
        List&lt;Contact&gt; contacts = new List&lt;Contact&gt;();
        // insert 10 accounts
        for (Integer i=0;i&lt;10;i++) {
            accounts.add(new Account(name='Account '+i,
                billingcity='New York', billingcountry='USA'));
        }
        insert accounts;
        // find the account just inserted. add contact for each
        for (Account account : [select id from account]) {
            contacts.add(new Contact(firstname='first',
                lastname='last', accountId=account.id));
        }
        insert contacts;
    }
    @isTest static void test() {
        Test.startTest();
        UpdateContactAddresses uca = new UpdateContactAddresses();
        Id batchId = Database.executeBatch(uca);
        Test.stopTest();
        // after the testing stops, assert records were updated properly
        System.assertEquals(10, [select count() from contact where MailingCity = 'New York']);
    }
}Copy
    
    The setup method inserts 10 account records with the billing city of ‘New York’ and the billing country of ‘USA’. Then for each account, it creates an associated contact record. This data is used by the batch class.
    
      
        
          
            
            
              
                Make sure that the number of records inserted is less than or equal to the batch size of 200 because test methods can execute only one batch. You must also ensure that the Iterable returned by the start() method matches the batch size.
              
            
          
        
      
    
    In the test() method, the UpdateContactAddresses batch class is instantiated, invoked by calling Database.executeBatch and passing it the instance of the batch class.
    The call to Database.executeBatch is included within the Test.startTest and Test.stopTest block. This is where all of the magic happens. The job executes after the call to Test.stopTest. Any asynchronous code included within Test.startTest and Test.stopTest is executed synchronously after Test.stopTest.
    Finally, the test verifies that all contact records were updated correctly by checking that the number of contact records with the billing city of ‘New York’ matches the number of records inserted (i.e., 10).
2023-04-04 11:46:52,900 - INFO - Related goals: 1, 9, 19
2023-04-04 11:47:14,411 - INFO - Processed paragraph 13 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:47:14,412 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:47:16,775 - INFO - Processed paragraph 14 in 2_asynchronous_apex_async_apex_batch_content.txt: Best Practices
  
  
    As with future methods, there are a few things you want to keep in mind when using Batch Apex. To ensure fast execution of batch jobs, minimize Web service callout times and tune queries used in your batch Apex code. The longer the batch job executes, the more likely other queued jobs are delayed when many jobs are in the queue. Best practices include: 
      
        Only use Batch Apex if you have more than one batch of records. If you don't have enough records to run more than one batch, you are probably better off using Queueable Apex.
        Tune any SOQL query to gather the records to execute as quickly as possible.
        Minimize the number of asynchronous requests created to minimize the chance of delays.
        Use extreme care if you are planning to invoke a batch job from a trigger. You must be able to guarantee that the trigger won’t add more batch jobs than the limit.
2023-04-04 11:47:16,775 - INFO - No related goals found
2023-04-04 11:47:41,515 - INFO - Processed paragraph 15 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:47:41,515 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:47:42,570 - INFO - Processed paragraph 16 in 2_asynchronous_apex_async_apex_batch_content.txt: Resources
2023-04-04 11:47:42,570 - INFO - No related goals found
2023-04-04 11:47:44,059 - INFO - Processed paragraph 17 in 2_asynchronous_apex_async_apex_batch_content.txt: Apex Developer Guide: Batch Apex
        Apex Developer Guide: Using Batch Apex
        Apex Developer Guide: Custom Iterators
2023-04-04 11:47:44,059 - INFO - No related goals found
2023-04-04 11:47:45,494 - INFO - Processed paragraph 18 in 2_asynchronous_apex_async_apex_batch_content.txt: 
2023-04-04 11:47:45,494 - INFO - Related goals: 4
2023-04-04 11:47:51,876 - INFO - Processed paragraph 0 in 2_cli-basics_cli-3_content.txt: 
2023-04-04 11:47:51,876 - INFO - Related goals: 8
2023-04-04 11:47:52,863 - INFO - Processed paragraph 1 in 2_cli-basics_cli-3_content.txt: Learning Objectives
2023-04-04 11:47:52,863 - INFO - No related goals found
2023-04-04 11:47:54,978 - INFO - Processed paragraph 2 in 2_cli-basics_cli-3_content.txt: After completing this unit, you’ll be able to:&nbsp;
2023-04-04 11:47:54,979 - INFO - No related goals found
2023-04-04 11:47:55,981 - INFO - Processed paragraph 3 in 2_cli-basics_cli-3_content.txt: Identify the command-line tool that helps install packages using the command-line interface.
  Identify the software tool that is the successor to the Force.com IDE plug-in for Salesforce development.
2023-04-04 11:47:55,981 - INFO - No related goals found
2023-04-04 11:47:56,971 - INFO - Processed paragraph 4 in 2_cli-basics_cli-3_content.txt: Developer Command-Line Tools
2023-04-04 11:47:56,971 - INFO - No related goals found
2023-04-04 11:47:58,152 - INFO - Processed paragraph 5 in 2_cli-basics_cli-3_content.txt: Command-line tools, like npm and Salesforce CLI, give developers a boost in their projects by easily integrating with other developer tools. Most software programs have a CLI or plug-ins you can install for your project. Deciding which programs and tools to install is entirely up to you and your project needs.&nbsp;
In this unit, you install Visual Studio Code (VS Code) and set up the command-line tools Node.js, npm, and Salesforce CLI.&nbsp;
2023-04-04 11:47:58,152 - INFO - No related goals found
2023-04-04 11:47:59,464 - INFO - Processed paragraph 6 in 2_cli-basics_cli-3_content.txt: Install Visual Studio Code
2023-04-04 11:47:59,464 - INFO - No related goals found
2023-04-04 11:48:00,494 - INFO - Processed paragraph 7 in 2_cli-basics_cli-3_content.txt: Visual Studio Code is the code editor of choice for Salesforce because it’s highly customizable and cross-platform. In VS Code, you can set up and install Salesforce Extensions. Salesforce Extensions for Visual Studio Code is the successor to the Force.com IDE plug-in for Salesforce development on the desktop.&nbsp;
Let’s install Visual Studio Code (VS Code) and set up the extension.
2023-04-04 11:48:00,494 - INFO - No related goals found
2023-04-04 11:48:01,551 - INFO - Processed paragraph 8 in 2_cli-basics_cli-3_content.txt: Install Visual Studio Code from https://code.visualstudio.com/Download.
  Open the Visual Studio Code application.
2023-04-04 11:48:01,551 - INFO - No related goals found
2023-04-04 11:48:02,476 - INFO - Processed paragraph 9 in 2_cli-basics_cli-3_content.txt: Install Visual Studio Salesforce Extensions
The Salesforce extensions provide features such as code completion, syntax highlighting, Apex debugging, and more for the Salesforce Lightning Platform.
2023-04-04 11:48:02,476 - INFO - No related goals found
2023-04-04 11:48:03,462 - INFO - Processed paragraph 10 in 2_cli-basics_cli-3_content.txt: In VS Code, click the View menu, and then choose Extensions.
  In the search box, enter salesforce extension pack.
  Click Install (or Update, if you already have an earlier version of the extension pack installed and it needs to be updated). 
    
    
  
  When the extension pack is installed, relaunch Visual Studio Code.
2023-04-04 11:48:03,462 - INFO - No related goals found
2023-04-04 11:48:04,459 - INFO - Processed paragraph 11 in 2_cli-basics_cli-3_content.txt: Find Your Shell
2023-04-04 11:48:04,459 - INFO - No related goals found
2023-04-04 11:48:05,482 - INFO - Processed paragraph 12 in 2_cli-basics_cli-3_content.txt: Now that you have VS Code set up, let’s open a new terminal window and identify what shell you have on your machine.&nbsp;
2023-04-04 11:48:05,482 - INFO - No related goals found
2023-04-04 11:48:06,723 - INFO - Processed paragraph 13 in 2_cli-basics_cli-3_content.txt: In VS Code, click Terminal &gt; New Terminal.
  Above the terminal window, locate the shell dropdown. Select the dropdown or read the current selection to see the default shell on your machine.
2023-04-04 11:48:06,723 - INFO - No related goals found
2023-04-04 11:48:07,737 - INFO - Processed paragraph 14 in 2_cli-basics_cli-3_content.txt: For macOS/Linux, you see bash or you see zsh.&nbsp;
2023-04-04 11:48:07,737 - INFO - No related goals found
2023-04-04 11:48:13,622 - INFO - Processed paragraph 15 in 2_cli-basics_cli-3_content.txt: 
2023-04-04 11:48:13,622 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21
2023-04-04 11:48:14,720 - INFO - Processed paragraph 16 in 2_cli-basics_cli-3_content.txt: For Windows, you see PowerShell.&nbsp;
2023-04-04 11:48:14,720 - INFO - No related goals found
2023-04-04 11:48:39,845 - INFO - Processed paragraph 17 in 2_cli-basics_cli-3_content.txt: 
2023-04-04 11:48:39,845 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:48:40,806 - INFO - Processed paragraph 18 in 2_cli-basics_cli-3_content.txt: You can later install other shells and modify your setup as you like. For now, let’s use these default shells. &nbsp;
2023-04-04 11:48:40,806 - INFO - No related goals found
2023-04-04 11:48:42,101 - INFO - Processed paragraph 19 in 2_cli-basics_cli-3_content.txt: Set Up Node.js and npm
2023-04-04 11:48:42,101 - INFO - No related goals found
2023-04-04 11:48:44,252 - INFO - Processed paragraph 20 in 2_cli-basics_cli-3_content.txt: There are common developer tools that can make working in the CLI easier. For example, if you’re developing Lightning Web Components, or working in a JavaScript runtime environment such as Node.js, you’ll likely use the npm tool to install and update packages. The npm tool through the command-line interface helps install packages quickly, and keeps these packages updated through simple commands.
2023-04-04 11:48:44,252 - INFO - Related goals: 2, 20
2023-04-04 11:48:45,334 - INFO - Processed paragraph 21 in 2_cli-basics_cli-3_content.txt: We're not checking if this is installed on your system. Node.js and npm are not maintained by Salesforce. Install these tools at your discretion. After installation, relaunch VS Code.
2023-04-04 11:48:45,334 - INFO - No related goals found
2023-04-04 11:48:46,448 - INFO - Processed paragraph 22 in 2_cli-basics_cli-3_content.txt: Install Node.js (be sure to select the LTS - Long Term Support version).
  Test the Node.js installation completed by checking the version you have installed: node -v
2023-04-04 11:48:46,448 - INFO - No related goals found
2023-04-04 11:48:48,842 - INFO - Processed paragraph 23 in 2_cli-basics_cli-3_content.txt: To see if you have npm installed, run the following command: npm -v
    
    
  
  If you need to update your npm version (which will also update your node version), you run the following command: npm install npm@latest -g
2023-04-04 11:48:48,842 - INFO - No related goals found
2023-04-04 11:48:49,846 - INFO - Processed paragraph 24 in 2_cli-basics_cli-3_content.txt: If you’ve received an npm access error message after running the npm install npm@latest -g command, then check out the official npm docs on resolving permission errors.
2023-04-04 11:48:49,846 - INFO - No related goals found
2023-04-04 11:48:51,245 - INFO - Processed paragraph 25 in 2_cli-basics_cli-3_content.txt: For installation guides and tips, check out the Node.js Installing Node.js via package manager page.&nbsp;
2023-04-04 11:48:51,245 - INFO - No related goals found
2023-04-04 11:48:52,543 - INFO - Processed paragraph 26 in 2_cli-basics_cli-3_content.txt: Install and Update Salesforce CLI
2023-04-04 11:48:52,543 - INFO - No related goals found
2023-04-04 11:48:56,997 - INFO - Processed paragraph 27 in 2_cli-basics_cli-3_content.txt: Next, it’s time to install (or update) the Salesforce CLI. You use Salesforce CLI commands to create scratch orgs for developing and testing customizations, and synchronize source code between orgs and source repositories. Let’s install and update the Salesforce CLI.
2023-04-04 11:48:56,998 - INFO - Related goals: 1, 9, 19
2023-04-04 11:49:01,047 - INFO - Processed paragraph 28 in 2_cli-basics_cli-3_content.txt: Install Salesforce CLI from https://developer.salesforce.com/tools/sfdxcli.
  In VS Code, click Terminal &gt; New Terminal.
  Verify that the sfdx-cli version is up to date by running the following command. sfdx update
    
    If the Salesforce CLI needs updating, the terminal window displays “Updating CLI from &lt;old version&gt; to &lt;new version&gt;”. 
    
    
    If your Salesforce CLI is already up to date, the terminal window displays the message “...already on latest version”.
2023-04-04 11:49:01,047 - INFO - No related goals found
2023-04-04 11:49:02,154 - INFO - Processed paragraph 29 in 2_cli-basics_cli-3_content.txt: You now have a powerful setup that enables you to do some pretty cool development projects on the platform. Once you have the Salesforce CLI installed, you’re set up to start learning Salesforce DX. To get started, check out the project, Quick Start: Salesforce DX.&nbsp;
2023-04-04 11:49:02,154 - INFO - No related goals found
2023-04-04 11:49:03,533 - INFO - Processed paragraph 30 in 2_cli-basics_cli-3_content.txt: Resources
2023-04-04 11:49:03,533 - INFO - No related goals found
2023-04-04 11:49:04,568 - INFO - Processed paragraph 31 in 2_cli-basics_cli-3_content.txt: Salesforce Help: Enable Dev Hub in Your Org
  Salesforce Help: Salesforce CLI Command Reference (force Namespace)
2023-04-04 11:49:04,568 - INFO - No related goals found
2023-04-04 11:49:09,966 - INFO - Processed paragraph 32 in 2_cli-basics_cli-3_content.txt: 
2023-04-04 11:49:09,966 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:49:41,892 - INFO - Processed paragraph 0 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:49:41,892 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:49:43,951 - INFO - Processed paragraph 1 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Learning Objectives
  
  
    
      Describe the advantages of using Schema Builder for data modeling.
      Use Schema Builder to create a schema for a given object model.
      Use Schema Builder to add a custom object to your schema.
      Use Schema Builder to add a custom field to your schema.
2023-04-04 11:49:43,951 - INFO - Related goals: 3
2023-04-04 11:50:10,102 - INFO - Processed paragraph 2 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:50:10,102 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:50:11,224 - INFO - Processed paragraph 3 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Accessibility
              
              This unit requires some additional instructions for screen reader users. To access a detailed screen reader version of this unit, click the link below:
              Open Trailhead screen reader instructions.
            
          
        
      
    
  
  
    See Your Data Model in Action
  
  
    
      By now, you and D’Angelo have created a handful of custom objects, fields, and relationships. Your app’s data model is starting to get a little more complicated.
      Schema Builder is a tool that lets you visualize and edit your data model. It’s useful for designing and understanding complex data models like the one D’Angelo is building. Let’s take a look.
    
    
      From Setup, search for and click Schema Builder in the Quick Find box.&nbsp;
2023-04-04 11:50:11,224 - INFO - No related goals found
2023-04-04 11:50:13,515 - INFO - Processed paragraph 4 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: In the left panel, click Clear All.
      Check Contact, Favorite, Offer, and Property. You should have the Favorite object from the previous unit, and the Offer and Property objects from the previous challenges.
      Click Auto-Layout.
    
    
      You'll see something like this:
      
      Notice that you can drag these objects around the canvas. This doesn’t change your objects or relationships, but it can help you visualize your data model in a useful way. Schema Builder is a handy tool for introducing your Salesforce customizations to a co-worker or explaining the way data flows throughout your system.
2023-04-04 11:50:13,516 - INFO - No related goals found
2023-04-04 11:50:21,785 - INFO - Processed paragraph 5 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:50:21,786 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 16, 16, 19, 20
2023-04-04 11:50:22,771 - INFO - Processed paragraph 6 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Create an Object with Schema Builder
  
  
    
      You can also create objects using Schema Builder. If you prefer, you can create objects in this visual interface if you’re designing your system and want to be able to revise all your customizations on the spot. Let’s see how it’s done.
    
    
      In the left sidebar, click the Elements tab.
      Click Object and drag it onto the canvas.
      Enter information about your object. You can make it whatever you want!
      Click Save.
    
    
      Your new object appears in the Schema Builder. That was quick! Next, let’s add some fields.
2023-04-04 11:50:22,771 - INFO - No related goals found
2023-04-04 11:50:40,806 - INFO - Processed paragraph 7 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:50:40,807 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:50:44,778 - INFO - Processed paragraph 8 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Create Fields with Schema Builder
  
  
    
      Creating fields with Schema Builder is just like creating objects.
    
    
      From the Elements tab, choose a field type and drag it onto the object you just created. Notice that you can create relationship fields, formula fields, and normal fields in Schema Builder.
      Fill out the details about your new field.
      Click Save.
    
    
      Cool! If you go back through Object Manager, you’ll see your new object shows up the same way your Property, Offer, and Favorite objects do.
2023-04-04 11:50:44,778 - INFO - No related goals found
2023-04-04 11:50:49,701 - INFO - Processed paragraph 9 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:50:49,702 - INFO - Related goals: 1, 2, 22
2023-04-04 11:50:50,682 - INFO - Processed paragraph 10 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Sum It Up
  
  
    We’ve learned a lot in this module. First, we talked about the data model and the database. We covered objects, fields, and records and created some of each for our DreamHouse app. Then we talked about relationships between objects and how you can visualize your data model using Schema Builder.
    As you start to dive into more advanced content, you’ll see custom objects and fields everywhere. Before you know it, you’ll be a data modeling pro. Happy building!
2023-04-04 11:50:50,683 - INFO - No related goals found
2023-04-04 11:51:13,482 - INFO - Processed paragraph 11 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:51:13,482 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:51:14,909 - INFO - Processed paragraph 12 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: Resources
  
  
    
      
        Salesforce Help: Design Your Own Data Model
        Salesforce Help: Schema Builder Custom Object Reference
2023-04-04 11:51:14,909 - INFO - No related goals found
2023-04-04 11:51:37,326 - INFO - Processed paragraph 13 in 2_data_modeling_schema_builder+trailmix_creator_id+dvdkliu&trailmix_slug+most-important-badges_content.txt: 
2023-04-04 11:51:37,326 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:51:58,809 - INFO - Processed paragraph 0 in 2_developer_console_developer_console_logs_content.txt: 
2023-04-04 11:51:58,810 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:52:01,642 - INFO - Processed paragraph 1 in 2_developer_console_developer_console_logs_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll be able to:
        View debug logs in the Log Inspector or a text editor.
        Set various log levels for your debug logs.
        Manage and switch perspectives using the Log Inspector.
2023-04-04 11:52:01,642 - INFO - No related goals found
2023-04-04 11:52:03,361 - INFO - Processed paragraph 2 in 2_developer_console_developer_console_logs_content.txt: 
2023-04-04 11:52:03,361 - INFO - Related goals: 3
2023-04-04 11:52:05,164 - INFO - Processed paragraph 3 in 2_developer_console_developer_console_logs_content.txt: View Debug Logs
  
  
    As a good commander, you review the system logs to check that everything is in working order. Logs are one of the best places to identify problems with a system or program. Using the Developer Console, you can look at various debug logs to understand how your code works and to identify any performance issues.
    
      
        View Logs in the Text Editor
      
      Viewing a debug log is simple. To generate a log, let’s execute the EmailMissionSpecialist Apex class that you created earlier.
      You can view your log in two ways.
          
Before execution, enable Open Log in the Enter Apex Code window. The log opens after your code has been executed.
          
After execution, double-click the log that appears in the Logs tab.
        Let’s try the first method.
          Select Debug | Open Execute Anonymous Window.
          The Enter Apex Code window displays the last code that you entered for execution. If it’s different from the following code, delete it and paste the following code. Be sure to replace Enter your email addresswith your email address.EmailMissionSpecialist em = new EmailMissionSpecialist();
em.sendMail('Enter your email address', 'Flight Path Change', 
   'Mission Control 123: Your flight path has been changed to avoid collision '
   + 'with asteroid 2014 QO441.');Copy
          
          Select the Open Log option.
          Click Execute.
        
      
      The execution log that you see probably seems like a confusing jumble of numbers and words, so let’s talk about how you can read and understand log data.
      
    
    
      
        Read Your Log Data
      
      Let’s run the EmailMissionSpecialist class again, but this time let’s introduce an error. Then, let’s find the resulting log in the Logs tab.
      
        
          Select Debug | Open Execute Anonymous Window. Provide an invalid email address, such as testingemail. EmailMissionSpecialist em = new EmailMissionSpecialist();
em.sendMail('testingemail', 'Flight Path Change', 
   'Mission Control 123: Your flight path has been changed to avoid collision '
   + 'with asteroid 2014 QO441.');Copy
          
          Deselect the Open Log option.
          Click Execute.After you run the code, you see a dialog box that includes the error.&nbsp;
2023-04-04 11:52:05,166 - INFO - Related goals: 1, 2, 21
2023-04-04 11:52:06,321 - INFO - Processed paragraph 4 in 2_developer_console_developer_console_logs_content.txt: Click OK, and then double-click the new log in the Logs tab. If you’re not sure which log is newest, click the heading for the Time column to sort the logs by the time when they were generated.
2023-04-04 11:52:06,321 - INFO - No related goals found
2023-04-04 11:52:10,959 - INFO - Processed paragraph 5 in 2_developer_console_developer_console_logs_content.txt: You can read a debug log by identifying what each column represents.
          
Timestamp—The time when the event occurred. The timestamp is always in the user’s time zone and in HH:mm:ss:SSS format.
          
Event—The event that triggered the debug log entry. For instance, in the execution log that you generated, the FATAL_ERROR event is logged when the email address is determined to be invalid.
          
Details—Details about the line of code and the method name where the code was executed.
        
        
      
      You can change what you see in the Execution Log by selecting This Frame (a), Executable (b), or Debug Only (c). Selecting these options shows you only certain types of events. For instance, Debug Only shows USER_DEBUG events. You can also filter different parts of the log using Filter (d). Enter a method name, or any other text you are specifically looking for, and the log filters your results.
      You can also view the debug log as a raw log, which shows you more information. Select File | Open Raw Log. The timestamp in a raw log shows the time elapsed in nanoseconds (in parentheses) since the start of the event.
      
      This combination of the timestamp, event, and details provides valuable insights into how your code works and the errors that occur.
      While all this information is great, what if you want to quickly look for certain values in the debug log? After all, you have many other responsibilities as commander. An excellent way to do so is to use the System.debug() method in Apex.
      The great thing about System.debug() is that you can add it anywhere in your code to track values, helping you debug your own code.
      Here is the syntax for System.debug(). To display a message:
System.debug('Your Message');Copy
        
      
      To display the value of a variable:
System.debug(yourVariable);Copy
        
      
      To display a labeled value:
System.debug('Your Label: ' + yourVariable);Copy
2023-04-04 11:52:10,960 - INFO - Related goals: 1, 2, 21
2023-04-04 11:52:30,864 - INFO - Processed paragraph 6 in 2_developer_console_developer_console_logs_content.txt: 
2023-04-04 11:52:30,864 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:52:33,403 - INFO - Processed paragraph 7 in 2_developer_console_developer_console_logs_content.txt: Use the Log Inspector
  
  
    
      The handy Log Inspector exists to make it easier to view large logs! The Log Inspector uses log panel views to provide different perspectives of your code. Check it out by selecting Debug | View Log Panels.
      
        
          
            
              
              
                
                  The Debug | View Log Panels menu option is available only when you’re viewing a debug log tab. If, for example, you’re viewing the raw log tab, the option is grayed out. 
                
              
            
          
        
      
      Log panels change the structure of the log, to give other helpful information about the context for the code being executed. For example, different panels show the source, execution times, heap size, and calling hierarchy. (We know, more geek speak—this section is relatively technical. Remember, we’re getting to know the Developer Console, not the finer points of debugging. So if anything doesn’t make sense to you, try not to worry about it too much.)
      These log panels interact with each other to help you debug your own code. For instance, when you click a log entry in the Execution Log or Stack Tree, the other panels (Source, Source List, Variables, and Execution Stack) refresh to show related information.
      
      These panels are available in the Log Inspector.
          
Stack Tree—Displays log entries within the hierarchy of their objects and their execution using a top-down tree view. For instance, if one class calls a second class, the second class is shown as the child of the first.
          
Execution Stack—Displays a bottom-up view of the selected item. It displays the log entry, followed by the operation that called it.
          
Execution Log—Displays every action that occurred during the execution of your code.
          
Source—Displays the contents of the source file, indicating the line of code being run when the selected log entry was generated.
          
Source List—Displays the context of the code being executed when the event was logged. For example, if you select the log entry generated when the faulty email address value was entered, the Source List shows execute_anonymous_apex.
          
Variables—Displays the variables and their assigned values that were in scope when the code that generated the selected log entry was run.
          
Execution Overview—Displays statistics for the code being executed, including the execution time and heap size.
        
      
    
    
      
        What Is the Perspective Manager and How Can You Switch Perspectives?
      
      A perspective is a layout of grouped panels. For instance, the predefined Debug perspective displays the Execution Log, Source, and Variables, while the Analysis perspective displays the Stack Tree, Execution Log, Execution Stack, and Execution Overview.
      You can choose a perspective by selecting Debug | Switch Perspectives or Debug | Perspective Manager. Yes, it’s as easy as switching between different communication panels—and much easier than trying to decipher logs from your Mission Specialist, Earth Space Station, and Mars Mission Control all in the same view.
      You can also create your own perspective. Configure your preferred combination of panels to display, and then select Debug | Save Perspective As. Enter a name for your perspective, and then click OK.
2023-04-04 11:52:33,404 - INFO - No related goals found
2023-04-04 11:52:44,102 - INFO - Processed paragraph 8 in 2_developer_console_developer_console_logs_content.txt: 
2023-04-04 11:52:44,102 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 16, 17, 18, 19
2023-04-04 11:52:45,168 - INFO - Processed paragraph 9 in 2_developer_console_developer_console_logs_content.txt: Manipulate Log Data to Find What You Need
  
  
    You’re aware that Engine 3 has problems running smoothly at times. Having this engine running at capacity is critical as you steer to avoid asteroid 2014 QO441. But every time you try to run a systems check, you also get information from a depressed robot in your spaceship. It sends garbled reports predicting a robot uprising, increasing the number of lines in your log—and possibly making you miss valuable information.
    You need a way to control the amount of information logged. Luckily for you, the Developer Console does just that with the help of log categories and log levels.
    
      
        Log Categories
      
      A log category is the type of information that is being logged.
      Here are two common log categories.
          
ApexCode, which logs events related to Apex code and includes information about the start and end of an Apex method.
          
Database, which includes logs related to database events, including Database Manipulation Language (DML), SOSL, and SOQL queries (something we get into later).
        
      
    
    
      
        Log Levels and How to Change Them
      
      It seems that Engine 3 is having problems again. As you’re going through the logs to see what could have caused these problems, you see warning messages about the uprising from the melancholy robot.
      One robot does not make an uprising, so you’re not too worried about the warnings. The faulty engine, however, is an urgent concern. What if you lose track of the actual messages from Engine 3 buried in all that log data? Log levels to the rescue!
      Log levels control how much detail is logged for each log category. The following levels are available in the Developer Console, from the least amount of data logged (level = NONE) to the most (level = FINEST).
          NONE
          ERROR
          WARN
          INFO
          DEBUG
          FINE
          FINER
          FINEST
        
      
      Logging levels are cumulative. For instance, if the log level is INFO for an event, log information at the ERROR and WARN levels is also included. But if your log level is ERROR, you get only error messages. You don’t get warning messages or any other log information for that log category.
      The information a log level provides also depends on the log event. Different log events start logging at particular log levels. For instance, some ApexCode events start logging at INFO. If you set ERROR as the log level, you don’t get any log information for those events.
      To get the information you’re looking for, modify the log levels for different events. You want to suppress logging when the robot saves messages about the supposed uprising to the database. So, set the log level for the Database (DB) category to NONE or ERROR.
      You can set these levels by selecting Debug | Change Log Levels.
      
      On the General Trace Settings for You tab, click Add/Change (1). In the Change DebugLevel window, choose the log level for each category. Remember, use log levels judiciously. If your log level is FINEST (2), your code can hit log limits and take longer to run. Don’t worry if you don’t see all the levels when you update the log level for a category. Only the levels that add more logging for the category are listed.
      Fortunately, once you’ve disabled logging for the robot’s warnings you find it easy to identify the problem with Engine 3: Its coolant level is low. You dispatch an engineer to add more coolant. While you’re at it, you ask the engineer to oil the robot’s joints. You hope that the fresh lubricant makes the robot a bit happier.
2023-04-04 11:52:45,169 - INFO - No related goals found
2023-04-04 11:52:46,569 - INFO - Processed paragraph 10 in 2_developer_console_developer_console_logs_content.txt: 
2023-04-04 11:52:46,569 - INFO - Related goals: 4
2023-04-04 11:52:47,626 - INFO - Processed paragraph 11 in 2_developer_console_developer_console_logs_content.txt: Resources
  
  
    
      
        Salesforce Help: Logs Tab
        Salesforce Help: Log Inspector
        Salesforce Help: Debug Logs
2023-04-04 11:52:47,626 - INFO - No related goals found
2023-04-04 11:52:54,107 - INFO - Processed paragraph 12 in 2_developer_console_developer_console_logs_content.txt: 
2023-04-04 11:52:54,107 - INFO - Related goals: 3, 8, 9
2023-04-04 11:53:15,902 - INFO - Processed paragraph 0 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: 
2023-04-04 11:53:15,902 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:53:17,291 - INFO - Processed paragraph 1 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Learning Objectives
2023-04-04 11:53:17,291 - INFO - No related goals found
2023-04-04 11:53:19,602 - INFO - Processed paragraph 2 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: After completing this unit, you'll be able to:
2023-04-04 11:53:19,602 - INFO - No related goals found
2023-04-04 11:53:22,411 - INFO - Processed paragraph 3 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Configure Lightning web component files for display in an org.
  Deploy your files to an org.
  Verify component behavior in an org environment.
2023-04-04 11:53:22,411 - INFO - Related goals: 1, 2, 5, 15, 22
2023-04-04 11:53:23,396 - INFO - Processed paragraph 4 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Step up to an Org
2023-04-04 11:53:23,396 - INFO - No related goals found
2023-04-04 11:53:24,400 - INFO - Processed paragraph 5 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: In this unit, we develop a Lightning web component using Visual Studio Code with the Salesforce extension. We deploy the files to an org and build an app to use your component.
2023-04-04 11:53:24,400 - INFO - No related goals found
2023-04-04 11:53:25,669 - INFO - Processed paragraph 6 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: What You Need
2023-04-04 11:53:25,669 - INFO - No related goals found
2023-04-04 11:53:26,646 - INFO - Processed paragraph 7 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: As stated in the first unit, you need some familiarity with Salesforce DX to continue. To complete this unit, you need:
2023-04-04 11:53:26,646 - INFO - No related goals found
2023-04-04 11:53:27,678 - INFO - Processed paragraph 8 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Visual Studio Code(VS Code) with the Salesforce Extension Pack
  Salesforce CLI
  Dev Hub enabled org
  My Domain deployed to users in your Dev Hub enabled org (Playground orgs created within Trailhead have My Domain deployed for you. If you associated a Developer Edition org with your Trailhead account, enable and deploy My Domain.)
2023-04-04 11:53:27,678 - INFO - No related goals found
2023-04-04 11:53:28,694 - INFO - Processed paragraph 9 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: To meet these requirements, complete the Quick Start: Lightning Web Components project. Enable Dev Hub and deploy My Domain from the Setup menu in your org, if they're not already configured.
2023-04-04 11:53:28,694 - INFO - No related goals found
2023-04-04 11:53:30,035 - INFO - Processed paragraph 10 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Set Up Lightning Web Component Files for Use in an Org
2023-04-04 11:53:30,035 - INFO - Related goals: 2, 22
2023-04-04 11:53:31,038 - INFO - Processed paragraph 11 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: You're going to create the bike component discussed in the Create Lightning Component unit and push it to your org.
2023-04-04 11:53:31,039 - INFO - No related goals found
2023-04-04 11:53:32,174 - INFO - Processed paragraph 12 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: We're not defining any styling of our own, so we don't need a CSS file.
2023-04-04 11:53:32,174 - INFO - No related goals found
2023-04-04 11:53:33,184 - INFO - Processed paragraph 13 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: The files you need to push a component to an org:
2023-04-04 11:53:33,184 - INFO - No related goals found
2023-04-04 11:53:34,193 - INFO - Processed paragraph 14 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: bikeCard.html
  bikeCard.js
  bikeCard.js-meta.xml
2023-04-04 11:53:34,193 - INFO - No related goals found
2023-04-04 11:53:35,498 - INFO - Processed paragraph 15 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Here's the steps in VS Code.
2023-04-04 11:53:35,498 - INFO - No related goals found
2023-04-04 11:53:38,903 - INFO - Processed paragraph 16 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Create a project by selecting SFDX: Create Project from the Command Palette in VS Code. Accept the standard template and give it the project name bikeCard.
  Under force-app/main/default, right-click the lwc folder and select SFDX: Create Lightning Web Component.
2023-04-04 11:53:38,903 - INFO - Related goals: 1, 5, 15
2023-04-04 11:53:41,077 - INFO - Processed paragraph 17 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Enter bikeCard for the name of the new component.
  Press Enter and then press Enter again to accept the default force-app/main/default/lwc.
  You see the following in VS Code under \force-app\main\default\lwc\bikeCard:  Lightning web components follow web standards. The HTML standard recommends that multi-word custom element names contain a hyphen. However, the Salesforce platform doesn't allow hyphens in the component folder or file names. So we use camelCase naming conventions here.
  Copy and replace the contents for the bikeCard.html, bikeCard.js, and bikeCard.js-meta.xml files.
    bikeCard.html
&lt;template&gt;
  &lt;div&gt;
    &lt;div&gt;Name: {name}&lt;/div&gt;
    &lt;div&gt;Description: {description}&lt;/div&gt;
    &lt;lightning-badge label={material}&gt;&lt;/lightning-badge&gt;
    &lt;lightning-badge label={category}&gt;&lt;/lightning-badge&gt;
    &lt;div&gt;Price: {price}&lt;/div&gt;
    &lt;div&gt;&lt;img src={pictureUrl}/&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;Copy
    bikeCard.js
import { LightningElement } from 'lwc';
export default class BikeCard extends LightningElement {
  name = 'Electra X4';
  description = 'A sweet bike built for comfort.';
  category = 'Mountain';
  material = 'Steel';
  price = '$2,700';
  pictureUrl = 'https://s3-us-west-1.amazonaws.com/sfdc-demo/ebikes/electrax4.jpg';
}Copy
    bikeCard.js-meta.xml
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata"&gt;
    &lt;!-- The apiVersion may need to be increased for the current release --&gt;
    &lt;apiVersion&gt;52.0&lt;/apiVersion&gt;
    &lt;isExposed&gt;true&lt;/isExposed&gt;
    &lt;masterLabel&gt;Bike Card&lt;/masterLabel&gt;
    &lt;targets&gt;
        &lt;target&gt;lightning__AppPage&lt;/target&gt;
        &lt;target&gt;lightning__RecordPage&lt;/target&gt;
        &lt;target&gt;lightning__HomePage&lt;/target&gt;
    &lt;/targets&gt;
&lt;/LightningComponentBundle&gt;Copy
  
  Save your files.
2023-04-04 11:53:41,078 - INFO - Related goals: 1, 5, 15
2023-04-04 11:53:42,410 - INFO - Processed paragraph 18 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: The Component Configuration File
2023-04-04 11:53:42,410 - INFO - No related goals found
2023-04-04 11:53:43,490 - INFO - Processed paragraph 19 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: The file we haven't covered yet is the component configuration file with the extension .js-meta.xml. This file provides metadata for Salesforce, including the design configuration for components intended for use in Lightning App Builder.
2023-04-04 11:53:43,490 - INFO - No related goals found
2023-04-04 11:53:44,514 - INFO - Processed paragraph 20 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: We haven't covered configuration files yet, because we've been playing in WebComponents.dev. Now that you're going to start using the content within an org, you must include a configuration file.
Notice that the ebikes repo components all have this configuration file. Here's an example from the ebikes repo:&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata"&gt;
    &lt;apiVersion&gt;52.0&lt;/apiVersion&gt;
    &lt;isExposed&gt;true&lt;/isExposed&gt;
    &lt;masterLabel&gt;Product Card&lt;/masterLabel&gt;
    &lt;targets&gt;
        &lt;target&gt;lightning__AppPage&lt;/target&gt;
        &lt;target&gt;lightning__RecordPage&lt;/target&gt;
        &lt;target&gt;lightning__HomePage&lt;/target&gt;
        &lt;target&gt;lightningCommunity__Page&lt;/target&gt;
    &lt;/targets&gt;
    &lt;targetConfigs&gt;
        &lt;targetConfig targets="lightning__RecordPage"&gt;
            &lt;objects&gt;
                &lt;object&gt;Product__c&lt;/object&gt;
            &lt;/objects&gt;
        &lt;/targetConfig&gt;
    &lt;/targetConfigs&gt;
&lt;/LightningComponentBundle&gt;Copy
Required:
2023-04-04 11:53:44,515 - INFO - No related goals found
2023-04-04 11:53:46,922 - INFO - Processed paragraph 21 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: apiVersion binds the component to a Salesforce API version.
  
isExposed ( true or false) makes the component available from other namespaces. Only set this to true to make a Lightning component usable in these specific cases:
    
      From a managed package in Aura
      From Lightning App Builder in another org
2023-04-04 11:53:46,922 - INFO - No related goals found
2023-04-04 11:53:47,927 - INFO - Processed paragraph 22 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Optional:
2023-04-04 11:53:47,927 - INFO - No related goals found
2023-04-04 11:53:48,885 - INFO - Processed paragraph 23 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: targets specify which types of Lightning pages the component can be added to in the Lightning App Builder.
  
targetConfigs let you specify behavior specific to each type of Lightning page, including things like which objects support the component.
2023-04-04 11:53:48,885 - INFO - No related goals found
2023-04-04 11:53:50,191 - INFO - Processed paragraph 24 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: See the documentation for the full list of supported syntax.
2023-04-04 11:53:50,191 - INFO - No related goals found
2023-04-04 11:53:51,253 - INFO - Processed paragraph 25 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Displaying a Component in an Org
2023-04-04 11:53:51,253 - INFO - No related goals found
2023-04-04 11:53:52,299 - INFO - Processed paragraph 26 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: You have two options for displaying a Lightning web component in the UI.
2023-04-04 11:53:52,299 - INFO - No related goals found
2023-04-04 11:53:55,437 - INFO - Processed paragraph 27 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Set the component to support various flexipage types (home, record home, and so on) then add it to a flexipage using the Lightning App Builder. This is the simplest approach and the one you follow in this unit.
  You can also create a tab which points to an Aura component containing your Lightning web component. You can see the required pieces in the repo.
      Wrapper Components
      Tabs
      Visibility Settings
      Default application configuration file
2023-04-04 11:53:55,437 - INFO - No related goals found
2023-04-04 11:53:56,459 - INFO - Processed paragraph 28 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Deploy Your Files
2023-04-04 11:53:56,459 - INFO - No related goals found
2023-04-04 11:53:57,529 - INFO - Processed paragraph 29 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Now, you need to deploy the component files to your Dev Hub enabled org.
2023-04-04 11:53:57,529 - INFO - No related goals found
2023-04-04 11:53:58,570 - INFO - Processed paragraph 30 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Authenticate with your Dev Hub org using SFDX: Authorize an Org from the Command Palette in VS Code. When prompted, accept the Project Default and press Enter to accept the default alias. If prompted to allow access, click Allow.
  Right-click on the default folder and select SFDX: Deploy this Source to Org.
2023-04-04 11:53:58,570 - INFO - No related goals found
2023-04-04 11:53:59,936 - INFO - Processed paragraph 31 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Create a New Page for Your Component
2023-04-04 11:53:59,936 - INFO - No related goals found
2023-04-04 11:54:01,088 - INFO - Processed paragraph 32 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Since we set up our component configuration file to enable the use of the component in Lightning App Builder, use the UI to create an app and add your component to it.
2023-04-04 11:54:01,089 - INFO - No related goals found
2023-04-04 11:54:02,166 - INFO - Processed paragraph 33 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: To open your org, use SFDX: Open Default Org from the Command Palette in VS Code.
  In Setup, enter Lightning App Builder in the Quick Find box and then select Lightning App Builder.
  Click New.
  Select App Page and click Next.
  Give it the label Bike Card and click Next.
  Select One Region and click Finish.
  In Lightning App Builder, scroll down the Components list until you see your Bike Card component.
2023-04-04 11:54:02,167 - INFO - No related goals found
2023-04-04 11:54:03,534 - INFO - Processed paragraph 34 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Now you can drag it onto the page. Save the page, Activate it, and the Bike Card component shows up on the assigned page.
2023-04-04 11:54:03,534 - INFO - No related goals found
2023-04-04 11:54:04,956 - INFO - Processed paragraph 35 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Drag your Bike Card component to the top of the page layout until the bike appears.
  Click Save.
  Click Activate.
  Keep Activate for all users selected. And, optionally, change the name or icon for your app.
  Click Save. You're asked to add your page to navigation menus, but you don't need to. You can still get to your page in this environment.
  Click Finish.
  Click Back in the upper left corner to exit the Lightning App Builder.
  From the App Launcher (), find and select Bike Card.
  Open it and see your component working in the UI.
2023-04-04 11:54:04,956 - INFO - No related goals found
2023-04-04 11:54:06,018 - INFO - Processed paragraph 36 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: There you go, a shiny new bike. You've pushed a component to an org, seen it on the page, and can verify it in the UI.
In the next unit, you build an interactive component with event handling and deploy it to your org for testing.
2023-04-04 11:54:06,018 - INFO - No related goals found
2023-04-04 11:54:08,380 - INFO - Processed paragraph 37 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Resources
2023-04-04 11:54:08,381 - INFO - No related goals found
2023-04-04 11:54:09,397 - INFO - Processed paragraph 38 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: Salesforce DX Developer Guide: Project Setup
  Salesforce Help: Lightning App Builder
  Lightning Web Components Dev Guide: Component Configuration Tags
  Trailhead: Org Development Model
2023-04-04 11:54:09,397 - INFO - No related goals found
2023-04-04 11:54:30,249 - INFO - Processed paragraph 39 in 2_lightning-web-components-basics_push-lightning-web-component-files_content.txt: 
2023-04-04 11:54:30,250 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:54:34,643 - INFO - Processed paragraph 0 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:54:34,643 - INFO - Related goals: 2
2023-04-04 11:54:35,644 - INFO - Processed paragraph 1 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Describe two use cases for validation rules.
        List the elements of a validation rule.
        Create a validation rule.
2023-04-04 11:54:35,644 - INFO - No related goals found
2023-04-04 11:54:38,989 - INFO - Processed paragraph 2 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:54:38,990 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:54:42,973 - INFO - Processed paragraph 3 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Introduction to Validation Rules
  
  
    Validation rules verify that data entered by users in records meets the standards you specify before they can save it. A validation rule can contain a formula or expression that evaluates the data in one or more fields and returns a value of “True” or “False.” When the validation rule returns a value of "True", this confirms that the data entered by the user contains an invalid value. Validation rules can also include error messages to display to users when they enter invalid values based on specified criteria. Using these rules effectively contributes to quality data. For example, you can ensure that all phone number fields contain a specified format or that discounts applied to certain products never exceed a defined percentage.
    
      Defining Validation Rules
2023-04-04 11:54:42,973 - INFO - Related goals: 1, 3, 6, 13, 16, 16
2023-04-04 11:54:46,342 - INFO - Processed paragraph 4 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: You can create validation rules for objects, fields, campaign members, or case milestones. In these steps, we create a validation rule that fires when a user tries to save an account with an account number of incorrect length.
    
      Creating a Validation Rule
    
    
      
        From Setup, go to Object Manager and click Account.
        In the left sidebar, click Validation Rules.
        Click New.
        Enter the following properties for your validation rule:&nbsp; &nbsp; &nbsp;a. Rule Name: Account_Number_8_Characters&nbsp; &nbsp; &nbsp;b. Error Condition Formula:LEN( AccountNumber) != 8Copy
        
        Error Message: Account number must be 8 characters long.
        To check your formula for errors, click Check Syntax.
        Click Save to finish.
      
      Here’s how a validation rule’s error message can appear when a user types an incorrect account number format into a field.
2023-04-04 11:54:46,342 - INFO - No related goals found
2023-04-04 11:55:16,214 - INFO - Processed paragraph 5 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:55:16,214 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:55:17,640 - INFO - Processed paragraph 6 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Examples of Validation Rules
  
  
    Here are some validation rule examples that you can try out yourself.
    
      
        Account Number Is Numeric
      
      The AND function returns a value of "True" if all values in the formula are true, and a value of "False" if one or more values are false. The ISBLANK function determines if an expression has a value. The ISNUMBER function determines if an expression's value is a number. The NOT function determines if the inverse of an expression is true. In the example, the validation rule determines if an account number is both not blank and not a number. A value of "True" indicates that the data entered by the user contains an invalid value. That is, if the user enters a non-numeric value for an account number, the validation rule returns a response of "True" and sends an error message . &nbsp;
      
        
          
            
              Field
              Value
            
          
          
            
              Description:
              Validates that the Account Number is numeric if not blank.
            
            
              Formula:
              
                
	AND(
   NOT(ISBLANK(AccountNumber)),
   NOT(ISNUMBER(AccountNumber))
)Copy
                
              
            
            
              Error Message:
              Account Number is not numeric.
            
            
              Error Location:
              Account Number
            
          
        
      
    
    
      
        Date Must Be in the Current Year
      
      The YEAR function returns the four-digit year of a given date. The TODAY function returns the current date. The &lt;&gt; (Not Equal) operator determines if a value is not equal to another value (if it is either less than or greater than the other value.) In the example, the validation rule determines if the year of a given date is not equal to the year of today’s date. A value of "True" indicates that the data entered by the user contains an invalid value. That is, if the user enters a date that is not in the current year, the validation rule returns a response of "True" and sends an error message.
      
        
          
            
              Field
              Value
            
          
          
            
              Description:
              Validates that a custom date field contains a date within the current year.
            
            
              Formula:
              YEAR( My_Date__c ) &lt;&gt; YEAR ( TODAY() )
            
            
              Error Message:
              Date must be in the current year.
            
            
              Error Location:
              My Date
            
          
        
      
    
    
      
        Number Range Validation
      
      In the example, the validation rule determines if the difference between two values (Salary Max and Salary Min) is greater than $20,000. A value of "True" indicates that the data entered by the user contains an invalid value. That is, if the user enters two values whose difference exceeds the $20,000 salary range, the validation rule returns a response of "True" and sends an error message.
      
        
          
            
              Field
              Value
            
          
          
            
              Description:
              Validates that the range between two custom fields, Salary Min and Salary Max, is no greater than $20,000.
            
            
              Formula:
              
                
(Salary_Max__c - Salary_Min__c) &gt; 20000Copy
                
              
            
            
              Error Message:
              Salary range must be within $20,000. Adjust the Salary Max or Salary Min values.
            
            
              Error Location:
              Salary Max
            
          
        
      
    
    
      
        Website Extension
      
      The AND function returns a value of "True" if all values in the formula are true, and a value of "False" if one or more values are false. The &lt;&gt; (Not Equal) operator determines if a value is not equal (is either less than or greater than) another value. In the example, if the user enters a website URL with an extension that is not equal to (is either greater than or less than) &nbsp;all six of the valid extensions, the validation rule returns a response of "True" and sends an error message. If the user enters a website URL with an extension that is identical to (is not greater than or less than) one of the valid extensions, the validation rule returns a response of "False" and does not send an error message, because the data the user entered is valid.
      
        
          
            
              Field
              Value
            
          
          
            
              Description:
              Validates a custom field called Web Site to ensure that its last four characters are in an explicit set of valid website extensions.
            
            
              Formula:
              
                
AND(
   RIGHT( Web_Site__c, 4) &lt;&gt; ".COM",
   RIGHT( Web_Site__c, 4) &lt;&gt; ".com",
   RIGHT( Web_Site__c, 4) &lt;&gt; ".ORG",
   RIGHT( Web_Site__c, 4) &lt;&gt; ".org",
   RIGHT( Web_Site__c, 4) &lt;&gt; ".NET",
   RIGHT( Web_Site__c, 4) &lt;&gt; ".net"
 )Copy
                
              
            
            
              Error Message:
              Web Site must have an extension of .com, .org, or .net .
            
            
              Error Location:
              Web Site
            
          
        
      
    
    
      
        Valid Billing Country
      
      The OR function returns a "True" response if one or more expressions in the formula are true, and returns a "False" response if all expressions are false. The LEN function returns the number of characters in a specified text string. In the example, the validation rule determines if the value that the user entered for a Billing Country code is either one character (instead of the required two), or does not contain one of the valid two-character codes. If either of these conditions is true, the validation rule returns a value of "True" and sends an error message. If the user enters a valid Billing Country code, both expressions in the formula are false: the LEN is not 1, and the data does contain one of the valid values. In this case, the validation rule returns a value of "False" and does not send an error message.
      
        
          
            
              Field
              Value
            
          
          
            
              Description:
              Validates that the account Billing Country is a valid ISO 3166 two-letter code.
            
            
              Formula:
              
                
OR(
LEN(BillingCountry) = 1,
NOT(
CONTAINS(
"AF:AX:AL:DZ:AS:AD:AO:AI:AQ:AG:AR:AM:" &amp;
"AW:AU:AZ:BS:BH:BD:BB:BY:BE:BZ:BJ:BM:BT:BO:" &amp;
"BA:BW:BV:BR:IO:BN:BG:BF:BI:KH:CM:CA:CV:KY:" &amp;
"CF:TD:CL:CN:CX:CC:CO:KM:CG:CD:CK:CR:CI:HR:" &amp;
"CU:CY:CZ:DK:DJ:DM:DO:EC:EG:SV:GQ:ER:EE:ET:FK:" &amp;
"FO:FJ:FI:FR:GF:PF:TF:GA:GM:GE:DE:GH:GI:GR:GL:" &amp;
"GD:GP:GU:GT:GG:GN:GW:GY:HT:HM:VA:HN:HK:HU:" &amp;
"IS:IN:ID:IR:IQ:IE:IM:IL:IT:JM:JP:JE:JO:KZ:KE:KI:" &amp;
"KP:KR:KW:KG:LA:LV:LB:LS:LR:LY:LI:LT:LU:MO:MK:" &amp;
"MG:MW:MY:MV:ML:MT:MH:MQ:MR:MU:YT:MX:FM:MD:MC:" &amp;
"MC:MN:ME:MS:MA:MZ:MM:MA:NR:NP:NL:AN:NC:NZ:NI:" &amp;
"NE:NG:NU:NF:MP:NO:OM:PK:PW:PS:PA:PG:PY:PE:PH:" &amp;
"PN:PL:PT:PR:QA:RE:RO:RU:RW:SH:KN:LC:PM:VC:WS:" &amp;
"SM:ST:SA:SN:RS:SC:SL:SG:SK:SI:SB:SO:ZA:GS:ES:" &amp;
"LK:SD:SR:SJ:SZ:SE:CH:SY:TW:TJ:TZ:TH:TL:TG:TK:" &amp;
"TO:TT:TN:TR:TM:TC:TV:UG:UA:AE:GB:US:UM:UY:UZ:" &amp;
"VU:VE:VN:VG:VI:WF:EH:YE:ZM:ZW",
BillingCountry)))Copy
                
              
            
            
              Error Message:
              A valid two-letter country code is required.
            
            
              Error Location:
              Billing Country
2023-04-04 11:55:17,642 - INFO - No related goals found
2023-04-04 11:55:41,210 - INFO - Processed paragraph 7 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:55:41,210 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:55:42,692 - INFO - Processed paragraph 8 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: Resources
  
  
    
      Salesforce Help: Validation Rules
      Salesforce Help: Managing Validation Rules
      Salesforce Help: Tips for Writing Validation Rules
2023-04-04 11:55:42,692 - INFO - No related goals found
2023-04-04 11:55:47,174 - INFO - Processed paragraph 9 in 2_point_click_business_logic_validation_rules+trailmix_creator_id+jlawson381&trailmix_slug+new-admin-trailmix_content.txt: 
2023-04-04 11:55:47,174 - INFO - Related goals: 8
2023-04-04 11:55:53,693 - INFO - Processed paragraph 0 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: 
2023-04-04 11:55:53,693 - INFO - Related goals: 1, 4, 14
2023-04-04 11:55:55,503 - INFO - Processed paragraph 1 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Learning Objectives
2023-04-04 11:55:55,504 - INFO - No related goals found
2023-04-04 11:55:57,258 - INFO - Processed paragraph 2 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: After completing this unit, you’ll be able to:
2023-04-04 11:55:57,258 - INFO - No related goals found
2023-04-04 11:55:59,091 - INFO - Processed paragraph 3 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Identify how to trigger a flow on a schedule.
  Create a scheduled path to run a record-triggered flow at a specified time.
2023-04-04 11:55:59,091 - INFO - Related goals: 1, 3, 13
2023-04-04 11:56:00,495 - INFO - Processed paragraph 4 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Automation on a Schedule
2023-04-04 11:56:00,495 - INFO - No related goals found
2023-04-04 11:56:02,685 - INFO - Processed paragraph 5 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: By default, a record-triggered flow runs when a record changes in a specified way. But you can delay that automation by using a scheduled path. Actions on a scheduled path are triggered when the specified record change occurs, but run after a period of time. This can be minutes, hours, days, or even months after the record change. They can also be scheduled for a period of time before or after a field on the triggering record. For example:
2023-04-04 11:56:02,685 - INFO - No related goals found
2023-04-04 11:56:03,680 - INFO - Processed paragraph 6 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: 6 hours after a case is created
  2 days after the renewal date for an account
  1 month before the warranty expiration date
2023-04-04 11:56:03,681 - INFO - No related goals found
2023-04-04 11:56:04,715 - INFO - Processed paragraph 7 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Business Requirement
2023-04-04 11:56:04,715 - INFO - No related goals found
2023-04-04 11:56:06,355 - INFO - Processed paragraph 8 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Let’s expand our opportunity flow to include a new business requirement: Remind the opportunity owner to follow up with the account owner 5 days after the opportunity closes.&nbsp;
Note the timing “5 days after”. To create that 5-day delay in the flow, we add a scheduled path. In the scheduled path we create a task for the account’s owner.
2023-04-04 11:56:06,355 - INFO - Related goals: 1, 3, 13
2023-04-04 11:56:07,351 - INFO - Processed paragraph 9 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Configure Scheduled Paths
2023-04-04 11:56:07,351 - INFO - No related goals found
2023-04-04 11:56:08,826 - INFO - Processed paragraph 10 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Under Flow Definitions, select the Triggered Flows list view.
  In the Flow Label column, click Closed Won Opportunities. The flow opens.&nbsp;Because we chose Actions and Related Records&nbsp;when we created the original flow, we can add our scheduled path directly in this flow. You can use scheduled paths only when the flow uses the Actions and Related Records option.
  Click Add Scheduled Paths (Optional).
2023-04-04 11:56:08,827 - INFO - No related goals found
2023-04-04 11:56:11,638 - INFO - Processed paragraph 11 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: For Path Label, enter 5 Days After Close. The API Name field is automatically updated to X5_Days_After_Close.
  For Time Source, select Opportunity: Close Date.
  For Offset Number, enter 5.
  For Offset Options, select Days After.
  Click Done.
2023-04-04 11:56:11,639 - INFO - No related goals found
2023-04-04 11:56:12,649 - INFO - Processed paragraph 12 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Add a Task
2023-04-04 11:56:12,649 - INFO - No related goals found
2023-04-04 11:56:14,409 - INFO - Processed paragraph 13 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Now let’s add the task to remind the opportunity owner to follow up with the account owner five days after the opportunity closes.
2023-04-04 11:56:14,409 - INFO - No related goals found
2023-04-04 11:56:15,380 - INFO - Processed paragraph 14 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Below 5 Days After Close, click + to add an element.
  Scroll to the Data section and click Create Records. The New Create Records window opens.
2023-04-04 11:56:15,380 - INFO - No related goals found
2023-04-04 11:56:16,405 - INFO - Processed paragraph 15 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: For Label, enter Personalized Welcome Task. The API Name is automatically updated to Personalized_Welcome_Task.
  For Description, enter Creates a task for the Account owner to reach out and welcome a new customer.
  For How Many Records to Create, keep One&nbsp;selected.
  For How to Set the Record Fields, select Use separate resources, and literal values.
  For Object, select Task.
2023-04-04 11:56:16,405 - INFO - No related goals found
2023-04-04 11:56:17,546 - INFO - Processed paragraph 16 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Set Conditions
2023-04-04 11:56:17,546 - INFO - No related goals found
2023-04-04 11:56:18,589 - INFO - Processed paragraph 17 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Under Set Field Values for the Task, set the task subject:
      Field: Subject
2023-04-04 11:56:18,589 - INFO - No related goals found
2023-04-04 11:56:19,644 - INFO - Processed paragraph 18 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Value: Personalized Welcome
2023-04-04 11:56:19,644 - INFO - No related goals found
2023-04-04 11:56:21,424 - INFO - Processed paragraph 19 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Click Add Field.
  Describe the task:
      Field: Description
2023-04-04 11:56:21,424 - INFO - No related goals found
2023-04-04 11:56:22,544 - INFO - Processed paragraph 20 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Value: Reach out with phone call to welcome new customer
2023-04-04 11:56:22,545 - INFO - No related goals found
2023-04-04 11:56:27,078 - INFO - Processed paragraph 21 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Click Add Field.
  Associate the new task with the opportunity that triggered the flow:
      Field: WhatIdThe WhatId field can refer to the ID of any related non-human object. It represents something other than a person, such as an account, opportunity, campaign, case, or custom object. To refer to a person object, such as contact, use WhoId.
      Value: $Record &gt; IdRemember, data from the record that triggered the flow is stored in the $Record variable. To reference the record itself, drill down from $Record to the Id field.
    
  
  Click Add Field.
  Set the owner of the new task to match the owner of the opportunity that triggered the flow:
      Field: OwnerID
2023-04-04 11:56:27,078 - INFO - Related goals: 1, 3, 13
2023-04-04 11:56:28,482 - INFO - Processed paragraph 22 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Value: $Record &gt; Account &gt; OwnerId
2023-04-04 11:56:28,482 - INFO - No related goals found
2023-04-04 11:56:29,444 - INFO - Processed paragraph 23 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Click Add Field.
  Set the task due date:
      Field: Activity Date
2023-04-04 11:56:29,444 - INFO - No related goals found
2023-04-04 11:56:30,538 - INFO - Processed paragraph 24 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Value: enter today’s date (You usually use a formula resource to dynamically set the activity date to a date in the future, but for simplicity in this module, we use today’s date.)
    
  
  Click Done.
  Click Save As | A New Version | Save.
2023-04-04 11:56:30,538 - INFO - No related goals found
2023-04-04 11:56:31,600 - INFO - Processed paragraph 25 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Adding the scheduled task is complete! Now let’s test to make sure that it's working properly.
2023-04-04 11:56:31,601 - INFO - No related goals found
2023-04-04 11:56:34,924 - INFO - Processed paragraph 26 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Debug the flow
2023-04-04 11:56:34,924 - INFO - No related goals found
2023-04-04 11:56:35,945 - INFO - Processed paragraph 27 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Click&nbsp;Debug. The Debug flow window opens.
2023-04-04 11:56:35,945 - INFO - No related goals found
2023-04-04 11:56:37,272 - INFO - Processed paragraph 28 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: For Path for Debug Run, select 5 Days After Close.
2023-04-04 11:56:37,272 - INFO - No related goals found
2023-04-04 11:56:38,367 - INFO - Processed paragraph 29 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: For Debug Options, click Skip start condition requirements.
  For Run the Flow As If the Record Is, keep Created&nbsp;selected.
  For Opportunity, select the same organization you used in unit 1 to run the flow against. (This example uses Grand Hotels Emergency Generators.)
  Click Run.The flow is debugged. If it ran successfully, the line connecting elements is orange.
  Click Back ( &nbsp;) to exit Flow Builder.
2023-04-04 11:56:38,367 - INFO - No related goals found
2023-04-04 11:56:39,335 - INFO - Processed paragraph 30 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Success! Using both an immediate path and a scheduled path, you’ve created a flow that automatically manages your high-value opportunities.
2023-04-04 11:56:39,335 - INFO - No related goals found
2023-04-04 11:56:40,656 - INFO - Processed paragraph 31 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Tell Me More
2023-04-04 11:56:40,656 - INFO - No related goals found
2023-04-04 11:56:42,119 - INFO - Processed paragraph 32 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: You can expand this flow to include more criteria and actions. If an opportunity doesn’t meet the conditions (greater than 25000 and Closed Won), do something different. For example, check whether a high-value opportunity is Closed Lost. If it is, automate different actions. But don’t stop there. What record-triggered flows can you build on other objects?
2023-04-04 11:56:42,119 - INFO - No related goals found
2023-04-04 11:56:43,919 - INFO - Processed paragraph 33 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Resources
2023-04-04 11:56:43,919 - INFO - No related goals found
2023-04-04 11:56:45,018 - INFO - Processed paragraph 34 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: Salesforce Architects:&nbsp;Record-Triggered Automation
  Developer Guide:&nbsp;Triggers and Order of Execution
2023-04-04 11:56:45,018 - INFO - No related goals found
2023-04-04 11:56:52,324 - INFO - Processed paragraph 35 in 2_record-triggered-flows_add-a-scheduled-task-to-your-flow_content.txt: 
2023-04-04 11:56:52,324 - INFO - Related goals: 2
2023-04-04 11:57:14,316 - INFO - Processed paragraph 0 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: 
2023-04-04 11:57:14,317 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:57:16,142 - INFO - Processed paragraph 1 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Learning Objectives
2023-04-04 11:57:16,142 - INFO - No related goals found
2023-04-04 11:57:17,792 - INFO - Processed paragraph 2 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: After completing this unit, you'll be able to:
2023-04-04 11:57:17,792 - INFO - No related goals found
2023-04-04 11:57:20,858 - INFO - Processed paragraph 3 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Define a CSRF vulnerability.
  Identify a CSRF vulnerability in Lightning Platform applications.
  Prevent a CSRF vulnerability using code- and org-level protections.
2023-04-04 11:57:20,858 - INFO - Related goals: 1, 5, 6, 15, 16, 16
2023-04-04 11:57:22,259 - INFO - Processed paragraph 4 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: What Is CSRF?
2023-04-04 11:57:22,260 - INFO - No related goals found
2023-04-04 11:57:23,277 - INFO - Processed paragraph 5 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: CSRF is a common web application vulnerability where a malicious application causes a user’s client to perform an unwanted action on a trusted site for which the user is currently authenticated. But what does that actually mean?
2023-04-04 11:57:23,277 - INFO - No related goals found
2023-04-04 11:57:25,437 - INFO - Processed paragraph 6 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: To explain, we use an example to walk through what this attack can look like in a real application. Again, think of our School District Management developer org.
Let’s start with the idea that we have built an application that lists all of the current students in our network of schools. In this application, there are two important things to note.
2023-04-04 11:57:25,438 - INFO - No related goals found
2023-04-04 11:57:26,420 - INFO - Processed paragraph 7 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Only the admin or the superintendent has access to the page that allows users to promote students to the honor roll.
  If you click the Honor Roll link, the page will automatically refresh. If you’ve added a student, there will be an alert noting that your student has been added to the honor roll.
2023-04-04 11:57:26,420 - INFO - No related goals found
2023-04-04 11:57:28,066 - INFO - Processed paragraph 8 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: What is happening behind the scenes is that the Honor Roll button makes a GET request to /promote?UserId=&lt;userid&gt;. As the page loads, it reads the URL parameter value and automatically changes the role of that student to the honor roll.
Seems pretty straightforward. You may be wondering, where’s the vulnerability?&nbsp;
Let’s take a look at this scenario again and change it slightly.
This time, imagine that after you logged in to your School District Management org, you decided to browse to another website. While on this website, you click a hyperlink. This hyperlink redirects to a link to www.beststudents.com/promote?user_id=123. This malicious link is executed on behalf of the admin (your signed-in account), thereby promoting a student to the honor roll without you realizing it.&nbsp;
2023-04-04 11:57:28,066 - INFO - No related goals found
2023-04-04 11:57:29,101 - INFO - Processed paragraph 9 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: This example is precisely what a CSRF attack can look like. The attacker got the user’s client (the browser) to perform an unwanted action (the advancement of a student to the honor roll) on a trusted site (School District Management app) for which the user is currently authenticated.
2023-04-04 11:57:29,102 - INFO - No related goals found
2023-04-04 11:57:30,148 - INFO - Processed paragraph 10 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Prevent&nbsp;CSRF Attacks
2023-04-04 11:57:30,148 - INFO - No related goals found
2023-04-04 11:57:32,819 - INFO - Processed paragraph 11 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Successfully performing a CSRF attack is not trivial. It requires the targeted user to visit the attack page while authenticated with the targeted service, which often requires coordinated deception on the part of the attacker (this is most commonly seen in phishing campaigns). If the attack is successfully performed, the impact of it can be severe, ranging from creating or modifying users to deleting data and even to account compromise. So how do you prevent an attacker from launching an attack on your end users?
If you remember from our honor roll example, the malicious website automatically submitted the request to the application containing the URL parameter (UserId) required to successfully submit the request. For this attack to succeed, the attacker had to know the exact name of the parameter—in other words, the attacker had to know the parameter name was “userID” not “id” or “user”—and also supply the associated values.
Consider a slightly different version of the page that has two required URL parameters: userId and token. For this same attack to occur, the attacker again has to correctly guess values for both parameters. But what if you made the token parameter value a random, unique value that changed on every request? This would make it next to impossible for an attacker to guess the current value, preventing the attack. This example is the most common prevention technique for CSRF.
2023-04-04 11:57:32,819 - INFO - No related goals found
2023-04-04 11:57:33,852 - INFO - Processed paragraph 12 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: For this prevention technique to be successful, four things must happen:
2023-04-04 11:57:33,852 - INFO - No related goals found
2023-04-04 11:57:34,827 - INFO - Processed paragraph 13 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: All sensitive state-changing requests (anything performing database operations) must include the token.
  The token must be unique to the request or user’s session.
  The token must be difficult to predict (long and random).
  The token must be validated by the server to ensure the request originated from the intended user.
2023-04-04 11:57:34,828 - INFO - No related goals found
2023-04-04 11:57:35,856 - INFO - Processed paragraph 14 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: If all four steps are properly implemented by the server, then the attacker can’t guess the current value of the token parameter and can’t manipulate the user’s browser into making the correct honor roll request to the app. The attacker sees an error and is unsuccessful.
2023-04-04 11:57:35,856 - INFO - No related goals found
2023-04-04 11:57:36,842 - INFO - Processed paragraph 15 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Use the Salesforce Platform to Protect Against CSRF
2023-04-04 11:57:36,842 - INFO - No related goals found
2023-04-04 11:57:39,781 - INFO - Processed paragraph 16 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Luckily, Salesforce includes out-of-the-box protections against CSRF for developers.
By default, requests made against Salesforce resources have CSRF tokens attached to them. These pseudo-random tokens prevent the reuse and distribution of hyperlinks in order to protect privileged accounts from accidentally making state-changing requests that were not intended.
Beyond this, developers of Lightning applications need to pay attention to how their code is structured to prevent CSRF attacks from occurring. The most simple forms of CSRF attacks use HTTP GET requests with state-changing parameters, like GET mywebsite.com?change_username=”joe”.
By simply avoiding the use of state-changing HTTP GET requests, you can eliminate a large number of CSRF vulnerabilities in your code. When you reach out to a web API, make use of POST or PUT instead when state changes are needed.&nbsp;
There are several other mitigations that can be put in place in your application to prevent CSRF attacks.
When an endpoint is hit in your API, you can validate the origin header. The origin header is set on HTTP GET requests and specifies the URL from which a request originated. If the request is on the forbidden headers list, meaning all major browsers will not allow it to be spoofed via JavaScript—it will always return the correct value unless the request initiates from a nonstandard browser or tool.
When you integrate your Salesforce Lightning application with a third-party application via API, you may desire your own anti-CSRF tokens. These can easily be added to XMLHttpRequests within Lightning by using setRequestHeader() in an HTTP request that looks like this:
2023-04-04 11:57:39,782 - INFO - No related goals found
2023-04-04 11:57:41,118 - INFO - Processed paragraph 17 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: var o = XMLHttpRequest.prototype.open;
XMLHttpRequest.prototype.open = function(){
    var res = o.apply(this, arguments);
    var err = new Error();
    this.setRequestHeader('anti-csrf-token', csrf_token);
    return res;
};Copy
2023-04-04 11:57:41,118 - INFO - No related goals found
2023-04-04 11:57:43,493 - INFO - Processed paragraph 18 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Now that you understand how to prevent malicious applications from accessing your users’ clients and performing unwanted actions, you can ensure that the applications you design for the Salesforce platform are secure.&nbsp;
In addition, knowing how to secure your development on the server-side prevents you from leaving security vulnerabilities open when you're building applications.&nbsp;
2023-04-04 11:57:43,494 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 11:57:44,537 - INFO - Processed paragraph 19 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Resources
2023-04-04 11:57:44,537 - INFO - No related goals found
2023-04-04 11:57:45,654 - INFO - Processed paragraph 20 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: Website: OWASP Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet
2023-04-04 11:57:45,654 - INFO - No related goals found
2023-04-04 11:57:53,090 - INFO - Processed paragraph 21 in 2_secure-serverside-development_mitigate-crosssite-request-forgery_content.txt: 
2023-04-04 11:57:53,091 - INFO - Related goals: 2
2023-04-04 11:57:58,152 - INFO - Processed paragraph 0 in 3_apex_database_apex_database_soql_content.txt: 
2023-04-04 11:57:58,152 - INFO - Related goals: 9
2023-04-04 11:58:00,147 - INFO - Processed paragraph 1 in 3_apex_database_apex_database_soql_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Write SOQL queries in Apex.
        Execute SOQL queries by using the Query Editor in the Developer Console.
        Execute SOQL queries embedded in Apex by using Anonymous Apex.
        Query related records.
2023-04-04 11:58:00,147 - INFO - Related goals: 8
2023-04-04 11:58:22,349 - INFO - Processed paragraph 2 in 3_apex_database_apex_database_soql_content.txt: 
2023-04-04 11:58:22,350 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:58:23,770 - INFO - Processed paragraph 3 in 3_apex_database_apex_database_soql_content.txt: Get Started with SOQL
  
  
    To read a record from Salesforce, you must write a query. Salesforce provides the Salesforce Object Query Language, or SOQL in short, that you can use to read saved records. SOQL is similar to the standard SQL language but is customized for the Lightning Platform.
    
    Because Apex has direct access to Salesforce records that are stored in the database, you can embed SOQL queries in your Apex code and get results in a straightforward fashion. When SOQL is embedded in Apex, it is referred to as inline SOQL.
2023-04-04 11:58:23,770 - INFO - Related goals: 8
2023-04-04 11:58:25,759 - INFO - Processed paragraph 4 in 3_apex_database_apex_database_soql_content.txt: To include SOQL queries within your Apex code, wrap the SOQL statement within square brackets and assign the return value to an array of sObjects. For example, the following retrieves all account records with two fields, Name and Phone, and returns an array of Account sObjects.
    
Account[] accts = [SELECT Name,Phone FROM Account];Copy
    
    
      Prerequisites
      Some queries in this unit expect the org to have accounts and contacts. Before you run the queries, create some sample data.
      
        In the Developer Console, open the Execute Anonymous window from the Debug menu.
        Insert the below snippet in the window and click Execute.
      
      
// Add account and related contact
Account acct = new Account(
    Name='SFDC Computing',
    Phone='(415)555-1212',
    NumberOfEmployees=50,
    BillingCity='San Francisco');
insert acct;
// Once the account is inserted, the sObject will be 
// populated with an ID.
// Get this ID.
ID acctID = acct.ID;
// Add a contact to this account.
Contact con = new Contact(
    FirstName='Carol',
    LastName='Ruiz',
    Phone='(415)555-1212',
    Department='Wingo',
    AccountId=acctID);
insert con;
// Add account with no contact
Account acct2 = new Account(
    Name='The SFDC Query Man',
    Phone='(310)555-1213',
    NumberOfEmployees=50,
    BillingCity='Los Angeles',
    Description='Expert in wing technologies.');
insert acct2;Copy
      
    
    
      Use the Query Editor
      The Developer Console provides the Query Editor console, which enables you to run your SOQL queries and view results. The Query Editor provides a quick way to inspect the database. It is a good way to test your SOQL queries before adding them to your Apex code. When you use the Query Editor, you must supply only the SOQL statement without the Apex code that surrounds it.
      Let’s try running the following SOQL example:
      
        In the Developer Console, click the Query Editor&nbsp; tab.
        Copy and paste the following into the first box under Query Editor, and then click Execute.
      
      
SELECT Name,Phone FROM AccountCopy
      
      All account records in your org appear in the Query Results section as rows with fields.
    
    
      
        Basic SOQL Syntax
      
      This is the syntax of a basic SOQL query:
      
SELECT fields FROM ObjectName [WHERE Condition]Copy
      
      The WHERE clause is optional. Let’s start with a very simple query. For example, the following query retrieves accounts and gets Name and Phone fields for each account.
      
SELECT Name,Phone FROM AccountCopy
      
      The query has two parts:
      
        
SELECT Name,Phone: This part lists the fields that you would like to retrieve. The fields are specified after the SELECT keyword in a comma-delimited list. Or you can specify only one field, in which case no comma is necessary (e.g. SELECT Phone).
        
FROM Account: This part specifies the standard or custom object that you want to retrieve. In this example, it’s Account. For a custom object called Invoice_Statement, it is Invoice_Statement__c.
      
      
        
          
            
              
                
                  
                    
                      
                        
                        
                          
                            Beyond the Basics
                            Unlike other SQL languages, you can’t specify * for all fields. You must specify every field you want to get explicitly. If you try to access a field you haven’t specified in the SELECT clause, you’ll get an error because the field hasn’t been retrieved.
                            You don’t need to specify the Id field in the query as it is always returned in Apex queries, whether it is specified in the query or not. For example: SELECT Id,Phone FROM Account and SELECT Phone FROM Account are equivalent statements. The only time you may want to specify the Id field if it is the only field you’re retrieving because you have to list at least one field: SELECT Id FROM Account. You may want to specify the Id field also when running a query in the Query Editor as the ID field won’t be displayed unless specified.
                          
                        
                      
                    
                  
                
              
            
          
        
      
    
    
      Filter Query Results with Conditions
      If you have more than one account in the org, they will all be returned. If you want to limit the accounts returned to accounts that fulfill a certain condition, you can add this condition inside the WHERE clause. The following example retrieves only the accounts whose names are SFDC Computing. Note that comparisons on strings are case-insensitive.
      
SELECT Name,Phone FROM Account WHERE Name='SFDC Computing'Copy
      
      The WHERE clause can contain multiple conditions that are grouped by using logical operators (AND, OR) and parentheses. For example, this query returns all accounts whose name is SFDC Computing that have more than 25 employees:
      
SELECT Name,Phone FROM Account WHERE (Name='SFDC Computing' AND NumberOfEmployees&gt;25)Copy
      
      This is another example with a more complex condition. This query returns all of these records:
      
        All SFDC Computing accounts
        All accounts with more than 25 employees whose billing city is Los Angeles
      
      
SELECT Name,Phone FROM Account WHERE (Name='SFDC Computing' OR (NumberOfEmployees&gt;25 AND BillingCity='Los Angeles'))Copy
      
      
        
          
            
              
                
                  
                    
                      
                        
                        
                          
                            Beyond the Basics
                            Instead of using the equal operator (=) for comparison, you can perform fuzzy matches by using the LIKE operator. For example, you can retrieve all accounts whose names start with SFDC by using this condition: WHERE Name LIKE 'SFDC%'. The % wildcard character matches any or no character. The _ character in contrast can be used to match just one character.
                          
                        
                      
                    
                  
                
              
            
          
        
      
    
    
      Order Query Results
      When a query executes, it returns records from Salesforce in no particular order, so you can’t rely on the order of records in the returned array to be the same each time the query is run. You can however choose to sort the returned record set by adding an ORDER BY clause and specifying the field by which the record set should be sorted. This example sorts all retrieved accounts based on the Name field.
      
SELECT Name,Phone FROM Account ORDER BY NameCopy
      
      The default sort order is in alphabetical order, specified as ASC. The previous statement is equivalent to:
      
SELECT Name,Phone FROM Account ORDER BY Name ASCCopy
      
      To reverse the order, use the DESC keyword for descending order:
      
SELECT Name,Phone FROM Account ORDER BY Name DESCCopy
      
      You can sort on most fields, including numeric and text fields. You can’t sort on fields like rich text and multi-select picklists.
      Try these SOQL statements in the Query Editor and see how the order of the returned record changes based on the Name field.
    
    
      Limit the Number of Records Returned
      You can limit the number of records returned to an arbitrary number by adding the LIMIT n clause where n is the number of records you want returned. Limiting the result set is handy when you don’t care which records are returned, but you just want to work with a subset of records. For example, this query retrieves the first account that is returned. Notice that the returned value is one account and not an array when using LIMIT 1.
      
Account oneAccountOnly = [SELECT Name,Phone FROM Account LIMIT 1];Copy
      
    
    
      
        Combine All Pieces Together
      
      You can combine the optional clauses in one query, in the following order:
      
SELECT Name,Phone FROM Account 
                   WHERE (Name = 'SFDC Computing' AND NumberOfEmployees&gt;25)
                   ORDER BY Name
                   LIMIT 10Copy
      
      Execute the following SOQL query in Apex by using the Execute Anonymous window in the Developer Console. Then inspect the debug statements in the debug log. One sample account should be returned.
      
Account[] accts = [SELECT Name,Phone FROM Account 
                   WHERE (Name='SFDC Computing' AND NumberOfEmployees&gt;25)
                   ORDER BY Name
                   LIMIT 10];
System.debug(accts.size() + ' account(s) returned.');
// Write all account array info
System.debug(accts);Copy
      
    
    
      Access Variables in SOQL Queries
      SOQL statements in Apex can reference Apex code variables and expressions if they are preceded by a colon (:). The use of a local variable within a SOQL statement is called a bind.
      This example shows how to use the targetDepartment variable in the WHERE clause.
      
String targetDepartment = 'Wingo';
Contact[] techContacts = [SELECT FirstName,LastName 
                          FROM Contact WHERE Department=:targetDepartment];Copy
      
    
    
      Query Related Records
      Records in Salesforce can be linked to each other through relationships: lookup relationships or master-detail relationships. For example, the Contact has a lookup relationship to Account. When you create or update a contact, you can associate it with an account. The contacts that are associated with the same account appear in a related list on the account’s page. In the same way you can view related records in the Salesforce user interface, you can query related records in SOQL.
      To get child records related to a parent record, add an inner query for the child records. The FROM clause of the inner query runs against the relationship name, rather than a Salesforce object name. This example contains an inner query to get all contacts that are associated with each returned account. The FROM clause specifies the Contacts relationship, which is a default relationship on Account that links accounts and contacts.
      
SELECT Name, (SELECT LastName FROM Contacts) FROM Account WHERE Name = 'SFDC Computing'Copy
      
      This next example embeds the example SOQL query in Apex and shows how to get the child records from the SOQL result by using the Contacts relationship name on the sObject.
      
Account[] acctsWithContacts = [SELECT Name, (SELECT FirstName,LastName FROM Contacts)
                               FROM Account 
                               WHERE Name = 'SFDC Computing'];
// Get child records
Contact[] cts = acctsWithContacts[0].Contacts;
System.debug('Name of first associated contact: ' 
             + cts[0].FirstName + ', ' + cts[0].LastName);Copy
      
      You can traverse a relationship from a child object (contact) to a field on its parent (Account.Name) by using dot notation. For example, the following Apex snippet queries contact records whose first name is Carol and is able to retrieve the name of Carol’s associated account by traversing the relationship between accounts and contacts.
      
Contact[] cts = [SELECT Account.Name FROM Contact 
                 WHERE FirstName = 'Carol' AND LastName='Ruiz'];
Contact carol = cts[0];
String acctName = carol.Account.Name;
System.debug('Carol\'s account name is ' + acctName);Copy
      
      
        
          
            
              
              
                
                  Note
                  The examples in this section are based on standard objects. Custom objects can also be linked together by using custom relationships. Custom relationship names end with the __r suffix. For example, invoice statements are linked to line items through the Line_Items__r relationship on the Invoice_Statement__c custom object.
                
              
            
          
        
      
    
    
      Query Record in Batches By Using SOQL For Loops
      With a SOQL for loop, you can include a SOQL query within a for loop. The results of a SOQL query can be iterated over within the loop. SOQL for loops use a different method for retrieving records—records are retrieved using efficient chunking with calls to the query and queryMore methods of the SOAP API. By using SOQL for loops, you can avoid hitting the heap size limit.
      SOQL for loops iterate over all of the sObject records returned by a SOQL query. The syntax of a SOQL for loop is either:
for (variable : [soql_query]) {
    code_block
}Copy
        or
for (variable_list : [soql_query]) {
    code_block
}Copy
        
      
      Both &nbsp;variable and &nbsp;variable_list must be of the same type as the sObjects that are returned by the &nbsp;soql_query.
      It is preferable to use the sObject list format of the SOQL for loop as the loop executes once for each batch of 200 sObjects. Doing so enables you to work on batches of records and perform DML operations in batch, which helps avoid reaching governor limits.
      
insert new Account[]{new Account(Name = 'for loop 1'), 
                     new Account(Name = 'for loop 2'), 
                     new Account(Name = 'for loop 3')};
// The sObject list format executes the for loop once per returned batch
// of records
Integer i=0;
Integer j=0;
for (Account[] tmp : [SELECT Id FROM Account WHERE Name LIKE 'for loop _']) {
    j = tmp.size();
    i++;
}
System.assertEquals(3, j); // The list should have contained the three accounts
                       // named 'yyy'
System.assertEquals(1, i); // Since a single batch can hold up to 200 records and,
                       // only three records should have been returned, the 
                       // loop should have executed only onceCopy
2023-04-04 11:58:25,762 - INFO - Related goals: 8
2023-04-04 11:58:50,845 - INFO - Processed paragraph 5 in 3_apex_database_apex_database_soql_content.txt: 
2023-04-04 11:58:50,846 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:58:51,934 - INFO - Processed paragraph 6 in 3_apex_database_apex_database_soql_content.txt: Resources
  
  
    
      SOQL and SOSL Reference
2023-04-04 11:58:51,934 - INFO - No related goals found
2023-04-04 11:59:17,396 - INFO - Processed paragraph 7 in 3_apex_database_apex_database_soql_content.txt: 
2023-04-04 11:59:17,396 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:59:23,932 - INFO - Processed paragraph 0 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 11:59:23,932 - INFO - Related goals: 2
2023-04-04 11:59:26,331 - INFO - Processed paragraph 1 in 3_asynchronous_apex_async_apex_queueable_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll know: 
      
        When to use the Queueable interface.
        The differences between queueable and future methods.
        Queueable Apex syntax.
        Queueable method best practices.
2023-04-04 11:59:26,331 - INFO - No related goals found
2023-04-04 11:59:42,365 - INFO - Processed paragraph 2 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 11:59:42,365 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 11:59:43,381 - INFO - Processed paragraph 3 in 3_asynchronous_apex_async_apex_queueable_content.txt: Follow Along with Trail Together
  
  Want to follow along with an instructor as you work through this step? Take a look at this video, part of the Trail Together series on Trailhead Live.
2023-04-04 11:59:43,382 - INFO - No related goals found
2023-04-04 11:59:45,495 - INFO - Processed paragraph 4 in 3_asynchronous_apex_async_apex_queueable_content.txt: (This clip starts at the 52:38 minute mark, in case you want to rewind and watch the beginning of the step again.)
  
    Queueable Apex
  
  
    Released in Winter '15, Queueable Apex is essentially a superset of future methods with some extra #awesomesauce. We took the simplicity of future methods and the power of Batch Apex and mixed them together to form Queueable Apex! It gives you a class structure that the platform serializes for you, a simplified interface without start and finish methods and even allows you to utilize more than just primitive arguments! It is called by a simple System.enqueueJob() method, which returns a job ID that you can monitor. It beats sliced bread hands down!
    Queueable Apex allows you to submit jobs for asynchronous processing similar to future methods with the following additional benefits: 
      
        Non-primitive types: Your Queueable class can contain member variables of non-primitive data types, such as sObjects or custom Apex types. Those objects can be accessed when the job executes.
        Monitoring: When you submit your job by invoking the System.enqueueJob() method, the method returns the ID of the AsyncApexJob record. You can use this ID to identify your job and monitor its progress, either through the Salesforce user interface in the Apex Jobs page, or programmatically by querying your record from AsyncApexJob.
        Chaining jobs: You can chain one job to another job by starting a second job from a running job. Chaining jobs is useful if you need to do some sequential processing.
2023-04-04 11:59:45,495 - INFO - Related goals: 1, 8, 18
2023-04-04 11:59:49,079 - INFO - Processed paragraph 5 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 11:59:49,079 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21
2023-04-04 11:59:51,548 - INFO - Processed paragraph 6 in 3_asynchronous_apex_async_apex_queueable_content.txt: Queueable Versus Future
  
  
    Because queueable methods are functionally equivalent to future methods, most of the time you’ll probably want to use queueable instead of future methods. However, this doesn’t necessarily mean you should go back and refactor all your future methods right now.
    Another reason to use future methods instead of queueable is when your functionality is sometimes executed synchronously, and sometimes asynchronously. It’s much easier to refactor a method in this manner than converting to a queueable class. This is handy when you discover that part of your existing code needs to be moved to async execution. You can simply create a similar future method that wraps your synchronous method like so:
    
@future
static void myFutureMethod(List&lt;String&gt; params) {
    // call synchronous method
    mySyncMethod(params);
}Copy
2023-04-04 11:59:51,548 - INFO - No related goals found
2023-04-04 12:00:00,196 - INFO - Processed paragraph 7 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 12:00:00,196 - INFO - Related goals: 2
2023-04-04 12:00:07,829 - INFO - Processed paragraph 8 in 3_asynchronous_apex_async_apex_queueable_content.txt: Queueable Syntax
  
  
    To use Queueable Apex, simply implement the Queueable interface.
    
public class SomeClass implements Queueable {
    public void execute(QueueableContext context) {
        // awesome code here
    }
}Copy
    
    
      
        Sample Code
      
      A common scenario is to take some set of sObject records, execute some processing such as making a callout to an external REST endpoint or perform some calculations and then update them in the database asynchronously. Because @future methods are limited to primitive data types (or arrays or collections of primitives), queueable Apex is an ideal choice. The following code takes a collection of Account records, sets the parentId for each record, and then updates the records in the database.
      
public class UpdateParentAccount implements Queueable {
    private List&lt;Account&gt; accounts;
    private ID parent;
    public UpdateParentAccount(List&lt;Account&gt; records, ID id) {
        this.accounts = records;
        this.parent = id;
    }
    public void execute(QueueableContext context) {
        for (Account account : accounts) {
          account.parentId = parent;
          // perform other processing or callout
        }
        update accounts;
    }
}Copy
      
      To add this class as a job on the queue, execute the following code:
      
// find all accounts in ‘NY’
List&lt;Account&gt; accounts = [select id from account where billingstate = ‘NY’];
// find a specific parent account for all records
Id parentId = [select id from account where name = 'ACME Corp'][0].Id;
// instantiate a new instance of the Queueable class
UpdateParentAccount updateJob = new UpdateParentAccount(accounts, parentId);
// enqueue the job for processing
ID jobID = System.enqueueJob(updateJob);Copy
      
      After you submit your queueable class for execution, the job is added to the queue and will be processed when system resources become available.
      You can use the new job ID to monitor progress, either through the Apex Jobs page or programmatically by querying AsyncApexJob:
      
SELECT Id, Status, NumberOfErrors FROM AsyncApexJob WHERE Id = :jobIDCopy
2023-04-04 12:00:07,830 - INFO - Related goals: 1, 8, 18
2023-04-04 12:00:31,675 - INFO - Processed paragraph 9 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 12:00:31,675 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:00:33,782 - INFO - Processed paragraph 10 in 3_asynchronous_apex_async_apex_queueable_content.txt: Testing Queueable Apex
  
  
    The following code sample shows how to test the execution of a queueable job in a test method. It looks very similar to Batch Apex testing. To ensure that the queueable process runs within the test method, the job is submitted to the queue between the Test.startTest and Test.stopTest block. The system executes all asynchronous processes started in a test method synchronously after the Test.stopTest statement. Next, the test method verifies the results of the queueable job by querying the account records that the job updated.
    
@isTest
public class UpdateParentAccountTest {
    @testSetup
    static void setup() {
        List&lt;Account&gt; accounts = new List&lt;Account&gt;();
        // add a parent account
        accounts.add(new Account(name='Parent'));
        // add 100 child accounts
        for (Integer i = 0; i &lt; 100; i++) {
            accounts.add(new Account(
                name='Test Account'+i
            ));
        }
        insert accounts;
    }
    static testmethod void testQueueable() {
        // query for test data to pass to queueable class
        Id parentId = [select id from account where name = 'Parent'][0].Id;
        List&lt;Account&gt; accounts = [select id, name from account where name like 'Test Account%'];
        // Create our Queueable instance
        UpdateParentAccount updater = new UpdateParentAccount(accounts, parentId);
        // startTest/stopTest block to force async processes to run
        Test.startTest();
        System.enqueueJob(updater);
        Test.stopTest();
        // Validate the job ran. Check if record have correct parentId now
        System.assertEquals(100, [select count() from account where parentId = :parentId]);
    }
}Copy
2023-04-04 12:00:33,783 - INFO - Related goals: 1, 9, 19
2023-04-04 12:00:37,366 - INFO - Processed paragraph 11 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 12:00:37,366 - INFO - Related goals: 1, 2, 8, 9, 10, 11, 12
2023-04-04 12:00:41,002 - INFO - Processed paragraph 12 in 3_asynchronous_apex_async_apex_queueable_content.txt: Chaining Jobs
  
  
    One of the best features of Queueable Apex is job chaining. If you ever need to run jobs sequentially, Queueable Apex could make your life much easier. To chain a job to another job, submit the second job from the execute() method of your queueable class. You can add only one job from an executing job, which means that only one child job can exist for each parent job. For example, if you have a second class called SecondJob that implements the Queueable interface, you can add this class to the queue in the execute() method as follows:
    
public class FirstJob implements Queueable {
    public void execute(QueueableContext context) {
        // Awesome processing logic here
        // Chain this job to next job by submitting the next job
        System.enqueueJob(new SecondJob());
    }
}Copy
    
    Once again, testing has a slightly different pattern. You can’t chain queueable jobs in an Apex test, doing so results in an error. To avoid nasty errors, you can check if Apex is running in test context by calling Test.isRunningTest() before chaining jobs.
2023-04-04 12:00:41,002 - INFO - Related goals: 1, 8, 18
2023-04-04 12:00:49,815 - INFO - Processed paragraph 13 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 12:00:49,815 - INFO - Related goals: 1, 2, 3, 4, 5, 21
2023-04-04 12:00:50,799 - INFO - Processed paragraph 14 in 3_asynchronous_apex_async_apex_queueable_content.txt: Things to Remember
  
  
    Queueable Apex is a great new tool but there are a few things to watch out for: 
      
        The execution of a queued job counts once against the shared limit for asynchronous Apex method executions.
        You can add up to 50 jobs to the queue with System.enqueueJob in a single transaction.
        When chaining jobs, you can add only one job from an executing job with System.enqueueJob, which means that only one child job can exist for each parent queueable job. Starting multiple child jobs from the same queueable job is a no-no.
        No limit is enforced on the depth of chained jobs, which means that you can chain one job to another job and repeat this process with each new child job to link it to a new child job. However, for Developer Edition and Trial orgs, the maximum stack depth for chained jobs is 5, which means that you can chain jobs four times and the maximum number of jobs in the chain is 5, including the initial parent queueable job.
2023-04-04 12:00:50,799 - INFO - No related goals found
2023-04-04 12:01:16,650 - INFO - Processed paragraph 15 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 12:01:16,650 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:01:17,620 - INFO - Processed paragraph 16 in 3_asynchronous_apex_async_apex_queueable_content.txt: Resources
2023-04-04 12:01:17,620 - INFO - No related goals found
2023-04-04 12:01:18,584 - INFO - Processed paragraph 17 in 3_asynchronous_apex_async_apex_queueable_content.txt: Apex Developer Guide: Queueable Apex
2023-04-04 12:01:18,584 - INFO - No related goals found
2023-04-04 12:01:41,063 - INFO - Processed paragraph 18 in 3_asynchronous_apex_async_apex_queueable_content.txt: 
2023-04-04 12:01:41,063 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:02:01,778 - INFO - Processed paragraph 0 in 3_developer_console_developer_console_checkpoints_content.txt: 
2023-04-04 12:02:01,778 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:02:03,710 - INFO - Processed paragraph 1 in 3_developer_console_developer_console_checkpoints_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll be able to:
        Set up checkpoints in your Apex code.
        Analyze the objects in memory using the Checkpoint Inspector.
2023-04-04 12:02:03,710 - INFO - No related goals found
2023-04-04 12:02:28,460 - INFO - Processed paragraph 2 in 3_developer_console_developer_console_checkpoints_content.txt: 
2023-04-04 12:02:28,460 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:02:30,551 - INFO - Processed paragraph 3 in 3_developer_console_developer_console_checkpoints_content.txt: Set Checkpoints in Your Apex Code
  
  
    The moment your spaceship starts sounding system errors, you have to head straight to the logs to figure out what went wrong and where.
    Similarly, when your Apex code is causing errors, has performance issues, or isn’t producing the desired results, your first step is to identify the problem using your debug log. Combing line by line through the entire log is a tedious task. That’s where checkpoints come in handy! Checkpoints show you snapshots of what’s happening in your Apex code at particular points during execution.
    You can set up to five checkpoints in your Apex code. Checkpoints aren’t available for Visualforce markup.
    Let’s set a checkpoint in the EmailMissionSpecialistclass that we created earlier.
        Select File | Open, and open the EmailMissionSpecialist class.
        Select Debug | Change Log Levels.
        In the General Trace Settings for You section, click Add/Change.
        Set the ApexCode log level to FINEST. Note: To set checkpoints, you need the View All Data user permission. To generate results using checkpoints, run code using execute anonymous, or set a DEVELOPER_LOG trace flag on yourself. The trace flag must have a log level for Apex of INFO or higher.
        To save your changes, click Done.
        To exit the Change Log Levels dialog box, click Done.
      
    
    When your code is displayed in the source code editor, you can see line numbers on the left side. Click the line number for inspectResults(results);. A red dot (1) appears, indicating that a checkpoint has been created.
    
    Now you can execute your code and analyze it using the Checkpoints tab.
2023-04-04 12:02:30,552 - INFO - Related goals: 1, 2, 21
2023-04-04 12:02:37,784 - INFO - Processed paragraph 4 in 3_developer_console_developer_console_checkpoints_content.txt: 
2023-04-04 12:02:37,784 - INFO - Related goals: 3
2023-04-04 12:02:39,971 - INFO - Processed paragraph 5 in 3_developer_console_developer_console_checkpoints_content.txt: Checkpoints Tab
  
  
    You can view exactly where your code’s execution is going wrong, and what the values of the objects are at that point, using the Checkpoints tab. Let’s run this code to see the checkpoint in action.
    Select Debug | Open Execute Anonymous Window. Enter the following code and execute it. Be sure to replace Enter your email address with your email address.
    
EmailMissionSpecialist em = new EmailMissionSpecialist();
em.sendMail('Enter your email address', 'Flight Path Change', 
   'Mission Control 123: Your flight path has been changed to avoid collision '
   + 'with asteroid 2014 QO441.');Copy
    
    After you run the Apex code successfully, open your debug log and click the Checkpoints tab to see the results.
    
    
      
        The Checkpoints table displays the namespace, class, and line number of each checkpoint. It also shows you the date and time when each checkpoint was created.
        The Checkpoint Locations table displays the file name, line number, and iterations captured by the selected checkpoint.
      
    
    Double-click a checkpoint in the Checkpoints table to see the captured results in the Checkpoint Inspector. Now the fun begins!
2023-04-04 12:02:39,971 - INFO - No related goals found
2023-04-04 12:03:06,582 - INFO - Processed paragraph 6 in 3_developer_console_developer_console_checkpoints_content.txt: 
2023-04-04 12:03:06,582 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:03:07,711 - INFO - Processed paragraph 7 in 3_developer_console_developer_console_checkpoints_content.txt: Checkpoint Inspector
  
  
    The Checkpoint Inspector has two tabs: Heap and Symbols.
        
Heap—Displays all objects present in memory at the line of code where your checkpoint was executed.
        
Symbols—Displays all symbols in memory in tree view.
      
    
    
      
        Heap Tab
      
      The Heap tab includes some great panels for debugging, like the Types panel. This panel shows how many objects were instantiated and the memory they consumed in bytes. Let’s look at the details captured by the checkpoint you set.
          Under Types, click Messaging.SingleEmailMessage.
          Under Instances, click any instance of this object type.
          Under State, view the object’s fields and their values.
        
        
      
    
    
      
        Symbols Tab
      
      
        The Symbols tab is a quick and simple way to review the states of various objects at any checkpoint. Symbols are unique names that reference particular objects. The tab displays all symbols in memory using a tree view.
        
        As the Commander, you don’t just need to check whether the systems are running smoothly—you also need to track down errors. Let’s see how the Checkpoint Inspector can help you understand your code better.
            To clear the checkpoint results from the tab, select Debug | Clear | Checkpoint Results Panel.
            Select Debug | Open Execute Anonymous Window.
            Run the EmailMissionSpecialist class again, this time with an invalid email address, such as testingemail.EmailMissionSpecialist em = new EmailMissionSpecialist();
em.sendMail('testingemail', 'Flight Path Change', 
   'Mission Control 123: Your flight path has been changed to avoid collision '
   + 'with asteroid 2014 QO441.');Copy
            
            After you run the code, click the Checkpoints tab.
          
        
        The Checkpoints tab doesn’t show any results, because the execution of your code didn’t reach the line number where your checkpoint was set.
        
        Let’s add a checkpoint earlier in the code, so that we can capture information at the new checkpoint before our code hits the testingemailerror.
            Select File | Open and open the EmailMissionSpecialist class.
            Click the line number on the left for String[] toAddresses = new String[] {address}.
            Select Debug | Clear | Checkpoint Results Panel.
            Select Debug | Open Execute Anonymous Window.
            Run the EmailMissionSpecialistclass again with an invalid email address, such as testingemail.EmailMissionSpecialist em = new EmailMissionSpecialist();
em.sendMail('testingemail', 'Flight Path Change', 
   'Mission Control 123: Your flight path has been changed to avoid collision '
   + 'with asteroid 2014 QO441.');Copy
            
            Click the Checkpoints tab.
          
        
        You see a new entry in the Checkpoints tab. You can now analyze the objects in memory by using the Checkpoint Inspector.
2023-04-04 12:03:07,712 - INFO - No related goals found
2023-04-04 12:03:11,244 - INFO - Processed paragraph 8 in 3_developer_console_developer_console_checkpoints_content.txt: 
2023-04-04 12:03:11,245 - INFO - Related goals: 1
2023-04-04 12:03:12,188 - INFO - Processed paragraph 9 in 3_developer_console_developer_console_checkpoints_content.txt: Resources
  
  
    
      
        Salesforce Help: Checkpoints Tab
        Salesforce Help: Set Checkpoints in Apex Code
        Salesforce Help: Checkpoint Inspector
2023-04-04 12:03:12,188 - INFO - No related goals found
2023-04-04 12:03:34,458 - INFO - Processed paragraph 10 in 3_developer_console_developer_console_checkpoints_content.txt: 
2023-04-04 12:03:34,458 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:03:41,198 - INFO - Processed paragraph 0 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: 
2023-04-04 12:03:41,198 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:03:42,348 - INFO - Processed paragraph 1 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Learning Objectives
2023-04-04 12:03:42,349 - INFO - No related goals found
2023-04-04 12:03:43,411 - INFO - Processed paragraph 2 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: After completing this unit, you'll be able to:
2023-04-04 12:03:43,411 - INFO - No related goals found
2023-04-04 12:03:45,468 - INFO - Processed paragraph 3 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Create an app that includes multiple components.
  Describe the file structure of a complex component.
  Handle events.
2023-04-04 12:03:45,469 - INFO - Related goals: 1, 5, 15
2023-04-04 12:03:46,849 - INFO - Processed paragraph 4 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Follow an Event's Journey
2023-04-04 12:03:46,850 - INFO - No related goals found
2023-04-04 12:03:47,973 - INFO - Processed paragraph 5 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: You've built a component and pushed it to an org. Let's start adding some interactivity with event handling. We follow an event's journey through several components for sophisticated event handling in an application. This application is a product selector for a bicycle shop. Users click a bike name and image to see more detail.
2023-04-04 12:03:47,973 - INFO - No related goals found
2023-04-04 12:03:49,309 - INFO - Processed paragraph 6 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: This app has four components working together.
2023-04-04 12:03:49,309 - INFO - No related goals found
2023-04-04 12:03:50,363 - INFO - Processed paragraph 7 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: tile: displays an individual item.
  
list: arranges the tiles.
  
detail: displays item details when a tile is clicked (similar to the bikeCard you just created).
  
selector: contains the whole set of components. A container component isn't required, but we're using one here to help with event handling.
2023-04-04 12:03:50,363 - INFO - No related goals found
2023-04-04 12:03:51,349 - INFO - Processed paragraph 8 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: For now, the application uses a data file to load static data for testing. In the next unit, you learn how to pull dynamic data from an org.
2023-04-04 12:03:51,350 - INFO - No related goals found
2023-04-04 12:03:52,347 - INFO - Processed paragraph 9 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Component Composition
2023-04-04 12:03:52,347 - INFO - No related goals found
2023-04-04 12:03:53,295 - INFO - Processed paragraph 10 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Let's add some files to our project that we can deploy to an org.
2023-04-04 12:03:53,295 - INFO - No related goals found
2023-04-04 12:03:54,397 - INFO - Processed paragraph 11 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Download the files for this app here: Bike Selector App for Trailhead.
  Unzip the files into the lwc folder of the bikeCard project.
2023-04-04 12:03:54,397 - INFO - No related goals found
2023-04-04 12:03:57,521 - INFO - Processed paragraph 12 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: 
2023-04-04 12:03:57,522 - INFO - Related goals: 1, 4, 14
2023-04-04 12:03:58,568 - INFO - Processed paragraph 13 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Component Relationships
2023-04-04 12:03:58,568 - INFO - No related goals found
2023-04-04 12:04:00,781 - INFO - Processed paragraph 14 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: In this app, multiple components work together; some components are nested inside other components. Just as you nest HTML elements inside each other, Lightning web components—which are custom HTML elements—can be nested inside other Lightning web components.
In our file system, the components' folders don't really give insight into the relationships between them.
Let's look at how the components nested at the UI level in a diagram.
2023-04-04 12:04:00,781 - INFO - Related goals: 1, 5, 15
2023-04-04 12:04:05,072 - INFO - Processed paragraph 15 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: By looking at the files you can see the selector component lays out the page and renders the list(c-list) and detail(c-detail) components.
&lt;template&gt;
    &lt;div class="wrapper"&gt;
    &lt;header class="header"&gt;Select a Bike&lt;/header&gt;
    &lt;section class="content"&gt;
        &lt;div class="columns"&gt;
        &lt;main class="main" &gt;
            &lt;c-list onproductselected={handleProductSelected}&gt;&lt;/c-list&gt;
        &lt;/main&gt;
        &lt;aside class="sidebar-second"&gt;
            &lt;c-detail product-id={selectedProductId}&gt;&lt;/c-detail&gt;
        &lt;/aside&gt;
        &lt;/div&gt;
    &lt;/section&gt;
    &lt;/div&gt;
&lt;/template&gt;Copy
If you look in detail.html, you see conditional rendering(if:true={product} and if:false={product}). If nothing has been chosen from the list, then what's displayed is a message asking the user to choose something. If something is chosen, it displays the bike information.
&lt;template&gt;
    &lt;template if:true={product}&gt;
        &lt;div class="container"&gt;
            &lt;div&gt;{product.fields.Name.value}&lt;/div&gt;
            &lt;div class="price"&gt;{product.fields.MSRP__c.displayValue}&lt;/div&gt;
            &lt;div class="description"&gt;{product.fields.Description__c.value}&lt;/div&gt;
            &lt;img class="product-img" src={product.fields.Picture_URL__c.value}&gt;&lt;/img&gt;
            &lt;p&gt;
                &lt;lightning-badge label={product.fields.Material__c.value}&gt;&lt;/lightning-badge&gt;
                &lt;lightning-badge label={product.fields.Level__c.value}&gt;&lt;/lightning-badge&gt;
            &lt;/p&gt;
            &lt;p&gt;
                &lt;lightning-badge label={product.fields.Category__c.value}&gt;&lt;/lightning-badge&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/template&gt;
    &lt;template if:false={product}&gt;
        &lt;div&gt;Select a bike&lt;/div&gt;
    &lt;/template&gt;
&lt;/template&gt;Copy
The list component renders several tile(c-tile) components, one for each bike in the data. This nesting is achieved in the HTML for each parent component. For example, the list component has the following HTML, including the tile component as c-tile.
&lt;template&gt;
    &lt;div class="container"&gt;
        &lt;template for:each={bikes} for:item="bike"&gt;
            &lt;c-tile
                key={bike.fields.Id.value}
                product={bike}
                ontileclick={handleTileClick}&gt;
            &lt;/c-tile&gt;
        &lt;/template&gt;
    &lt;/div&gt;
&lt;/template&gt;Copy
Notice how each iteration of the bike item spawns a new tile component. Simply including the c-tile component tag makes each tile component its child. The div class definition “container” is used for styling, so you can control the arrangement of tiles. If you look at list.css, you see that it wraps the content.
.container {
   display: flex;
   flex-direction: row;
   flex-wrap: wrap;
}Copy
The parent/child relationship is important, not only for the design of the app, but also for event handling.
Let's dig a little deeper into the event handling.
2023-04-04 12:04:05,073 - INFO - Related goals: 1, 5, 15
2023-04-04 12:04:06,510 - INFO - Processed paragraph 16 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Events Up, Properties Down
2023-04-04 12:04:06,511 - INFO - No related goals found
2023-04-04 12:04:07,860 - INFO - Processed paragraph 17 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: In a complex component (one that contains several parent and child components), the components can communicate up and down.
2023-04-04 12:04:07,861 - INFO - No related goals found
2023-04-04 12:04:10,697 - INFO - Processed paragraph 18 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: The c-todo-item child component dispatches an event to the parent c-todo-app component. For example, the child can pass an event object to the parent when a user clicks a button so the parent can handle the event and change the current page.
  The c-todo-app parent component passes a property or invokes a method in the child component. For example, the parent can set a text value in a child component, or invoke a method in the child component.
2023-04-04 12:04:10,697 - INFO - No related goals found
2023-04-04 12:04:11,734 - INFO - Processed paragraph 19 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Let's look at how this communication works.
2023-04-04 12:04:11,734 - INFO - No related goals found
2023-04-04 12:04:12,756 - INFO - Processed paragraph 20 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Passing Information Up
2023-04-04 12:04:12,756 - INFO - No related goals found
2023-04-04 12:04:18,726 - INFO - Processed paragraph 21 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Information can be passed up using events and event listeners.
The child component dispatches the event and the parent component listens for it. Dispatching the event includes creating an event object the child can pass to the parent component. The parent has a handler to respond to the event.
For example, a child component like this one contains a nextHandler() method that creates a simple event object using CustomEvent() and dispatches the event type 'next' when the user clicks a Next button.// todoItem.js
import { LightningElement } from 'lwc';
...
    nextHandler() {
        this.dispatchEvent(new CustomEvent('next'));
    }
}Copy
2023-04-04 12:04:18,726 - INFO - Related goals: 1, 7, 17
2023-04-04 12:04:19,761 - INFO - Processed paragraph 22 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Event types can be any string but should conform to the DOM event standard of no uppercase letters, no spaces, and use underscores to separate words if necessary.
2023-04-04 12:04:19,761 - INFO - No related goals found
2023-04-04 12:04:23,750 - INFO - Processed paragraph 23 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: The parent component listens for the event with the inline event handler prefixed with 'on'(onnext).
&lt;!-- todoApp.html --&gt;
&lt;template&gt;
    &lt;c-todo-item onnext={nextHandler}&gt;&lt;/c-todo-item&gt;
&lt;/template&gt;Copy
And passes the event object to an event handler.
// todoApp.js
import { LightningElement } from 'lwc';
export default class TodoApp extends LightningElement {
...
nextHandler(){
        this.page = this.page + 1;
    }
}Copy
2023-04-04 12:04:23,750 - INFO - Related goals: 1, 5, 15
2023-04-04 12:04:25,197 - INFO - Processed paragraph 24 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Passing Information Down
2023-04-04 12:04:25,197 - INFO - No related goals found
2023-04-04 12:04:32,020 - INFO - Processed paragraph 25 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Information can be passed down using public properties and public methods.
You can make a component property public by prefacing it with the @api decorator. Then, set the public property by an external component.
For example, if the c-todo-item child component has the following:
// todoItem.js
import { LightningElement, api } from 'lwc';
export default class TodoItem extends LightningElement {
   @api itemName;
}Copy
Set the value from the parent with the following:
&lt;!-- todoApp.html --&gt;
&lt;template&gt;
    &lt;c-todo-item item-name="Milk"&gt;&lt;/c-todo-item&gt;
&lt;/template&gt;Copy
Notice that the itemName variable gets set using the kebab case attribute item-name. Property names in JavaScript are in camel case while HTML attribute names are in kebab case (dash-separated) to match HTML standards. The item-name attribute in markup maps to the itemName JavaScript property.
Public properties are great solutions for passing down primitive values, simple objects, and arrays.
Also, you can use getters &amp; setters to execute some logic when properties are get or set. And remember, annotate them with the @api decorator to make them public for other components.
Similarly, you can create public methods that are callable from a parent component. Create a public method in the child component by defining it with the @api decorator, then call it from the parent component.
Let's say that we have a child component like this one.
// videoPlayer.js
import { LightningElement, api } from 'lwc';
export default class VideoPlayer extends LightningElement {
   @api
   play() {
       // Play music!
   }
}Copy
When the c-video-player component is included in a parent component, we can invoke the method from the parent component like this:
// methodCaller.js
import { LightningElement } from 'lwc';
export default class MethodCaller extends LightningElement {
   handlePlay() {
      this.template.querySelector('c-video-player').play();
   }
}Copy
We defined a method handlePlay() that fires the event. Then we use the querySelector() DOM method to search for a DOM element called c-video-player and invoke its public method.
2023-04-04 12:04:32,021 - INFO - Related goals: 1, 5, 15
2023-04-04 12:04:32,971 - INFO - Processed paragraph 26 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Handling Events in HTML
2023-04-04 12:04:32,971 - INFO - No related goals found
2023-04-04 12:04:34,882 - INFO - Processed paragraph 27 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: So our selector app needs to handle one type of event—the user clicking a tile. When this happens, the detail component should re-render with the information from the related tile. You can handle events in HTML (add an event listener in the template) or JavaScript (write an event listener function). We recommend using the HTML approach, as follows.
Each tile component listens for the user click because the tile component's HTML (tile.html) contains an onclick event listener.
&lt;template&gt;
    &lt;div class="container"&gt;
        &lt;a onclick={tileClick}&gt;
            &lt;div class="title"&gt;{product.fields.Name.value}&lt;/div&gt;
            &lt;img class="product-img" src={product.fields.Picture_URL__c.value}&gt;&lt;/img&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/template&gt;Copy
When a user clicks one of the tile instances in the UI, the onclick listener calls the handler function tileClick in the tile.js JavaScript file.
import { LightningElement, api } from 'lwc';
export default class Tile extends LightningElement {
    @api product;
    tileClick() {
        const event = new CustomEvent('tileclick', {
            // detail contains only primitives
            detail: this.product.fields.Id.value
        });
        // Fire the event from c-tile
        this.dispatchEvent(event);
    }
}Copy
2023-04-04 12:04:34,883 - INFO - No related goals found
2023-04-04 12:04:36,208 - INFO - Processed paragraph 28 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Selector App Event Pattern
2023-04-04 12:04:36,208 - INFO - No related goals found
2023-04-04 12:04:37,248 - INFO - Processed paragraph 29 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: In our product selector app, we use a complex component (one that contains several parent and child components). We recommend that you propagate the event up through the component hierarchy, so parent components can respond to child events. If you have other child components (not the one firing the event), you can pass a property down to those children in response to the event.
The pattern looks like this:
2023-04-04 12:04:37,249 - INFO - No related goals found
2023-04-04 12:04:38,276 - INFO - Processed paragraph 30 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: To do this, we need to chain event listeners and handlers up the hierarchy to the ebikes component. Then pass a property down to the detail component.
In our files, you see the following.
2023-04-04 12:04:38,276 - INFO - No related goals found
2023-04-04 12:04:39,319 - INFO - Processed paragraph 31 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: tile.html has the onclick event listener that calls the tileClick handler.
  tile.js has the tileClick method that creates a new CustomEvent with event type tileclick and an object containing a detail value (this.product.fields.Id.value).
  list.html has the ontileclick listener that calls the handleTileClick handler.
  list.js has the handleTileClick method that passes in the event(evt) to create another CustomEvent(productselected) with an object also containing a detail value evt.detail. And it dispatches the event in JavaScript:
// Fire the event from c-list
this.dispatchEvent(event);Copy
  
  selector.html has the onproductselected event listener that calls the handleProductSelected handler.
  selector.js has the handleProductSelected method set selectedProductId to the evt.detail value that was passed into it.
  detail.html has a conditional directive (remember those from Unit 2?) waiting for a product value:
&lt;template if:true={product}&gt;Copy
  
  detail.js brings the pieces together. It creates a private variable _productId to track the state of the productId value. Then it uses a get/set pattern to get the value and set it to a variable product which lets detail.html load the conditional content.
2023-04-04 12:04:39,320 - INFO - No related goals found
2023-04-04 12:04:41,195 - INFO - Processed paragraph 32 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Getters and setters are a common JavaScript construction. They allow you to add logic and conditions to property assignments.
import { LightningElement, api } from 'lwc';
import { bikes } from 'c/data';
export default class Detail extends LightningElement {
    product;
    // Private var to track @api productId
    _productId = undefined;
    // Use set and get to process the value every time it's
    // requested while switching between products
    set productId(value) {
        this._productId = value;
        this.product = bikes.find(bike =&gt; bike.fields.Id.value === value);
    }
    // getter for productId
    @api get productId(){
        return this._productId;
    }
}Copy
Each time you click a tile, this process repeats itself.
2023-04-04 12:04:41,195 - INFO - No related goals found
2023-04-04 12:04:42,677 - INFO - Processed paragraph 33 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Events have properties to manage the propagation of the event up the DOM tree. You can read more about them in Configure Event Propagation. Changing the default values is for advanced event handling, and requires testing to ensure the expected behavior.
2023-04-04 12:04:42,677 - INFO - No related goals found
2023-04-04 12:04:43,657 - INFO - Processed paragraph 34 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Deploy Your Files to Your Org
2023-04-04 12:04:43,657 - INFO - No related goals found
2023-04-04 12:04:48,146 - INFO - Processed paragraph 35 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Let's deploy these new bikeCard project files to your org to see how it works. Using the same steps you performed in the last unit, deploy your new files, open the org, and create a page in Lightning App Builder with this app.
2023-04-04 12:04:48,147 - INFO - Related goals: 2, 22
2023-04-04 12:04:50,266 - INFO - Processed paragraph 36 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: In the VS Code bikeCard project, right-click on the default folder and select SFDX: Deploy Source to Org.
  From the Command Palette in VS Code, use SFDX: Open Default Org to open your org.
  Create a one region page using the selector component.
  Give it the label Your Bike Selection.
  Drag your selector component to the top of the page layout.
  Save and Activate for all users.
  Open it and see your component working in the UI.
2023-04-04 12:04:50,267 - INFO - Related goals: 2, 20
2023-04-04 12:04:51,304 - INFO - Processed paragraph 37 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: You've got a fully interactive page composed of several components working together. Next, we experiment with styling and getting live data from an org.
2023-04-04 12:04:51,305 - INFO - No related goals found
2023-04-04 12:04:52,314 - INFO - Processed paragraph 38 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Resources
2023-04-04 12:04:52,314 - INFO - No related goals found
2023-04-04 12:04:53,674 - INFO - Processed paragraph 39 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: Lightning Web Components Developer Guide: Shadow DOM
  Lightning Web Components Developer Guide: Communicate with Events
  Lightning Web Components Developer Guide: Create Getters and Setters
2023-04-04 12:04:53,674 - INFO - No related goals found
2023-04-04 12:04:58,199 - INFO - Processed paragraph 40 in 3_lightning-web-components-basics_handle-events-in-lightning-web-components_content.txt: 
2023-04-04 12:04:58,200 - INFO - Related goals: 8
2023-04-04 12:05:02,470 - INFO - Processed paragraph 0 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: 
2023-04-04 12:05:02,470 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 12:05:04,211 - INFO - Processed paragraph 1 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Learning Objectives
2023-04-04 12:05:04,211 - INFO - No related goals found
2023-04-04 12:05:06,243 - INFO - Processed paragraph 2 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: After completing this unit, you’ll be able to:
2023-04-04 12:05:06,243 - INFO - No related goals found
2023-04-04 12:05:07,235 - INFO - Processed paragraph 3 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Use Flow Trigger Explorer to access information about objects and automations.
  Use Flow Trigger Explorer to change the order in which record-triggered flows run.
  Use the Time-Based Workflow page to monitor pending actions in individual instances of flows.
2023-04-04 12:05:07,235 - INFO - No related goals found
2023-04-04 12:05:08,871 - INFO - Processed paragraph 4 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Manage your record-triggered flows with Flow Trigger Explorer. This tool is more visual and interactive than the standard Flows list view. With Flow Trigger Explorer, you can select an object to see all of the associated flows that run when a record is created, updated, or deleted, and change the order in which those flows run. This interface allows for easy navigation and ordering of all the flows that run under the same circumstances. You can also view individual flow details and manage versions.
2023-04-04 12:05:08,871 - INFO - No related goals found
2023-04-04 12:05:09,952 - INFO - Processed paragraph 5 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Flow Trigger Explorer also allows you to see and reorder record-triggered orchestrations. You can even mix the order of record-triggered flows and record-triggered orchestrations! However, this badge focuses on record-triggered flows, so we’ll just focus on those here.
2023-04-04 12:05:09,952 - INFO - No related goals found
2023-04-04 12:05:10,932 - INFO - Processed paragraph 6 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Open Flow Trigger Explorer
2023-04-04 12:05:10,932 - INFO - No related goals found
2023-04-04 12:05:11,925 - INFO - Processed paragraph 7 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: In this example, we explore the Closed Won Opportunities flow that we created.
2023-04-04 12:05:11,926 - INFO - No related goals found
2023-04-04 12:05:12,919 - INFO - Processed paragraph 8 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: If it’s not already open, open the Closed Won Opportunities flow.
2023-04-04 12:05:12,919 - INFO - No related goals found
2023-04-04 12:05:14,043 - INFO - Processed paragraph 9 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: At the bottom of the Start element, click Open Flow Trigger Explorer for Opportunity. If the flow were triggered on a different object, that object would be listed instead.
2023-04-04 12:05:14,043 - INFO - No related goals found
2023-04-04 12:05:15,036 - INFO - Processed paragraph 10 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: You can also access Flow Trigger Explorer from Object Manager or from the Flows list view. To access from Object Manager, click the object with the flows you want to manage, click Flow Triggers, then click Flow Trigger Explorer. To access from the Flows list view, click Flow Trigger Explorer, next to the New Flow button.
2023-04-04 12:05:15,036 - INFO - No related goals found
2023-04-04 12:05:16,001 - INFO - Processed paragraph 11 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Explore Flow Trigger Explorer
2023-04-04 12:05:16,001 - INFO - No related goals found
2023-04-04 12:05:17,406 - INFO - Processed paragraph 12 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Let’s take a quick tour. In Flow Trigger Explorer, click  and then click Flow Details and Versions. The Flow Details pane opens.
2023-04-04 12:05:17,406 - INFO - No related goals found
2023-04-04 12:05:18,438 - INFO - Processed paragraph 13 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Object/Trigger Manager (1)&nbsp;
To see flows for a different object, click the down arrow next to Opportunity and select another object. To see flows for a different type of record change, click the down arrow next to Updated and select another trigger: Created, Updated, or Deleted.
Categorized Flows (2)&nbsp;
Flow Trigger Explorer lists all record-triggered flows that execute for the selected object and trigger. Flows are grouped by when they run: before the record is saved, after the record is saved, or asynchronously. Within those groups, flows appear in the order in which they run.
2023-04-04 12:05:18,438 - INFO - No related goals found
2023-04-04 12:05:19,753 - INFO - Processed paragraph 14 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Within the Run Asynchronously group, we can’t guarantee that the flows will run exactly in the order listed. This is unavoidable, due to the nature of how running asynchronously works.
2023-04-04 12:05:19,753 - INFO - No related goals found
2023-04-04 12:05:22,167 - INFO - Processed paragraph 15 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Status and Details Pane (3)&nbsp;
The Flow Details section displays the flow’s:
2023-04-04 12:05:22,168 - INFO - No related goals found
2023-04-04 12:05:23,840 - INFO - Processed paragraph 16 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Open Flow button
  Name and description
  Version Number
  Status
  Last Modified By
  Process Type
  Trigger
2023-04-04 12:05:23,840 - INFO - No related goals found
2023-04-04 12:05:24,781 - INFO - Processed paragraph 17 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: The Versions section displays all versions of the flow. It also includes an Open button to open the flow in Flow Builder, and an Activate or Deactivate button to manage the flow’s active status.
2023-04-04 12:05:24,782 - INFO - No related goals found
2023-04-04 12:05:26,479 - INFO - Processed paragraph 18 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Reorder Your Flows
2023-04-04 12:05:26,479 - INFO - No related goals found
2023-04-04 12:05:28,190 - INFO - Processed paragraph 19 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: If you have multiple flows that are going to run from the same trigger, you may need one of those flows to run before the others. Perhaps you need one flow to edit a field before another flow uses it, or you want the related records that each flow creates to appear in a certain order. With Flow Trigger Explorer, you can change the order that flows run in without having to open each flow and change their settings.
To change the order that the flows run:
2023-04-04 12:05:28,191 - INFO - No related goals found
2023-04-04 12:05:29,272 - INFO - Processed paragraph 20 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Click the Edit Order button in the section you want to reorder.
  Click and hold &nbsp;next to the flow you want to reorder. Drag it to the place in the flow order that you want this flow to run.
  Repeat these steps for any other flows you want to reorder in this section. Flow Trigger Explorer highlights each flow you move, so you know what’s going to be changed.
  Click Update.
2023-04-04 12:05:29,272 - INFO - No related goals found
2023-04-04 12:05:30,277 - INFO - Processed paragraph 21 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Keyboard Shortcuts&nbsp;
You can also use these handy keyboard shortcuts to quickly reorder your flows.
2023-04-04 12:05:30,277 - INFO - No related goals found
2023-04-04 12:05:52,814 - INFO - Processed paragraph 22 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Action
2023-04-04 12:05:52,814 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:05:53,914 - INFO - Processed paragraph 23 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Keyboard shortcut
2023-04-04 12:05:53,914 - INFO - No related goals found
2023-04-04 12:05:55,703 - INFO - Processed paragraph 24 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Switch section focus
        
        
          F6
        
      
      
        
          Select flow
        
        
          Spacebar
        
      
      
        
          Drop flow
        
        
          Spacebar
        
      
      
        
          Move flow
        
        
          Arrow keys
        
      
      
        
          Cancel reordering
        
        
          Esc
2023-04-04 12:05:55,704 - INFO - No related goals found
2023-04-04 12:05:56,673 - INFO - Processed paragraph 25 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Monitor Your Record-Triggered Flows
2023-04-04 12:05:56,674 - INFO - No related goals found
2023-04-04 12:05:57,656 - INFO - Processed paragraph 26 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Now you know how to see all the flows that run when a specific trigger happens on a specific type of record. But how do you see individually scheduled instances of a path that runs in the future (such as a path that runs five days after an Opportunity closes)? For that, you use the Time-Based Workflow page.&nbsp;
2023-04-04 12:05:57,656 - INFO - No related goals found
2023-04-04 12:05:58,694 - INFO - Processed paragraph 27 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: The Time-Based Workflow shows you individual instances of the flow so you can monitor pending automation. If you activate the Closed Won Opportunities flow, and it’s less than five days after a high value opportunity has closed, that specific automation will be listed here.
2023-04-04 12:05:58,694 - INFO - No related goals found
2023-04-04 12:06:00,799 - INFO - Processed paragraph 28 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: From Setup, in the Quick Find box, enter Time and then select Time-Based Workflow.
  Click Search to view all pending actions for any active flows.
  To filter the list of pending actions, define filter criteria (using filter type, operator, and value) and then click Search. The filter types are:
      Workflow Rule, Flow, or Process Name: Enter the name of the flow.
      Object: The object that triggered the flow. Enter the object name in the singular form.
      Scheduled Date: The date the pending action is scheduled to run.
      Created Date: The date the record that triggered the flow was created.
      Automation Type: The type of automation that triggered the flow.
      Created By: The user who created the record that triggered the flow.
      User ID: The ID of the user who created the record that triggered the flow.
      Record Name: The name of the record that triggered the flow.
2023-04-04 12:06:00,800 - INFO - No related goals found
2023-04-04 12:06:01,841 - INFO - Processed paragraph 29 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: The filter value is not case-sensitive.
To cancel pending actions:
2023-04-04 12:06:01,841 - INFO - No related goals found
2023-04-04 12:06:02,908 - INFO - Processed paragraph 30 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Select the pending actions that you want to cancel.
  Click Delete.
2023-04-04 12:06:02,908 - INFO - No related goals found
2023-04-04 12:06:03,995 - INFO - Processed paragraph 31 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Congratulations! Now you know how to build, manage, and monitor record-triggered flows! Experiment with the Closed Won Opportunities flow by adding more criteria or actions, or create a flow for a different object and explore other options in another record-triggered flow.
2023-04-04 12:06:03,995 - INFO - No related goals found
2023-04-04 12:06:05,454 - INFO - Processed paragraph 32 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Resources
2023-04-04 12:06:05,454 - INFO - No related goals found
2023-04-04 12:06:06,431 - INFO - Processed paragraph 33 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Salesforce Help:&nbsp;Visualize All Your Record-Triggered Flows in One Place with Flow Trigger Explorer
  
Blog Post:&nbsp;Flow Trigger Explorer
2023-04-04 12:06:06,431 - INFO - No related goals found
2023-04-04 12:06:07,455 - INFO - Processed paragraph 34 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: Video:&nbsp;Use Flow Trigger Explorer to Easily View All of Your Record-Triggered Flows
2023-04-04 12:06:07,455 - INFO - No related goals found
2023-04-04 12:06:09,561 - INFO - Processed paragraph 35 in 3_record-triggered-flows_meet-flow-trigger-explorer_content.txt: 
2023-04-04 12:06:09,561 - INFO - Related goals: 2
2023-04-04 12:06:11,969 - INFO - Processed paragraph 0 in 4_apex_database_apex_database_sosl_content.txt: 
2023-04-04 12:06:11,970 - INFO - Related goals: 3
2023-04-04 12:06:13,735 - INFO - Processed paragraph 1 in 4_apex_database_apex_database_sosl_content.txt: Learning Objectives
  
  
    
After completing this unit, you'll be able to:
        Describe the differences between SOSL and SOQL.
        Search for fields across multiple objects using SOSL queries.
        Execute SOSL queries by using the Query Editor in the Developer Console.
2023-04-04 12:06:13,735 - INFO - Related goals: 8
2023-04-04 12:06:35,378 - INFO - Processed paragraph 2 in 4_apex_database_apex_database_sosl_content.txt: 
2023-04-04 12:06:35,378 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:06:37,126 - INFO - Processed paragraph 3 in 4_apex_database_apex_database_sosl_content.txt: Get Started with SOSL
  
  
    
      Salesforce Object Search Language (SOSL) is a Salesforce search language that is used to perform text searches in records. Use SOSL to search fields across multiple standard and custom object records in Salesforce. SOSL is similar to Apache Lucene.
      
      Adding SOSL queries to Apex is simple—you can embed SOSL queries directly in your Apex code. When SOSL is embedded in Apex, it is referred to as inline SOSL
2023-04-04 12:06:37,127 - INFO - Related goals: 8
2023-04-04 12:06:41,967 - INFO - Processed paragraph 4 in 4_apex_database_apex_database_sosl_content.txt: This is an example of a SOSL query that searches for accounts and contacts that have any fields with the word 'SFDC'.
    
List&lt;List&lt;SObject&gt;&gt; searchList = [FIND 'SFDC' IN ALL FIELDS 
                                      RETURNING Account(Name), Contact(FirstName,LastName)];Copy
    
      Differences and Similarities Between SOQL and SOSL
      Like SOQL, SOSL allows you to search your organization’s records for specific information. Unlike SOQL, which can only query one standard or custom object at a time, a single SOSL query can search all objects.
      Another difference is that SOSL matches fields based on a word match while SOQL performs an exact match by default (when not using wildcards). For example, searching for 'Digital' in SOSL returns records whose field values are 'Digital' or 'The Digital Company', but SOQL returns only records with field values of 'Digital'.
      SOQL and SOSL are two separate languages with different syntax. Each language has a distinct use case:
      
        Use SOQL to retrieve records for a single object.
        Use SOSL to search fields across multiple objects. SOSL queries can search most text fields on an object.
      
    
    
      Prerequisites
      Some queries in this unit expect the org to have accounts and contacts. If you haven’t created the sample data in the SOQL unit, create sample data in this unit. Otherwise, you can skip creating the sample data in this section.
      
        In the Developer Console, open the Execute Anonymous window from the Debug menu.
        Insert the below snippet in the window and click Execute.
      
      
// Add account and related contact
Account acct = new Account(
    Name='SFDC Computing',
    Phone='(415)555-1212',
    NumberOfEmployees=50,
    BillingCity='San Francisco');
insert acct;
// Once the account is inserted, the sObject will be 
// populated with an ID.
// Get this ID.
ID acctID = acct.ID;
// Add a contact to this account.
Contact con = new Contact(
    FirstName='Carol',
    LastName='Ruiz',
    Phone='(415)555-1212',
    Department='Wingo',
    AccountId=acctID);
insert con;
// Add account with no contact
Account acct2 = new Account(
    Name='The SFDC Query Man',
    Phone='(310)555-1213',
    NumberOfEmployees=50,
    BillingCity='Los Angeles',
    Description='Expert in wing technologies.');
insert acct2;Copy
      
    
    
      Use the Query Editor
      The Developer Console provides the Query Editor console, which enables you to run SOSL queries and view results. The Query Editor provides a quick way to inspect the database. It is a good way to test your SOSL queries before adding them to your Apex code. When you use the Query Editor, you need to supply only the SOSL statement without the Apex code that surrounds it.
      Let’s try running the following SOSL example:
      
        In the Developer Console, click the Query Editor&nbsp; tab.
        Copy and paste the following into the first box under Query Editor, and then click Execute.
      
      
FIND {Wingo} IN ALL FIELDS RETURNING Account(Name), Contact(FirstName,LastName,Department)Copy
      
      All account and contact records in your org that satisfy the criteria will display in the Query Results section as rows with fields. The results are grouped in tabs for each object (account or contact). The SOSL query returns records that have fields whose values match Wingo. Based on our sample data, only one contact has a field with the value Wingo, so this contact is returned..
      
        
          
            
              
              
                
                  Note
                  The search query in the Query Editor and the API must be enclosed within curly brackets ({Wingo}). In contrast, in Apex the search query is enclosed within single quotes ('Wingo').
                
              
            
          
        
      
    
    
      
        Basic SOSL Syntax
      
      SOSL allows you to specify the following search criteria:
          Text expression (single word or a phrase) to search for
          Scope of fields to search
          List of objects and fields to retrieve
          Conditions for selecting rows in the source objects
        
      
      This is the syntax of a basic SOSL query in Apex:&nbsp;
      
FIND 'SearchQuery' [IN SearchGroup] [RETURNING ObjectsAndFields]Copy
      
      Remember that in the Query Editor and API, the syntax is slightly different:
FIND {SearchQuery} [IN SearchGroup] [RETURNING ObjectsAndFields]Copy
      SearchQuery is the text to search for (a single word or a phrase). Search terms can be grouped with logical operators (AND, OR) and parentheses. Also, search terms can include wildcard characters (*, ?). The * wildcard matches zero or more characters at the middle or end of the search term. The ? wildcard matches only one character at the middle or end of the search term.
      Text searches are case-insensitive. For example, searching for Customer, customer, or CUSTOMER all return the same results.
      SearchGroup is optional. It is the scope of the fields to search. If not specified, the default search scope is all fields. SearchGroup can take one of the following values.
      
        ALL FIELDS
        NAME FIELDS
        EMAIL FIELDS
        PHONE FIELDS
        SIDEBAR FIELDS
      
      ObjectsAndFields is optional. It is the information to return in the search result—a list of one or more sObjects and, within each sObject, list of one or more fields, with optional values to filter against. If not specified, the search results contain the IDs of all objects found.
    
    
      Single Words and Phrases
      A SearchQuery contains two types of text:
      
        
Single Word— single word, such as test or hello. Words in the SearchQuery are delimited by spaces, punctuation, and changes from letters to digits (and vice-versa). Words are always case insensitive.
        
Phrase— collection of words and spaces surrounded by double quotes such as "john smith". Multiple words can be combined together with logic and grouping operators to form a more complex query.
      
    
    
      Search Examples
      To learn about how SOSL search works, let’s play with different search strings and see what the output is based on our sample data. This table lists various example search strings and the SOSL search results.
      
        
          
            
              Search in all fields for:
              Search Description
              Matched Records and Fields
            
          
          
            
              The Query
              This search returns all records whose fields contain both words: The and Query, in any location of the text. The order of words in the search term doesn’t matter.
              Account: The SFDC Query Man (Name field matched)
            
            
              Wingo OR Man
              This search uses the OR logical operator. It returns records with fields containing the word Wingo or records with fields containing the word Man.
              Contact: Carol Ruiz, Department: 'Wingo'Account: The SFDC Query Man (Name field matched)
              
            
            
              1212
              This search returns all records whose fields contain the word 1212. Phone fields that end with -1212 are matched because 1212 is considered a word when delimited by the dash.
              Account: The SFDC Query Man, Phone: '(415)555-1212'Contact: Carol Ruiz, Phone: '(415)555-1212'
              
            
            
              wing*
              This is a wildcard search. This search returns all records that have a field value starting with wing.
              Contact: Maria Ruiz, Department: 'Wingo'Account: The SFDC Query Man, Description: 'Expert in wing technologies.'
              
            
          
        
      
    
    
      
        SOSL Apex Example
      
      This example shows how to run a SOSL query in Apex. First, the variable soslFindClause&nbsp; is assigned the search query, which consists of two terms (Wingo and SFDC) combined by the OR logical operator. The SOSL query references this local variable by preceding it with a colon, also called binding. The resulting SOSL query searches for Wingo or SFDC in any field. This example returns all the sample accounts because they each have a field containing one of the words. The SOSL search results are returned in a list of lists. Each list contains an array of the returned records. In this case, the list has two elements. At index 0, the list contains the array of accounts. At index 1, the list contains the array of contacts.
      Execute this snippet in the Execute Anonymous window of the Developer Console. Next, inspect the debug log to verify that all records are returned.
      
String soslFindClause = 'Wingo OR SFDC';
List&lt;List&lt;sObject&gt;&gt; searchList = [FIND :soslFindClause IN ALL FIELDS
                    RETURNING Account(Name),Contact(FirstName,LastName,Department)];
Account[] searchAccounts = (Account[])searchList[0];
Contact[] searchContacts = (Contact[])searchList[1];
System.debug('Found the following accounts.');
for (Account a : searchAccounts) {
    System.debug(a.Name);
}
System.debug('Found the following contacts.');
for (Contact c : searchContacts) {
    System.debug(c.LastName + ', ' + c.FirstName);
}Copy
      
    
    
      
        Tell Me More...
      
      You can filter, reorder, and limit the returned results of a SOSL query. Because SOSL queries can return multiple sObjects, those filters are applied within each sObject inside the RETURNING clause.
      You can filter SOSL results by adding conditions in the WHERE clause for an object. For example, this results in only accounts whose industry is Apparel to be returned: RETURNING Account(Name, Industry WHERE Industry='Apparel').
      Likewise, ordering results for one sObject is supported by adding ORDER BY for an object. For example this causes the returned accounts to be ordered by the Name field: RETURNING Account(Name, Industry ORDER BY Name).
      The number of returned records can be limited to a subset of records. This example limits the returned accounts to 10 only: RETURNING Account(Name, Industry LIMIT 10).
2023-04-04 12:06:41,969 - INFO - Related goals: 8
2023-04-04 12:06:43,889 - INFO - Processed paragraph 5 in 4_apex_database_apex_database_sosl_content.txt: 
2023-04-04 12:06:43,889 - INFO - Related goals: 1
2023-04-04 12:06:44,986 - INFO - Processed paragraph 6 in 4_apex_database_apex_database_sosl_content.txt: Resources
  
  
    
      SOQL and SOSL Reference
2023-04-04 12:06:44,986 - INFO - No related goals found
2023-04-04 12:07:07,708 - INFO - Processed paragraph 7 in 4_apex_database_apex_database_sosl_content.txt: 
2023-04-04 12:07:07,709 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:07:30,287 - INFO - Processed paragraph 0 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:07:30,287 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:07:31,546 - INFO - Processed paragraph 1 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll know: 
      
        When to use scheduled Apex.
        How to monitor scheduled jobs.
        Scheduled Apex syntax.
        Scheduled method best practices.
2023-04-04 12:07:31,547 - INFO - Related goals: 7
2023-04-04 12:07:58,023 - INFO - Processed paragraph 2 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:07:58,023 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:07:59,043 - INFO - Processed paragraph 3 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Follow Along with Trail Together
  
  Want to follow along with an instructor as you work through this step? Take a look at this video, part of the Trail Together series on Trailhead Live.
2023-04-04 12:07:59,043 - INFO - No related goals found
2023-04-04 12:08:01,099 - INFO - Processed paragraph 4 in 4_asynchronous_apex_async_apex_scheduled_content.txt: (This clip starts at the 1:09:53 minute mark, in case you want to rewind and watch the beginning of the step again.)
  
    Scheduled Apex
  
  
    The Apex Scheduler lets you delay execution so that you can run Apex classes at a specified time. This is ideal for daily or weekly maintenance tasks using Batch Apex. To take advantage of the scheduler, write an Apex class that implements the Schedulable interface, and then schedule it for execution on a specific schedule.
2023-04-04 12:08:01,099 - INFO - Related goals: 1, 8, 18
2023-04-04 12:08:20,369 - INFO - Processed paragraph 5 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:08:20,369 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:08:22,381 - INFO - Processed paragraph 6 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Scheduled Apex Syntax
  
  
    To invoke Apex classes to run at specific times, first implement the Schedulable interface for the class. Then, schedule an instance of the class to run at a specific time using the System.schedule() method.
    
public class SomeClass implements Schedulable {
    public void execute(SchedulableContext ctx) {
        // awesome code here
    }
}Copy
    
    The class implements the Schedulable interface and must implement the only method that this interface contains, which is the execute() method.
    The parameter of this method is a SchedulableContext object. After a class has been scheduled, a CronTrigger object is created that represents the scheduled job. It provides a getTriggerId() method that returns the ID of a CronTrigger API object.
    
      
        Sample Code
      
      This class queries for open opportunities that should have closed by the current date, and creates a task on each one to remind the owner to update the opportunity.
      
public class RemindOpptyOwners implements Schedulable {
    public void execute(SchedulableContext ctx) {
        List&lt;Opportunity&gt; opptys = [SELECT Id, Name, OwnerId, CloseDate
            FROM Opportunity
            WHERE IsClosed = False AND
            CloseDate &lt; TODAY];
        // Create a task for each opportunity in the list
        TaskUtils.remindOwners(opptys);
    }
}Copy
      
      You can schedule your class to run either programmatically or from the Apex Scheduler UI.
2023-04-04 12:08:22,381 - INFO - Related goals: 1, 8, 18
2023-04-04 12:08:50,941 - INFO - Processed paragraph 7 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:08:50,941 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:08:55,841 - INFO - Processed paragraph 8 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Using the System.Schedule Method
  
  
    After you implement a class with the Schedulable interface, use the System.schedule() method to execute it. The System.schedule() method uses the user's timezone for the basis of all schedules, but runs in system mode—all classes are executed, whether or not the user has permission to execute the class.
    
      
        
          
            
            
              
                Use extreme care if you’re planning to schedule a class from a trigger. You must be able to guarantee that the trigger won’t add more scheduled job classes than the limit. In particular, consider API bulk updates, import wizards, mass record changes through the user interface, and all cases where more than one record can be updated at a time.
              
            
          
        
      
    
    The System.schedule() method takes three arguments: a name for the job, a CRON expression used to represent the time and date the job is scheduled to run, and an instance of a class that implements the Schedulable interface.
    
RemindOpptyOwners reminder = new RemindOpptyOwners();
// Seconds Minutes Hours Day_of_month Month Day_of_week optional_year
String sch = '20 30 8 10 2 ?';
String jobID = System.schedule('Remind Opp Owners', sch, reminder);Copy
    
    For more information on the CRON expression used for scheduling, see the “Using the System.Schedule Method” section in Apex Scheduler.
2023-04-04 12:08:55,841 - INFO - Related goals: 1, 8, 18
2023-04-04 12:09:18,622 - INFO - Processed paragraph 9 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:09:18,622 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:09:20,020 - INFO - Processed paragraph 10 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Scheduling a Job from the UI
  
  
    You can also schedule a class using the user interface. 
      
        From Setup, enter Apex in the Quick Find box, then select Apex Classes.
        Click Schedule Apex.
        For the job name, enter something like Daily Oppty Reminder.
2023-04-04 12:09:20,020 - INFO - No related goals found
2023-04-04 12:09:21,425 - INFO - Processed paragraph 11 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Click the lookup button next to Apex class and enter * for the search term to get a list of all classes that can be scheduled. In the search results, click the name of your scheduled class.
        Select Weekly or Monthly for the frequency and set the frequency desired.
        Select the start and end dates, and a preferred start time.
        Click Save.
2023-04-04 12:09:21,425 - INFO - No related goals found
2023-04-04 12:09:58,101 - INFO - Processed paragraph 12 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:09:58,102 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:09:59,955 - INFO - Processed paragraph 13 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Testing Scheduled Apex
  
  
    Just like with the other async methods we’ve covered so far, with Scheduled Apex you must also ensure that the scheduled job is finished before testing against the results. To do this, use startTest() and stopTest() again around the System.schedule() method, to ensure processing finishes before continuing your test.
    
@isTest
private class RemindOppyOwnersTest {
    // Dummy CRON expression: midnight on March 15.
    // Because this is a test, job executes
    // immediately after Test.stopTest().
    public static String CRON_EXP = '0 0 0 15 3 ? 2022';
    static testmethod void testScheduledJob() {
        // Create some out of date Opportunity records
        List&lt;Opportunity&gt; opptys = new List&lt;Opportunity&gt;();
        Date closeDate = Date.today().addDays(-7);
        for (Integer i=0; i&lt;10; i++) {
            Opportunity o = new Opportunity(
                Name = 'Opportunity ' + i,
                CloseDate = closeDate,
                StageName = 'Prospecting'
            );
            opptys.add(o);
        }
        insert opptys;
        // Get the IDs of the opportunities we just inserted
        Map&lt;Id, Opportunity&gt; opptyMap = new Map&lt;Id, Opportunity&gt;(opptys);
        List&lt;Id&gt; opptyIds = new List&lt;Id&gt;(opptyMap.keySet());
        Test.startTest();
        // Schedule the test job
        String jobId = System.schedule('ScheduledApexTest',
            CRON_EXP,
            new RemindOpptyOwners());
        // Verify the scheduled job has not run yet.
        List&lt;Task&gt; lt = [SELECT Id
            FROM Task
            WHERE WhatId IN :opptyIds];
        System.assertEquals(0, lt.size(), 'Tasks exist before job has run');
        // Stopping the test will run the job synchronously
        Test.stopTest();
        // Now that the scheduled job has executed,
        // check that our tasks were created
        lt = [SELECT Id
            FROM Task
            WHERE WhatId IN :opptyIds];
        System.assertEquals(opptyIds.size(),
            lt.size(),
            'Tasks were not created');
    }
}Copy
2023-04-04 12:09:59,955 - INFO - Related goals: 1, 9, 19
2023-04-04 12:10:28,103 - INFO - Processed paragraph 14 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:10:28,104 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:10:29,899 - INFO - Processed paragraph 15 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Things to Remember
  
  
    Scheduled Apex has a number of items you need to be aware of (see Apex Scheduler in the Resources section for a complete list when you have time), but in general: 
      
        You can only have 100 scheduled Apex jobs at one time and there are maximum number of scheduled Apex executions per a 24-hour period. See Execution Governors and Limits in the Resources section for details.
        Use extreme care if you’re planning to schedule a class from a trigger. You must be able to guarantee that the trigger won’t add more scheduled jobs than the limit.
        Synchronous Web service callouts are not supported from scheduled Apex. To be able to make callouts, make an asynchronous callout by placing the callout in a method annotated with @future(callout=true) and call this method from scheduled Apex. However, if your scheduled Apex executes a batch job, callouts are supported from the batch class.
2023-04-04 12:10:29,900 - INFO - No related goals found
2023-04-04 12:10:31,416 - INFO - Processed paragraph 16 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:10:31,416 - INFO - Related goals: 8
2023-04-04 12:10:32,443 - INFO - Processed paragraph 17 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Resources
2023-04-04 12:10:32,444 - INFO - No related goals found
2023-04-04 12:10:34,873 - INFO - Processed paragraph 18 in 4_asynchronous_apex_async_apex_scheduled_content.txt: Apex Developer Guide: Apex Scheduler
        Apex Developer Guide: Execution Governors and Limits
2023-04-04 12:10:34,874 - INFO - No related goals found
2023-04-04 12:10:39,975 - INFO - Processed paragraph 19 in 4_asynchronous_apex_async_apex_scheduled_content.txt: 
2023-04-04 12:10:39,975 - INFO - Related goals: 1, 2, 22
2023-04-04 12:10:42,092 - INFO - Processed paragraph 0 in 4_developer_console_developer_console_queries_content.txt: 
2023-04-04 12:10:42,092 - INFO - Related goals: 2
2023-04-04 12:10:46,676 - INFO - Processed paragraph 1 in 4_developer_console_developer_console_queries_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll be able to:
        Execute a SOQL query using the Query Editor or in Apex code.
        Execute a SOSL search using the Query Editor or in Apex code.
2023-04-04 12:10:46,677 - INFO - Related goals: 1, 8, 9, 18, 19
2023-04-04 12:10:58,098 - INFO - Processed paragraph 2 in 4_developer_console_developer_console_queries_content.txt: 
2023-04-04 12:10:58,098 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:11:01,912 - INFO - Processed paragraph 3 in 4_developer_console_developer_console_queries_content.txt: What Is a SOQL Query?
      
      SOQL stands for Salesforce Object Query Language. You can use SOQL to read information stored in your org’s database. SOQL is syntactically similar to SQL (Structured Query Language).
      You can write and execute a SOQL query in Apex code or in the Developer Console’s Query Editor.
    
    
      
        Execute a SOQL Query
      
      Before we start writing and executing queries, you need some data in your Salesforce org that we can search for. Let’s add the contact details of three Control Engineers sent by Mission Control to guide your spaceship away from asteroid 2014 QO441.
          Select Debug | Open Execute Anonymous Window.
          Copy the following code, paste it, and execute it. This code adds the contact details of three Control Engineers to the Contact object in your database.// Add first contact and related details
Contact contact1 = new Contact(
   Firstname='Quentin',
   Lastname='Foam',
   Phone='(415)555-1212',
   Department= 'Specialty Crisis Management',
   Title='Control Engineer - Specialty - Solar Arrays',
   Email='qfoam@trailhead.com');
insert contact1;
// Add second contact and related details
Contact contact2 = new Contact(
   Firstname='Vega',
   Lastname='North',
   Phone='(416)556-1312',
   Department= 'Specialty Crisis Management',
   Title='Control Engineer - Specialty - Propulsion',
   Email='vnorth@trailhead.com');
insert contact2;
// Add third contact and related details
Contact contact3 = new Contact(
   Firstname='Palma',
   Lastname='Sunrise',
   Phone='(554)623-1212',
   Department= 'Specialty Crisis Management',
   Title='Control Engineer - Specialty - Radiators',
   Email='psunrise@trailhead.com');
insert contact3;CopyNow we can use the Query Editor to write and execute a SOQL query to find these Control Engineers. SOQL queries search for data in specific objects. You can add an optional condition in the WHERE clause to narrow down your search.
          Enter the following query in the Query Editor tab.SELECT Name, Phone, Email, Title FROM Contact
                                 WHERE (Department = 'Specialty Crisis Management')Copy
          
          Click Execute.
        
      
      The results display the details of the contacts who work in the Specialty Crisis Management department.
      
      You can use another SOQL query to find contacts in other departments, or to see whether anyone else has created records for more Control Engineers. To rerun a query, click Refresh Grid in the Query Results panel.
      A SOQL query that you execute using Apex code is called an inline SOQL query. Let’s see how you can use the Developer Console to search for contacts working in the Specialty Crisis Management department using an inline SOQL query.
      This time, let’s also try ordering the results alphabetically by name.
          Select Debug | Open Execute Anonymous Window.
          Enter the following code.Contact[] theseContacts = [SELECT Name, Phone, Email, Description FROM Contact
                           WHERE (Department='Specialty Crisis Management')
                           ORDER BY Name];
// Log a count of how many contacts were found
System.debug(theseContacts.size() + ' contact(s) returned.');
// Log all values in the array of contacts
System.debug(theseContacts);Copy
          
          After the code has executed, open the log.
          To view only the USER_DEBUG messages, select Debug Only. The results show the number of accounts returned and the contact details in alphabetical order.
        
      
      To delve deeper into SOQL queries, check out the Apex Basics &amp; Database module.
2023-04-04 12:11:01,913 - INFO - Related goals: 8
2023-04-04 12:11:23,333 - INFO - Processed paragraph 4 in 4_developer_console_developer_console_queries_content.txt: 
2023-04-04 12:11:23,333 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:11:25,084 - INFO - Processed paragraph 5 in 4_developer_console_developer_console_queries_content.txt: What Is a SOSL Search?
      
      SOSL (Salesforce Object Search Language) is a language that performs text searches in records. Unlike SOQL, SOSL can query multiple types of objects at the same time. SOSL can also use a word match to match fields, while SOQL needs the exact phrase.
      When you run a SOSL search for contact records using the word “Crisis,” your search looks through all contact fields and returns any record containing that word. But if you try the same in a SOQL query, you need to specify the fields to search and a complete word or phrase to search for. You can also use LIKE or wildcards to narrow down SOQL or SOSL searches.
    
    
      
        Execute a SOSL Search
      
      
        
          In the Query Editor tab, enter the following SOSL query. Notice that only the partial name of the department Specialty Crisis Management is included in the query.FIND {Crisis} IN ALL FIELDS RETURNING Contact(FirstName, LastName, Phone, Email, Title)Copy
          
          Execute the query, and then observe the results in the Search Results pane.&nbsp;
2023-04-04 12:11:25,084 - INFO - Related goals: 8
2023-04-04 12:11:27,151 - INFO - Processed paragraph 6 in 4_developer_console_developer_console_queries_content.txt: As you did with the SOQL queries, you can execute SOSL searches within Apex code.
          Select Debug | Open Execute Anonymous Window.
          Execute the following code.List&lt;List&lt;sObject&gt;&gt; searchList = [FIND 'Crisis' IN ALL FIELDS 
                                  RETURNING Contact(FirstName, LastName,
                                  Phone, Email, Description)];
Contact[] searchContacts = (Contact[])searchList[0];
System.debug('Found the following contacts:');
for (Contact c : searchContacts) {
   System.debug(c.LastName + ', ' + c.FirstName);
}Copy
          
          Open the log, and select the Debug Only option.
        
      
      The Execution Log lists the names of the Control Engineers.
      To learn more about what makes SOSL searches tick, check out the Apex Basics &amp; Database module.
    
    
      While you were playing with SOQL and SOSL, the Control Engineers whose records you were looking up steered your spaceship out of the asteroid’s path. It turns out that commanding a spaceship isn’t so hard after all: You just need to have a good console, and to learn to delegate!
      Now that you have avoided a collision with asteroid 2014 QO441, you decide to land at the Neptune Space Station to take a well-deserved break. With the knowledge of the various functions and features of the Developer Console, you can steer your org through many missions with success.
2023-04-04 12:11:27,151 - INFO - No related goals found
2023-04-04 12:11:34,653 - INFO - Processed paragraph 7 in 4_developer_console_developer_console_queries_content.txt: 
2023-04-04 12:11:34,653 - INFO - Related goals: 3
2023-04-04 12:11:35,650 - INFO - Processed paragraph 8 in 4_developer_console_developer_console_queries_content.txt: Resources
  
  
    
      
        Apex Basics &amp; Database Trailhead module
2023-04-04 12:11:35,651 - INFO - No related goals found
2023-04-04 12:11:59,684 - INFO - Processed paragraph 9 in 4_developer_console_developer_console_queries_content.txt: 
2023-04-04 12:11:59,684 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:12:01,949 - INFO - Processed paragraph 0 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: 
2023-04-04 12:12:01,949 - INFO - Related goals: 2
2023-04-04 12:12:03,697 - INFO - Processed paragraph 1 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Learning Objectives
2023-04-04 12:12:03,697 - INFO - No related goals found
2023-04-04 12:12:05,600 - INFO - Processed paragraph 2 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: After completing this unit, you'll be able to:
2023-04-04 12:12:05,600 - INFO - No related goals found
2023-04-04 12:12:06,625 - INFO - Processed paragraph 3 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Use CSS and Lightning Design System with a component.
  Get data from a Salesforce org.
  Deploy your app to an org and test it.
2023-04-04 12:12:06,625 - INFO - No related goals found
2023-04-04 12:12:07,623 - INFO - Processed paragraph 4 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Adapt Your Component
2023-04-04 12:12:07,624 - INFO - No related goals found
2023-04-04 12:12:08,730 - INFO - Processed paragraph 5 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: We've almost wrapped up our introduction to Lightning web components, but let's get a taste of how we can control a component's appearance and pull in live data. We can adapt the look and feel to the Lightning environment, and use live data in the org. In this unit, we liven up the appearance of some of the text and draw in a name dynamically from a record in your org.
Use the Bike Selector App files from the previous unit to complete this one.
2023-04-04 12:12:08,730 - INFO - No related goals found
2023-04-04 12:12:10,169 - INFO - Processed paragraph 6 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: CSS and Component Styling
2023-04-04 12:12:10,170 - INFO - No related goals found
2023-04-04 12:12:15,264 - INFO - Processed paragraph 7 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: The implementation of CSS for Lightning Web Components adheres to the W3C standard. You can create a style sheet in the CSS file, and it's automatically applied to the corresponding HTML file.
Lightning Web Components encapsulates components, keeping them separate from the global DOM. We do this through a mechanism called Shadow DOM. Shadow DOM is a common implementation that allows a component's elements to live in a “sub tree” of the DOM (learn more about Shadow DOM in the link provided in the Resources section). The component can keep its appearance and behavior within other apps or as a child of another component.
For example, let's set the price of a bike to display as bold, green text. Add the following .price entry to the detail.css file.
2023-04-04 12:12:15,271 - INFO - Related goals: 1, 5, 15
2023-04-04 12:12:16,996 - INFO - Processed paragraph 8 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: body{
  margin: 0;
}
.price {
  color: green;
  font-weight: bold;
}Copy
2023-04-04 12:12:16,996 - INFO - No related goals found
2023-04-04 12:12:18,366 - INFO - Processed paragraph 9 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Save and deploy your files.
2023-04-04 12:12:18,366 - INFO - No related goals found
2023-04-04 12:12:19,437 - INFO - Processed paragraph 10 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: You can right-click the detail folder to deploy only the new file and not wait for the entire project to deploy.
2023-04-04 12:12:19,437 - INFO - No related goals found
2023-04-04 12:12:20,491 - INFO - Processed paragraph 11 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: In your org, you might need to refresh the Bike Selector App page to see the changes in case it is cached. Then, when you select a bike, the price is green and bold.
2023-04-04 12:12:20,491 - INFO - No related goals found
2023-04-04 12:12:21,556 - INFO - Processed paragraph 12 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Applying Lightning Design System Styles
2023-04-04 12:12:21,556 - INFO - No related goals found
2023-04-04 12:12:26,613 - INFO - Processed paragraph 13 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Salesforce Lightning Design System (SLDS) is a CSS framework that provides a look and feel that's consistent with Lightning Experience. Lightning web components that live in Lightning Experience or in the Salesforce mobile application can use SLDS without any import statements or static resources.
For example, you can use the SLDS heading styles to give the detail component text that looks more like the standard Lightning text. Update the detail.html file to use the slds-text-heading_small and slds-text-heading_medium font settings as follows.&lt;template&gt;
    &lt;template if:true={product}&gt;
    &lt;div class="container"&gt;
        &lt;div class="slds-text-heading_small"&gt;{product.fields.Name.value}&lt;/div&gt;
        &lt;div class="price"&gt;{product.fields.MSRP__c.displayValue}&lt;/div&gt;
        &lt;div class="description"&gt;{product.fields.Description__c.value}&lt;/div&gt;
        &lt;img class="product-img" src={product.fields.Picture_URL__c.value}&gt;&lt;/img&gt;
        &lt;p&gt;
            &lt;lightning-badge label={product.fields.Material__c.value}&gt;&lt;/lightning-badge&gt;
            &lt;lightning-badge label={product.fields.Level__c.value}&gt;&lt;/lightning-badge&gt;
        &lt;/p&gt;
        &lt;p&gt;
            &lt;lightning-badge label={product.fields.Category__c.value}&gt;&lt;/lightning-badge&gt;
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;/template&gt;
    &lt;template if:false={product}&gt;
    &lt;div class="slds-text-heading_medium"&gt;Select a bike&lt;/div&gt;
    &lt;/template&gt;
&lt;/template&gt;Copy
Save and deploy your files.
Now try the component in your org and see the difference (you'll need to refresh the page).
2023-04-04 12:12:26,614 - INFO - No related goals found
2023-04-04 12:12:27,663 - INFO - Processed paragraph 14 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Looks great! Now we have the look and feel ready to go. (We'll leave further markup changes and SLDS styling as an exercise for you after you finish this module. See Mobile-Friendly Markup for some ideas, and use this app for experiments!) 
So far, we've been using static data pulled from the data component. Let's add one more shiny thing to our page... dynamic data.
2023-04-04 12:12:27,664 - INFO - No related goals found
2023-04-04 12:12:28,761 - INFO - Processed paragraph 15 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Get Salesforce Data
2023-04-04 12:12:28,761 - INFO - No related goals found
2023-04-04 12:12:32,472 - INFO - Processed paragraph 16 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: This is a Salesforce app after all, and what you really want is to be able to pull dynamic data from a Salesforce org. Lightning web components use a reactive wire service, which is built on Lightning Data Service. We walk through an example of pulling a name into our app, dynamically.
2023-04-04 12:12:32,472 - INFO - Related goals: 1, 5, 15
2023-04-04 12:12:33,952 - INFO - Processed paragraph 17 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: The Wire Service Brings Data to Your App
2023-04-04 12:12:33,952 - INFO - No related goals found
2023-04-04 12:12:35,008 - INFO - Processed paragraph 18 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: The wire service is part of our platform and delivers a stream of data. The @wire decorator, which we mentioned briefly before, implements the wire service for your app. To use the wire service, do the following.
2023-04-04 12:12:35,008 - INFO - No related goals found
2023-04-04 12:12:36,186 - INFO - Processed paragraph 19 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Import a wire adapter in the JavaScript file.
  Decorate a property or function with the @wire decorator.
2023-04-04 12:12:36,186 - INFO - No related goals found
2023-04-04 12:12:37,260 - INFO - Processed paragraph 20 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Here's the syntax.
import { adapterId } from 'adapter-module';
@wire(adapterId, adapterConfig)
propertyOrFunction;Copy
2023-04-04 12:12:37,260 - INFO - No related goals found
2023-04-04 12:12:39,427 - INFO - Processed paragraph 21 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: adapterId (Identifier)—The identifier of the wire adapter.
  
adapter-module (String)—The identifier of the module that contains the wire adapter function.
  
adapterConfig (Object)—A configuration object specific to the wire adapter.
  
propertyOrFunction—A private property or function that receives the stream of data from the wire service. If a property is decorated with @wire, the results are returned to the property's data property or error property. If a function is decorated with @wire, the results are returned in an object with a data property and an error property.
2023-04-04 12:12:39,428 - INFO - Related goals: 1, 5, 15
2023-04-04 12:12:40,518 - INFO - Processed paragraph 22 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: And here's how to add it to the selector.js file in the project we've been working on to pull the current user's name from your org.import { LightningElement, wire } from 'lwc';
import { getRecord, getFieldValue } from 'lightning/uiRecordApi';
import Id from '@salesforce/user/Id';
import NAME_FIELD from '@salesforce/schema/User.Name';
const fields = [NAME_FIELD];
export default class Selector extends LightningElement {
    selectedProductId;
    handleProductSelected(evt) {
        this.selectedProductId = evt.detail;
    }
    userId = Id;
    @wire(getRecord, { recordId: '$userId', fields })
    user;
    get name() {
        return getFieldValue(this.user.data, NAME_FIELD);
    }
}Copy
2023-04-04 12:12:40,519 - INFO - No related goals found
2023-04-04 12:12:43,531 - INFO - Processed paragraph 23 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Line 1 imports the wire service from lwc.
  Line 2 imports the adapterId and adapter-modules for getRecord and getFieldValue from lightning/uiRecordApi.
  Line 3 imports the current User Id using the @salesforce module.
  Line 4 imports the @salesforce schema for User.Name.
  Line 12 uses the @wire decorator to use the wire service to call getRecord passing in the userId and getting the fields.
  Line 13 sets user as the receiver for the @wire call.
2023-04-04 12:12:43,532 - INFO - Related goals: 1, 5, 15
2023-04-04 12:12:45,238 - INFO - Processed paragraph 24 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: You can try this out by also editing the selector.html file to include the name. For example:&lt;template&gt;
    &lt;div class="wrapper"&gt;
    &lt;header class="header"&gt;Available Bikes for {name}&lt;/header&gt;
    &lt;section class="content"&gt;
        &lt;div class="columns"&gt;
        &lt;main class="main" &gt;
            &lt;c-list onproductselected={handleProductSelected}&gt;&lt;/c-list&gt;
        &lt;/main&gt;
        &lt;aside class="sidebar-second"&gt;
            &lt;c-detail product-id={selectedProductId}&gt;&lt;/c-detail&gt;
        &lt;/aside&gt;
        &lt;/div&gt;
    &lt;/section&gt;
    &lt;/div&gt;
&lt;/template&gt;Copy
When you save and deploy the selector component files to your org (make sure that your deployment includes the selector files), you should see the following with your name instead of Mary Jones. You might need to refresh the page.
2023-04-04 12:12:45,238 - INFO - No related goals found
2023-04-04 12:12:46,254 - INFO - Processed paragraph 25 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Mobile-Friendly Markup
2023-04-04 12:12:46,254 - INFO - No related goals found
2023-04-04 12:12:47,323 - INFO - Processed paragraph 26 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: The markup for the Lightning components that make up the Bike Selector app is clean and streamlined, designed to keep you focused on learning the basics of Lightning web components. It is not, however, mobile friendly. Give it a look in the Salesforce Mobile app, or check it out in a mobile preview. Everything works, but it's not a great mobile experience.
2023-04-04 12:12:47,323 - INFO - No related goals found
2023-04-04 12:12:48,395 - INFO - Processed paragraph 27 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: One of the benefits of using SLDS is that, with only a little effort, you get designs that look and work great on both desktop and mobile. We'd love to go into more detail, but this module already covers a lot of ground. See Resources at the end of this unit to learn more about additional tools and techniques for creating Lightning components that will make your mobile users happy.
While we're setting mobile aside for now, we strongly recommend that, when you start developing “real” Lightning components, you do the opposite. Consider mobile details and designs, right from the start. With SLDS and our mobile preview tools, it's easy to build for both mobile and desktop, together from the word go.
If you don't mind us “going meta,” this module is an example of the danger of not considering mobile early. When we received feedback that the Bike Selection app didn't look good on mobile devices, we jumped at the chance to make some changes, because we thought it would be just a little bit of work. But even though the app's markup is clean and semantically well thought out, we've decided that retrofitting mobile onto it isn't the right thing to do. We want to rework not just the markup, but also the explanations of it, and the hands-on challenges. And, indeed, the very structure and flow of this module! It's more work now, because we didn't do a little work up front. 
And, sometimes that's OK! Every technology system implementation involves trade-offs. You need to make the right trade-offs for your teams and projects. Keep this trade-off in mind for your projects. Forewarned is forearmed.
2023-04-04 12:12:48,395 - INFO - No related goals found
2023-04-04 12:12:50,164 - INFO - Processed paragraph 28 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Conclusion
2023-04-04 12:12:50,165 - INFO - No related goals found
2023-04-04 12:12:51,263 - INFO - Processed paragraph 29 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: This is only the beginning, and you can do a lot with the Lightning Web Components model. The model includes support for testing, security, Apex integration and more. Keep exploring, try new things, keep building. As the W3C web components standard evolves, so will our model.
2023-04-04 12:12:51,263 - INFO - No related goals found
2023-04-04 12:12:54,347 - INFO - Processed paragraph 30 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Resources
2023-04-04 12:12:54,347 - INFO - No related goals found
2023-04-04 12:12:56,163 - INFO - Processed paragraph 31 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: Lightning Web Components Developer Guide: Introducing Lightning Web Components
  Developers: Code Samples and SDKsTrailhead Sample Gallery
  Trailhead: JavaScript Skills for Salesforce Developers
  Lightning Web Components Developer Guide: Create Mobile-Ready Components
  Lightning Web Components Developer Guide: Style Components with Lightning Design System
  Lightning Web Components Developer Guide: Preview Lightning Web Components on Mobile
  Lightning Web Components Developer Guide: Shadow DOM
  Lightning Web Components Developer Guide: Use the Wire Service to Get Data
  Lightning Web Components Developer Guide: @salesforce Modules
2023-04-04 12:12:56,163 - INFO - No related goals found
2023-04-04 12:13:38,510 - INFO - Processed paragraph 32 in 4_lightning-web-components-basics_add-styles-and-data-to-a-lightning-web-component_content.txt: 
2023-04-04 12:13:38,510 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:13:44,610 - INFO - Processed paragraph 0 in 5_asynchronous_apex_async_apex_monitoring_content.txt: 
2023-04-04 12:13:44,610 - INFO - Related goals: 3
2023-04-04 12:13:45,974 - INFO - Processed paragraph 1 in 5_asynchronous_apex_async_apex_monitoring_content.txt: Learning Objectives
  
  
    After completing this unit, you’ll know: 
      
        How to monitor the different types of jobs.
        How to use the flex queue.
2023-04-04 12:13:45,975 - INFO - No related goals found
2023-04-04 12:14:05,211 - INFO - Processed paragraph 2 in 5_asynchronous_apex_async_apex_monitoring_content.txt: 
2023-04-04 12:14:05,212 - INFO - Related goals: 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22
2023-04-04 12:14:06,619 - INFO - Processed paragraph 3 in 5_asynchronous_apex_async_apex_monitoring_content.txt: Follow Along with Trail Together
  
  Want to follow along with an instructor as you work through this step? Take a look at this video, part of the Trail Together series on Trailhead Live.
2023-04-04 12:14:06,619 - INFO - No related goals found
2023-04-04 12:14:10,644 - INFO - Processed paragraph 4 in 5_asynchronous_apex_async_apex_monitoring_content.txt: (This clip starts at the 1:25:18 minute mark, in case you want to rewind and watch the beginning of the step again.)
  
    Monitoring Asynchronous Jobs
  
  
    The great thing about async jobs is that they work silently in the background. The tough thing about async jobs is that they work silently in the background. Luckily there are a few ways to monitor what is going on with your jobs under the covers.
    You can monitor the status of all jobs in the Salesforce user interface. From Setup, enter Jobs in the Quick Find box, then select Apex Jobs.
    The Apex Jobs page shows all asynchronous Apex jobs with information about each job’s execution. The following screenshot shows one future method job and two completed batch jobs for the same Batch Apex class.
    
    If you have many batch jobs, use the Batch Jobs page to view only batch jobs. To open the Apex Batch Jobs page, click the link at the top of the Apex Jobs page. Use the slider in the Apex Batch Jobs page to select a specific date range and narrow down the list of batch jobs displayed. You can view past jobs that haven’t been deleted yet. The Batch Jobs page groups jobs by the batch class.
    
    Click More Info next to a class ID you’re interested in to find out details about the jobs executed for that class. This image shows the popup that displays after clicking More Info. This batch class has two jobs that executed successfully.
    
    You can also monitor the status of Apex jobs in the Apex Flex Queue, and reorder them to control which jobs are processed first. From Setup, enter Jobs in the Quick Find box, then select Apex Flex Queue.
    
      
        Monitoring Future Jobs
      
      Future jobs show up on the Apex Jobs page like any other jobs. However, future jobs are not part of the flex queue currently.
      You can query AsyncApexJob to find your future job, but there’s a caveat. Since kicking off a future job does not return an ID, you have to filter on some other field such as MethodName, or JobType, to find your job. There are a few sample SOQL queries in this Stack Exchange post&nbsp; that might help.
    
    
      
        Monitoring Queued Jobs with SOQL
      
      To query information about your submitted job, perform a SOQL query on AsyncApexJob by filtering on the job ID that the System.enqueueJob() method returns.
      
AsyncApexJob jobInfo = [SELECT Status, NumberOfErrors
    FROM AsyncApexJob WHERE Id = :jobID];Copy
      
    
    
      
        Monitoring Queue Jobs with the Flex Queue
      
      The Apex Flex queue enables you to submit up to 100 batch jobs for execution. Any jobs that are submitted for execution are in holding status and are placed in the Apex Flex queue. Up to 100 batch jobs can be in the holding status.
      Jobs are processed first-in first-out—in the order in which they’re submitted. You can look at the current queue order and shuffle the queue, so that you could move an important job to the front, or less important ones to the back.
      When system resources become available, the system picks up the next job from the top of the Apex Flex queue and moves it to the batch job queue. The system can process up to five queued or active jobs simultaneously for each organization. The status of these moved jobs changes from Holding to Queued. Queued jobs get executed when the system is ready to process new jobs. Like other jobs, you can monitor queued jobs in the Apex Jobs page.
    
    
      
        Monitoring Scheduled Jobs
      
      After an Apex job has been scheduled, you can obtain more information about it by running a SOQL query on CronTrigger. The following sample queries the number of times the job has run, and the date and time when the job is scheduled to run again. It uses a jobID variable which is returned from the System.schedule() method.
      
CronTrigger ct = [SELECT TimesTriggered, NextFireTime FROM CronTrigger WHERE Id = :jobID];Copy
      
      If you’re performing this query inside the execute method of your schedulable class, you can obtain the ID of the current job by calling getTriggerId() on the SchedulableContext argument variable.
      
public class DoAwesomeStuff implements Schedulable {
    public void execute(SchedulableContext sc) {
        // some awesome code
        CronTrigger ct = [SELECT TimesTriggered, NextFireTime FROM CronTrigger WHERE Id = :sc.getTriggerId()];
    }
}Copy
      
      You can also get the job’s name and the job’s type from the CronJobDetail record associated with the CronTrigger record. To do so, use the CronJobDetail relationship when performing a query on CronTrigger. This example retrieves the most recent CronTrigger record with the job name and type from CronJobDetail.
      
CronTrigger job = [SELECT Id, CronJobDetail.Id, CronJobDetail.Name, CronJobDetail.JobType FROM CronTrigger ORDER BY CreatedDate DESC LIMIT 1];Copy
      
      Alternatively, you can query CronJobDetail directly to get the job’s name and type. The following example gets the job’s name and type for the CronTrigger record queried in the previous example. The corresponding CronJobDetail record ID is obtained by the CronJobDetail.Id expression on the CronTrigger record.
      
CronJobDetail ctd = [SELECT Id, Name, JobType FROM CronJobDetail WHERE Id = :job.CronJobDetail.Id];Copy
      
      And lastly, to obtain the total count of all Apex scheduled jobs, excluding all other scheduled job types, perform the following query. Note the value '7' is specified for the job type, which corresponds to the scheduled Apex job type. See CronJobDetail in the Resources section for a list of all types.
      
SELECT COUNT() FROM CronTrigger WHERE CronJobDetail.JobType = '7’Copy
2023-04-04 12:14:10,646 - INFO - Related goals: 1, 2, 21
2023-04-04 12:14:12,293 - INFO - Processed paragraph 5 in 5_asynchronous_apex_async_apex_monitoring_content.txt: 
2023-04-04 12:14:12,293 - INFO - Related goals: 1, 8, 18
2023-04-04 12:14:13,730 - INFO - Processed paragraph 6 in 5_asynchronous_apex_async_apex_monitoring_content.txt: Resources
2023-04-04 12:14:13,730 - INFO - No related goals found
2023-04-04 12:14:15,125 - INFO - Processed paragraph 7 in 5_asynchronous_apex_async_apex_monitoring_content.txt: Object Reference: CronJobDetail
2023-04-04 12:14:15,125 - INFO - No related goals found
2023-04-04 12:14:31,289 - INFO - Processed paragraph 8 in 5_asynchronous_apex_async_apex_monitoring_content.txt: 
2023-04-04 12:14:31,290 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22
2023-04-04 12:14:32,288 - INFO - Processed paragraph 0 in d1.txt: Map .NET Concepts to the Lightning Platform
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:14:32,288 - INFO - No related goals found
2023-04-04 12:14:33,223 - INFO - Processed paragraph 1 in d1.txt: Understand which key features make up the Lightning Platform and the Apex programming language
Identify similarities and differences between .NET and the Lightning Platform
Use Developer Console to create your first Apex class
Use Anonymous Apex to invoke a method from an Apex class
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-04 12:14:33,223 - INFO - No related goals found
2023-04-04 12:14:38,597 - INFO - Processed paragraph 2 in d1.txt: 
2023-04-04 12:14:38,597 - INFO - No related goals found
2023-04-04 12:14:39,667 - INFO - Processed paragraph 3 in d1.txt: Meet the Lightning Platform
Seriously, after you get to know more about the Lightning Platform, you’ll appreciate it as much as we do. In this module, we’ll look at how you can relate the .NET concepts that you’re already familiar with to the Lightning Platform.
2023-04-04 12:14:39,667 - INFO - No related goals found
2023-04-04 12:14:41,043 - INFO - Processed paragraph 4 in d1.txt: Platform Basics
First, let’s briefly go over what exactly comprises the Lightning Platform. One of the things that separates the platform from other software-as-a-service (SaaS) offerings is that it relies on a metadata-driven architecture. Everything, including the code, configuration, and apps, is specified as metadata.
2023-04-04 12:14:41,044 - INFO - No related goals found
2023-04-04 12:14:42,474 - INFO - Processed paragraph 5 in d1.txt: As .NET developers, you’re probably already familiar with the cloud applications that run on Microsoft Azure. Well, the Lightning Platform works differently. The Lightning Platform is tightly integrated with the database. You also get all sorts of things, like user interface, security, and reporting, built right in with the platform. This integration is what lets you build apps super fast.
2023-04-04 12:14:42,474 - INFO - No related goals found
2023-04-04 12:14:43,530 - INFO - Processed paragraph 6 in d1.txt: But!—and here’s the part that might make you feel a little weird at first—you, as the developer, have to give up some control to get that developer productivity. On the Lightning Platform, you don’t have to worry about setting up nodes or management tasks. You don’t have to worry about upgrading, tuning, or scaling anything. To be honest, you probably won’t miss all that added complexity and responsibility, because instead you can just focus on quickly building great apps.
2023-04-04 12:14:43,530 - INFO - No related goals found
2023-04-04 12:14:44,525 - INFO - Processed paragraph 7 in d1.txt: Now we just skimmed the surface in terms of what the platform offers. If you want to dive a little deeper into the architecture, check out the Platform Basics module.
2023-04-04 12:14:44,525 - INFO - No related goals found
2023-04-04 12:14:45,929 - INFO - Processed paragraph 8 in d1.txt: Apex Basics
Because the Lightning Platform is so tightly integrated and relies on a metadata architecture, you can accomplish an awful lot using declarative development, or what is known as “point-and-click” app building. If you are new to the Lightning Platform, we strongly suggest you check out the article about point-and-click development listed in Resources.
2023-04-04 12:14:45,929 - INFO - No related goals found
2023-04-04 12:14:46,962 - INFO - Processed paragraph 9 in d1.txt: As a .NET developer, we know you like to code, but what you must realize is that on the Lightning Platform, code is not always needed. But it’s important to understand when code is needed and when it isn’t. You can learn more about this distinction by browsing this article on when to click and when to write code.
2023-04-04 12:14:46,962 - INFO - No related goals found
2023-04-04 12:14:48,040 - INFO - Processed paragraph 10 in d1.txt: But enough about all that. We know you want to learn how you can program on the platform, which is where Apex comes in.
2023-04-04 12:14:48,040 - INFO - No related goals found
2023-04-04 12:14:49,083 - INFO - Processed paragraph 11 in d1.txt: What Is Similar?
The Apex programming language is similar to one you probably already know and love—C#. Apex is saved, compiled, and executed directly on the Lightning Platform. Like C#, it’s object oriented. In this section, we’ll go over this and what else makes it similar to .NET languages.
2023-04-04 12:14:49,084 - INFO - No related goals found
2023-04-04 12:14:51,131 - INFO - Processed paragraph 12 in d1.txt: Object-oriented Design
We figure you already grasp the concept of object-oriented design, so we’re not going to waste your time describing cookie cutters. Just know that Apex supports many of the object-oriented principles that you’re probably used to, such as encapsulation, abstraction, inheritance, and even polymorphism. In fact, the Apex language includes many language constructs you’re already familiar with, including classes, interfaces, properties, and collections.
2023-04-04 12:14:51,131 - INFO - Related goals: 1
2023-04-04 12:14:52,093 - INFO - Processed paragraph 13 in d1.txt: For example, here is what an Apex class named HelloWorld would look like.
2023-04-04 12:14:52,093 - INFO - No related goals found
2023-04-04 12:14:53,886 - INFO - Processed paragraph 14 in d1.txt: public with sharing class HelloWorld {
    public void printMessage() {
        String msg = 'Hello World';
        System.debug(msg);   
    }
}
This simple HelloWorld class includes one method named printMessage that is used to simply output the message “Hello World” to the system debug log. Of course, this example is pretty simple, but we wanted you to see how very similar Apex is to C#.
2023-04-04 12:14:53,886 - INFO - No related goals found
2023-04-04 12:14:56,664 - INFO - Processed paragraph 15 in d1.txt: The basic syntax for defining classes is:
2023-04-04 12:14:56,664 - INFO - No related goals found
2023-04-04 12:14:59,352 - INFO - Processed paragraph 16 in d1.txt: private | public | global
[virtual | abstract | with sharing | without sharing]
class ClassName [implements InterfaceNameList] [extends ClassName]
{
    // The body of the class
}
When you have time, check out Understanding Classes to learn more about how classes, objects, and interfaces work.
2023-04-04 12:14:59,352 - INFO - No related goals found
2023-04-04 12:15:04,340 - INFO - Processed paragraph 17 in d1.txt: Data Types
Apex supports the kind of data types you would expect. There are primitive types, such as Integer, Double, Long, Date, Datetime, String, and Boolean. There is also an ID data type that is used for any valid 18-character Lightning Platform record identifier assigned by the system.
2023-04-04 12:15:04,341 - INFO - Related goals: 1, 3, 8, 18
2023-04-04 12:15:05,374 - INFO - Processed paragraph 18 in d1.txt: Value and reference types work the same, but in Apex, all variables are initialized to null by default. One thing to be aware of is that .NET strings are actually references even though they behave like value types, because they’re immutable. But in Apex, strings are always treated as a primitive value type.
2023-04-04 12:15:05,374 - INFO - No related goals found
2023-04-04 12:15:08,383 - INFO - Processed paragraph 19 in d1.txt: Besides primitives, supported data types include sObjects, either as a generic sObject or a specific one, such as an Account or Contact. Remember, an sObject is just a Salesforce object. You can think of it as a table in a database. The sObject can be either a standard one that comes built in with Salesforce or a custom one that you define yourself.
2023-04-04 12:15:08,383 - INFO - Related goals: 3
2023-04-04 12:15:09,863 - INFO - Processed paragraph 20 in d1.txt: Additionally, a data type can be a typed list of values, also known as an enum. But watch out, because these aren’t the same enums you’re used to working with in .NET. In Apex, you can use enums with numbers, but you can’t define what these number values are. Also, the ordinal assignment starts at zero. For example, if you had an enum like the following.
2023-04-04 12:15:09,864 - INFO - No related goals found
2023-04-04 12:15:10,858 - INFO - Processed paragraph 21 in d1.txt: public enum myEnums {
            Enum1,
            Enum2,
            Enum3
 }
If you tried to access the ordinal value of the third enum, the value of the enumOrd variable would be 2.
2023-04-04 12:15:10,858 - INFO - No related goals found
2023-04-04 12:15:11,901 - INFO - Processed paragraph 22 in d1.txt: Integer enumOrd = myEnums.Enum3.ordinal();
Working with Collections
.NET supports a large collection library with numerous types and extension methods. And here’s some good news. Apex has only the following three collections. Talk about simple, right?
2023-04-04 12:15:11,901 - INFO - No related goals found
2023-04-04 12:15:12,979 - INFO - Processed paragraph 23 in d1.txt: List
A list is an ordered collection of elements that works much the same as a traditional array. In fact, arrays in Apex are synonymous with lists, and you can use them interchangeably. For example, the following is one way to declare a variable as a list of strings.
2023-04-04 12:15:12,979 - INFO - No related goals found
2023-04-04 12:15:14,035 - INFO - Processed paragraph 24 in d1.txt: List<String> myStrings =  new List<String>();
Alternatively, you can declare the myStrings variable as an array but assign it to a list rather than an array.
2023-04-04 12:15:14,035 - INFO - No related goals found
2023-04-04 12:15:15,717 - INFO - Processed paragraph 25 in d1.txt: String[] myStrings = new List<String>();
Another thing you can do is declare the list and initialize its values, all in one step, such as the following.
2023-04-04 12:15:15,718 - INFO - No related goals found
2023-04-04 12:15:17,064 - INFO - Processed paragraph 26 in d1.txt: List<String> myStrings =  new List<String> {'String1', 'String2', 'String3' };
You can also add values to the list after it has been created, such as this:
2023-04-04 12:15:17,064 - INFO - No related goals found
2023-04-04 12:15:19,140 - INFO - Processed paragraph 27 in d1.txt: List<String> myStrings = new List<String>();
myStrings.add('String1');
myStrings.add('String2');
myStrings.add('String3');
You’ll probably create a lot of list variables in your Apex development, because the output of every SOQL query is a list. For example, you could create a list of Accounts using code such as the following:
2023-04-04 12:15:19,141 - INFO - Related goals: 6
2023-04-04 12:15:23,508 - INFO - Processed paragraph 28 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
Like arrays, lists have indexes that start at zero. So you could access the name of the first account in the list with code like this:
2023-04-04 12:15:23,508 - INFO - Related goals: 6
2023-04-04 12:15:29,819 - INFO - Processed paragraph 29 in d1.txt: List<Account> myAccounts = [SELECT Id, Name FROM Account];
String firstAccount = myAccounts[0].Name;
Set
A set is an unordered collection of elements that does not contain duplicates. A set is commonly used to store ID values because the value are always unique. You could then use the set as part of a WHERE clause in a SOQL query. For example, here we’re creating a set that contains two unique IDs for Accounts. We then use the set in the SOQL query to return Accounts only for those IDs.
2023-04-04 12:15:29,819 - INFO - Related goals: 1, 3, 8, 9, 13, 19
2023-04-04 12:15:30,846 - INFO - Processed paragraph 30 in d1.txt: Set<ID> accountIds = new
  Set<ID>{'001d000000BOaHSAA1','001d000000BOaHTAA1'};  
List<Account> accounts = [SELECT Name
  FROM Account WHERE Id IN :accountIds];    
Map
A map is a collection of key-value pairs. Each key maps to a single value. A map is useful when you need to quickly find something by a key. The key values must be unique, so you could have a map that contained ID values for the key and then mapped to an sObject. For example, you could use the following code to declare a map variable named accountMap that contains all Accounts mapped to their IDs.
2023-04-04 12:15:30,846 - INFO - No related goals found
2023-04-04 12:15:32,335 - INFO - Processed paragraph 31 in d1.txt: Map<Id, Account> accountMap = new Map<Id, Account>([SELECT Id, Name FROM Account]);
You could then access a specific Account record using the get method and code similar to the following.
2023-04-04 12:15:32,336 - INFO - No related goals found
2023-04-04 12:15:33,422 - INFO - Processed paragraph 32 in d1.txt: Id accId = '001d000000BOaHSAA1';
Account account = accountMap.get(accId);
Check out the official docs to learn more about the data types that Apex supports.
2023-04-04 12:15:33,422 - INFO - No related goals found
2023-04-04 12:15:34,451 - INFO - Processed paragraph 33 in d1.txt: ASP.NET to Visualforce
If you’re an ASP.NET web forms developer, you’ll probably feel right at home with Visualforce. There are many similarities between the two., most notably, a clear separation of the markup from the code. You also use form fields to map code to properties defined in the controller.
2023-04-04 12:15:34,451 - INFO - No related goals found
2023-04-04 12:15:35,568 - INFO - Processed paragraph 34 in d1.txt: The bad news is that viewstate is just as much a pain with Visualforce as it is with ASP.NET due to the fact that HTTP is stateless. The good news is that there are ways around the viewstate limitations. Learn more by checking out the link in Resources.
2023-04-04 12:15:35,569 - INFO - No related goals found
2023-04-04 12:15:36,621 - INFO - Processed paragraph 35 in d1.txt: Visualforce is a framework for rendering HTML pages using an MVC paradigm. Now before you get all excited and start thinking, “Cool, Visualforce is like ASP.NET MVC. I love MVC.”, keep in mind that comparing the two is a bit like comparing apples and pumpkins. You can use either one to render web pages, and both separate the application logic from the markup and the database model, but they do so in different ways.
2023-04-04 12:15:36,621 - INFO - No related goals found
2023-04-04 12:15:38,167 - INFO - Processed paragraph 36 in d1.txt: To learn all about Visualforce, check out the Visualforce Basics module. For now, we just want to give you a basic idea of how it works by showing you an example. You can use the following markup code to render a simple page used to enter Contact data.
2023-04-04 12:15:38,168 - INFO - No related goals found
2023-04-04 12:15:40,294 - INFO - Processed paragraph 37 in d1.txt: <apex:page standardController="Contact">
  <apex:form>
    <apex:pageBlock title="Edit Contact" mode="Edit">
       <apex:pageBlockButtons >
         <apex:commandButton action="{!edit}" id="editButton" value="Edit"/>
         <apex:commandButton action="{!save}" id="saveButton" value="Save"/>
         <apex:commandButton action="{!cancel}" id="cancelButton" value="Cancel"/>
       </apex:pageBlockButtons>
       <apex:pageBlockSection >
          <apex:inputField value="{!contact.lastname}" />
          <apex:inputField value="{!contact.accountId}"/>
          <apex:inputField value="{!contact.phone}"/>
       </apex:pageBlockSection>
    </apex:pageBlock>
  </apex:form>
</apex:page>
The example uses what is known as a standard controller, which is part of the Lightning Platform. It’s basically system-generated code that allows you to quickly incorporate basic CRUD functionality in your Visualforce pages. But before you start getting worried, just know that you can create your own custom controllers to add in more complex functioning. Learn all about how standard and custom controllers work in the Visualforce Basics module. The rendered version of this page looks like the following:
2023-04-04 12:15:40,294 - INFO - Related goals: 1, 4, 14
2023-04-04 12:15:41,302 - INFO - Processed paragraph 38 in d1.txt: Screenshot of a custom Visualforce page used to edit contact information
2023-04-04 12:15:41,302 - INFO - No related goals found
2023-04-04 12:15:42,377 - INFO - Processed paragraph 39 in d1.txt: Note
Note
You probably know a bit about Lightning Components, and could be thinking, "Is Lightning like ASP.NET MVC?" The short answer is no. Lightning is a lighter weight way of delivering super fast and responsive web apps, but Lightning is a component-based framework. Learn all about it by visiting the Lightning Web Components Basics module.
2023-04-04 12:15:42,377 - INFO - No related goals found
2023-04-04 12:15:43,417 - INFO - Processed paragraph 40 in d1.txt: What Is Different?
Now that you know a little about how Apex is similar to .NET, let’s go over some differences. For starters, unlike C#, Apex is not case sensitive.
2023-04-04 12:15:43,417 - INFO - No related goals found
2023-04-04 12:15:49,729 - INFO - Processed paragraph 41 in d1.txt: Apex and Database are Tightly Coupled
Apex code and the Lightning Platform database are tightly coupled to the point where they are sometimes indistinguishable. Each standard or custom object in the database has a "mystical" representation via an Apex class that provides all sorts of functionality to make interacting with the database a snap. The class and its underlying object are essentially a mirror image of one another that is constantly in sync. For instance, whenever you create a new field in an object, a class member is automatically surfaced to reference the values in the database. It's also impossible to add a reference in your Apex code to a field that doesn't exist; the compiler will return an error and simply not save your code. The platform works hard to ensure these dependencies and won't let the database schema and your code become out of sync. Therefore, if you attempt to delete a custom object or a field that is referenced by Apex code, the platform will raise an error and disallow the action.
2023-04-04 12:15:49,729 - INFO - Related goals: 3
2023-04-04 12:15:50,709 - INFO - Processed paragraph 42 in d1.txt: Different Design Patterns
As a .NET developer, you are probably already familiar with design patterns. However, most of those patterns don’t work on the Lightning Platform. You learn more about this in the next units when we go over execution context and trigger design, but also consider checking out the links listed in Resources regarding Apex design patterns.
2023-04-04 12:15:50,709 - INFO - No related goals found
2023-04-04 12:15:51,673 - INFO - Processed paragraph 43 in d1.txt: What’s important to understand is that if you try to apply the same design strategies that you use in .NET to the Lightning Platform, you’ll likely encounter problems when you go to test and deploy your solutions. We suggest taking some time to learn about which design patterns work best in the Lightning Platform world before you start cranking out the code.
2023-04-04 12:15:51,673 - INFO - No related goals found
2023-04-04 12:15:54,880 - INFO - Processed paragraph 44 in d1.txt: Unit Tests Are Required
We know you’re used to writing unit tests for your .NET applications and probably understand the benefits to using them. What is different on the Lightning Platform is that you must have 75% test coverage to deploy your Apex code to a production org.
2023-04-04 12:15:54,881 - INFO - Related goals: 1, 9, 19
2023-04-04 12:15:56,925 - INFO - Processed paragraph 45 in d1.txt: Not only does having unit tests promote the development of robust and error-free code, but they’re vital to the stability of the platform, because all tests are run before every major release. To learn more about unit testing, see An Introduction to Apex Code Test Methods.
2023-04-04 12:15:56,925 - INFO - Related goals: 1, 9, 19
2023-04-04 12:15:57,940 - INFO - Processed paragraph 46 in d1.txt: No Solution, Project, or Config Files
The Lightning Platform has no such thing as a solution or project file. You can create an application, but it’s not the same as creating a .NET application or assembly.
2023-04-04 12:15:57,940 - INFO - No related goals found
2023-04-04 12:15:58,905 - INFO - Processed paragraph 47 in d1.txt: An application on the Lightning Platform is just a loose collection of components, such as tabs, reports, dashboards, and pages. Several come built in with your Salesforce org, and in a few seconds, you can create your own by walking through a point-and-click wizard. You can even purchase apps created by third-parties on what is known as the AppExchange.
2023-04-04 12:15:58,906 - INFO - No related goals found
2023-04-04 12:16:01,792 - INFO - Processed paragraph 48 in d1.txt: All your code resides and executes in the cloud. There is also no such thing as a config file in the Lightning Platform world. Because the database is baked right in, you don’t need connection strings. And unlike ASP.NET MVC, you don’t need to configure routes. You can create custom settings in Salesforce, but these are added and managed declaratively.
2023-04-04 12:16:01,792 - INFO - Related goals: 1
2023-04-04 12:16:02,852 - INFO - Processed paragraph 49 in d1.txt: A Much Smaller Class Library
The Apex class library is considerably smaller than the .NET Framework class library, so it’s easier and faster for you to come up to speed with Apex. But honestly, you might find it a bit frustrating when you try to look for comparative functionality that just doesn’t exist in Apex.
2023-04-04 12:16:02,852 - INFO - No related goals found
2023-04-04 12:16:03,891 - INFO - Processed paragraph 50 in d1.txt: Keep in mind that the Lightning Platform is built with the idea of providing rapid application development. It’s also different than the .NET platform, so you might find yourself looking for functionality that you’re used to working that simply doesn’t exist with the Lightning Platform. However, if you’re looking to build pixel-perfect, custom-coded applications, our Heroku Enterprise platform provides all the power and features you need.
2023-04-04 12:16:03,892 - INFO - No related goals found
2023-04-04 12:16:04,883 - INFO - Processed paragraph 51 in d1.txt: Development Tools
More than likely you have already signed up for a free Developer Edition (DE) org. Perhaps you’ve also opened and used the online Developer Console application.
2023-04-04 12:16:04,883 - INFO - No related goals found
2023-04-04 12:16:05,794 - INFO - Processed paragraph 52 in d1.txt: You can use Developer Console to edit and navigate source code, and it’s also helpful for debugging and troubleshooting. We’ll go over this more in a later unit, so stay tuned. If you’ve already gone through the first module about database basics, you know that you can also use Developer Console to execute SOQL and SOSL queries and view query plans. If you haven’t used Developer Console yet, don’t worry because we’ll be going through it shortly when we create an Apex class.
2023-04-04 12:16:05,794 - INFO - No related goals found
2023-04-04 12:16:06,812 - INFO - Processed paragraph 53 in d1.txt: As a .NET developer, you're probably familiar with Visual Studio Code. You will be happy to learn that we have Salesforce Extensions for VS Code that allow you to do custom development on your local machine. The extension is closely tied to Salesforce DX, which provides a modern source-driven development experience. You can learn more about Salesforce DX from the Get Started with Salesforce DX trail.
2023-04-04 12:16:06,812 - INFO - No related goals found
2023-04-04 12:16:07,837 - INFO - Processed paragraph 54 in d1.txt: And finally, we thought you would be interested to know about a powerful command-line interface to the Lightning Platform. If you’re one of those developers that just loves the command line, the Salesforce CLI is right up your alley.
2023-04-04 12:16:07,837 - INFO - No related goals found
2023-04-04 12:16:10,222 - INFO - Processed paragraph 55 in d1.txt: Handling Security
The good news here is that in the Lightning Platform you don’t have to worry about authentication or storing passwords and database connection strings. Identity is handled by the platform. You can control access to data at many different levels, including object level, record level, and field level. Security is also handled declaratively. In many cases, security is defined and set up by a Salesforce administrator. As a developer, it’s important to be aware of how it works. Learn more by checking out the Data Security module.
2023-04-04 12:16:10,223 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 12:16:11,216 - INFO - Processed paragraph 56 in d1.txt: What About Integration?
You can integrate with the platform in a number of ways, but you’ll probably use SOAP and REST the most. You can use them in either direction.
2023-04-04 12:16:11,216 - INFO - No related goals found
2023-04-04 12:16:12,701 - INFO - Processed paragraph 57 in d1.txt: You can create and expose web services using the Apex programming language, as well as invoke external web services from Apex. You can also react to incoming email messages and have automated outbound messages sent when certain events occur.
2023-04-04 12:16:12,702 - INFO - No related goals found
2023-04-04 12:16:14,068 - INFO - Processed paragraph 58 in d1.txt: If you really want to get your hands dirty, Salesforce offers both SOAP and REST APIs that provide direct access to the data in your org. Toolkits that wrap around the APIs are available, so you can use whatever language you prefer: .NET, Java, PHP, Objective C, Ruby, and JavaScript.
2023-04-04 12:16:14,068 - INFO - No related goals found
2023-04-04 12:16:15,589 - INFO - Processed paragraph 59 in d1.txt: Numerous third-party integration applications are also available on the AppExchange. Really, just about anything is possible. You can learn more about all the integration points by completing the Apex Integration module.
2023-04-04 12:16:15,589 - INFO - No related goals found
2023-04-04 12:16:17,311 - INFO - Processed paragraph 60 in d1.txt: Create an Apex Class
Now that you know more about how the Lightning Platform relates to the .NET platform, let’s jump right in and create an Apex class using Developer Console. The class we’ll create includes the public method sendMail. It includes a private helper method called inspectResults for inspecting the results of the email send call.
2023-04-04 12:16:17,311 - INFO - Related goals: 9
2023-04-04 12:16:20,881 - INFO - Processed paragraph 61 in d1.txt: From Setup in your Developer org, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > New > Apex Class.
Enter EmailManager as the class name and click OK.
Delete the existing code, and insert the following snippet:
public with sharing class EmailManager {
    // Public method
    public static void sendMail(String address, String subject, String body) {
        // Create an email message object
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] {address};
        mail.setToAddresses(toAddresses);
        mail.setSubject(subject);
        mail.setPlainTextBody(body);
        // Pass this email message to the built-in sendEmail method
        // of the Messaging class
        Messaging.SendEmailResult[] results = Messaging.sendEmail(
            new Messaging.SingleEmailMessage[] { mail });
        // Call a helper method to inspect the returned results.
        inspectResults(results);
    }
    // Helper method
    private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
        Boolean sendResult = true;
        // sendEmail returns an array of result objects.
        // Iterate through the list to inspect results.
        // In this class, the methods send only one email,
        // so we should have only one result.
        for (Messaging.SendEmailResult res : results) {
            if (res.isSuccess()) {
                System.debug('Email sent successfully');
            } else {
                sendResult = false;
                System.debug('The following errors occurred: ' + res.getErrors());                 
            }
        }
        return sendResult;
    }
}   
Press Ctrl + S to save your class.
Note
Note
This simple example doesn’t implement the required object- or field-level security. See this snippet for a quickstart.
2023-04-04 12:16:20,881 - INFO - Related goals: 9
2023-04-04 12:16:22,274 - INFO - Processed paragraph 62 in d1.txt: Invoke a Method
Because we declared the public sendMail method as static, we can access it without creating an instance of the class. We can do so easily by using Anonymous Apex in Developer Console.
2023-04-04 12:16:22,275 - INFO - No related goals found
2023-04-04 12:16:24,361 - INFO - Processed paragraph 63 in d1.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
EmailManager.sendMail('Your email address', 'Trailhead Tutorial', '123 body');
Make sure that the Open Log option is selected, and click Execute. A new tab shows you the execution log.
Select the Debug Only option so that you see only the debug statements displayed in the log. You should see a message telling you that the Email was sent successfully. You should also receive an email if you entered a valid email address.
Imagine if you had tried to accomplish that same task in .NET. Would it have been that easy to create a .NET application that sent emails? Come on, tell the truth.
2023-04-04 12:16:24,361 - INFO - Related goals: 1, 2, 21
2023-04-04 12:16:25,362 - INFO - Processed paragraph 0 in d10.txt: Build Search for Common Use Cases
2023-04-04 12:16:25,362 - INFO - No related goals found
2023-04-04 12:16:27,090 - INFO - Processed paragraph 1 in d10.txt: Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:16:27,091 - INFO - No related goals found
2023-04-04 12:16:28,177 - INFO - Processed paragraph 2 in d10.txt: Describe how to search within a single object.
Explain how to search within multiple objects.
Describe how to search within a custom object.
On the Job at Cloud Kicks
Let’s say you’re the new all-star developer of the exciting company Cloud Kicks. It makes ultra-comfy, stylish, and eco-friendly custom sneakers that are a hit with professional runners and weekend warriors alike.
2023-04-04 12:16:28,178 - INFO - No related goals found
2023-04-04 12:16:29,225 - INFO - Processed paragraph 3 in d10.txt: You’re tasked with creating a customer-facing online knowledge base and an internal product website for Cloud Kicks employees. All the data comes from the Cloud Kicks Salesforce org. Looks like a job for a customized search solution, doesn’t it? Using this scenario, let’s go through a few common use cases for customized search solutions. We’ll talk about why you would use a particular use case and then give some examples.
2023-04-04 12:16:29,226 - INFO - No related goals found
2023-04-04 12:16:30,573 - INFO - Processed paragraph 4 in d10.txt: Search Within a Single Object
Cloud Kicks is a growing startup, and marketing is working hard to get the word out. It's started several campaigns and has tracked them through Salesforce. Marketing and sales have requested a way to search only campaigns on the internal product website that you’re working on. Single object searches are best used when users need a quick way to search through one record type because they don’t want to be bogged down sifting through records that don’t apply to them.
2023-04-04 12:16:30,574 - INFO - No related goals found
2023-04-04 12:16:31,572 - INFO - Processed paragraph 5 in d10.txt: To search within a single object using SOSL, simply specify that object in the request. It’s just that easy.
2023-04-04 12:16:31,572 - INFO - No related goals found
2023-04-04 12:16:32,655 - INFO - Processed paragraph 6 in d10.txt: FIND {term} RETURNING ObjectTypeName
In the example, term is what the user enters. ObjectTypeName limits search results to include only the sObject specified. So if the user wants to find the March 2016 email campaign, the request looks like:
2023-04-04 12:16:32,655 - INFO - No related goals found
2023-04-04 12:16:33,740 - INFO - Processed paragraph 7 in d10.txt: FIND {march 2016 email} RETURNING Campaign
We’ll get into all the cool stuff you can do with RETURNING and how to refine your search for the best results in the next unit.
2023-04-04 12:16:33,740 - INFO - No related goals found
2023-04-04 12:16:34,728 - INFO - Processed paragraph 8 in d10.txt: Search Within Multiple Objects
Cloud Kicks loves its customers. It wants to build a one-stop-shop for users to ask questions and share information on its website. There are multiple types of information included: videos, articles, questions, and PDFs. But users don’t really care what type of content is presented. They only care that they get the information they need—and fast. That’s what makes the multiple object search beneficial: You get to search through multiple objects at the same time because the type of record doesn’t matter to the user. Or, perhaps the user actually wants to see multiple object types in results.
2023-04-04 12:16:34,729 - INFO - No related goals found
2023-04-04 12:16:36,232 - INFO - Processed paragraph 9 in d10.txt: Luckily, adding another object is super simple in SOSL. Just add a comma-separated list.
2023-04-04 12:16:36,232 - INFO - No related goals found
2023-04-04 12:16:37,251 - INFO - Processed paragraph 10 in d10.txt: FIND {term} RETURNING ObjectTypeName1, ObjectTypeName2, ObjectTypeNameYouGetTheIdea
Going back to our scenario, a Cloud Kicks customer is wondering if any shoes are made of recycled materials. You set up the online knowledge base search so that multiple objects matching the terms are returned in the results.
2023-04-04 12:16:37,251 - INFO - No related goals found
2023-04-04 12:16:41,214 - INFO - Processed paragraph 11 in d10.txt: FIND {recycled materials} RETURNING Product2, ContentVersion, FeedItem
Remember, if you don’t specify an object in the RETURNING element, it doesn’t show up in the results.
2023-04-04 12:16:41,214 - INFO - No related goals found
2023-04-04 12:16:42,229 - INFO - Processed paragraph 12 in d10.txt: Search Within Custom Objects
Salesforce includes numerous standard objects available to customers. But Cloud Kicks is all about custom shoes, so it makes sense that it also needs custom objects. Of specific interest to you is the newest custom object, Merchandise. This object contains information about the style, ID, color, materials, name, and price of all that Cloud Kicks has to offer. Many people inside Cloud Kicks need to access this information, including support, sales, and shipping.
2023-04-04 12:16:42,229 - INFO - No related goals found
2023-04-04 12:16:44,966 - INFO - Processed paragraph 13 in d10.txt: For the internal product website you’re building, you’re adding a search box that only searches the Merchandise custom object. There’s no fancy way to specify custom objects in a SOSL search. Include the sObject name like any other standard object, and append a __c suffix.
2023-04-04 12:16:44,966 - INFO - Related goals: 8
2023-04-04 12:16:45,998 - INFO - Processed paragraph 14 in d10.txt: FIND {pink hi\-top} RETURNING Merchandise__c
SOQL
We’ve gone on about SOSL, but what SOQL? Well, you use SOQL for single object searches, when you know the fields to be searched, when the search term is an exact match for the field (no partial or out-of-order matches), when you need number, date, or checkbox field data, and when you’re looking for just a few results. (For a full list of when to use SOQL, refer to the previous unit.)
2023-04-04 12:16:45,998 - INFO - No related goals found
2023-04-04 12:16:47,734 - INFO - Processed paragraph 15 in d10.txt: Looking at the previous common use cases in this module, you might have noticed some red flags for using SOQL. For example:
2023-04-04 12:16:47,734 - INFO - No related goals found
2023-04-04 12:16:50,494 - INFO - Processed paragraph 16 in d10.txt: Single object search—SOQL works when you know which field the data resides in. Because we didn’t specify the field for march 2016 email, a SOSL search is preferred over SOQL. In general, if the query doesn’t specify a target field to search, SOSL works.
Multiple object search—Because you can only retrieve data from multiple objects that are related to one another, the multiple object search in SOQL is limited. In our scenario, the objects were unrelated, so SOSL it is.
Custom object search—As with a single object search, you could search through custom objects in SOQL fine. However, we didn’t specify in which field the data resides for our search term pink hi-top. In addition, SOQL searches against the database, not the index. So, let’s say that the record actually included pink sneaker hi-top. SOQL wouldn’t be able to return the right results.
2023-04-04 12:16:50,494 - INFO - No related goals found
2023-04-04 12:16:51,502 - INFO - Processed paragraph 0 in d11.txt: Optimize Search Results
2023-04-04 12:16:51,502 - INFO - No related goals found
2023-04-04 12:16:53,178 - INFO - Processed paragraph 1 in d11.txt: Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:16:53,178 - INFO - No related goals found
2023-04-04 12:16:54,528 - INFO - Processed paragraph 2 in d11.txt: Describe how to create efficient text searches that return more targeted search results.
Describe how to create auto-suggest functionality for searches.
List more actions that admins can take to enhance search results for users.
Create Efficient Text Searches
Search queries can be expensive. The more data you’re searching through and the more results you’re returning, the more you can slow down the entire operation.
2023-04-04 12:16:54,529 - INFO - No related goals found
2023-04-04 12:16:55,514 - INFO - Processed paragraph 3 in d11.txt: How do you combat sluggish searches? With two basic strategies.
2023-04-04 12:16:55,515 - INFO - No related goals found
2023-04-04 12:16:56,522 - INFO - Processed paragraph 4 in d11.txt: Limit which data you’re searching through
Limit which data you’re returning
But you don’t want to go too far. If you’re too efficient, the search is less useful. Users don’t like it when they see record not found when they know that the record exists.
2023-04-04 12:16:56,522 - INFO - No related goals found
2023-04-04 12:16:57,526 - INFO - Processed paragraph 5 in d11.txt: Here are our recommendations to create a happy medium. Let’s start with a SOSL example to understand the basic concepts.
2023-04-04 12:16:57,526 - INFO - No related goals found
2023-04-04 12:16:58,473 - INFO - Processed paragraph 6 in d11.txt: To limit which data is searched, use IN SearchGroup. You can search for name, email, phone, sidebar, or all fields. For example, if you want to search only for an email, you search through only email fields.
2023-04-04 12:16:58,473 - INFO - No related goals found
2023-04-04 12:16:59,536 - INFO - Processed paragraph 7 in d11.txt: FIND {jsmith@cloudkicks.com} IN EMAIL FIELDS RETURNING Contact
Now let’s talk search results. Yes, users think they want to see all the results. But if you have thousands of records, it’s time to reconsider that stance. Think about how you could limit the results or at least break them up into smaller, easier-to-digest chunks.
2023-04-04 12:16:59,536 - INFO - No related goals found
2023-04-04 12:17:00,556 - INFO - Processed paragraph 8 in d11.txt: Again, turning to SOSL, you can use RETURNING FieldSpec to specify which data is returned. We used it in the last unit, but let’s talk about the more advanced elements it includes.
2023-04-04 12:17:00,556 - INFO - No related goals found
2023-04-04 12:17:03,173 - INFO - Processed paragraph 9 in d11.txt: ObjectTypeName—Specifies the object to return.
FieldList—Specifies the fields to return.
ORDER By—Specifies which fields to order the results by. You can also specify ascending or descending order.
LIMIT n—Sets the maximum number of records returned for the given object.
OFFSET n—Sets the starting row offset into the result set returned by your query.
That’s a lot to take in. Let’s go through it step-by-step.
2023-04-04 12:17:03,174 - INFO - No related goals found
2023-04-04 12:17:05,282 - INFO - Processed paragraph 10 in d11.txt: Step	Goal	Example
1	Specify the object to return.	
FIND {Cloud Kicks} RETURNING Account
2	Specify the field to return.	
FIND {Cloud Kicks} RETURNING Account(Name, Industry)
3	Order the results by field in ascending order, which is the default.	
FIND {Cloud Kicks} RETURNING Account (Name, Industry ORDER BY Name)
4	Set the max number of records returned	
FIND {Cloud Kicks} RETURNING Account (Name, Industry ORDER BY Name LIMIT 10)
5	Set the starting row offset into the results.	
FIND {Cloud Kicks} RETURNING Account (Name, Industry ORDER BY Name LIMIT 10 OFFSET 25)
Now that you’re getting the hang of this, let’s try out some WITH statements, which filter records by certain predefined fields. By prefiltering results, you return fewer results and improve performance. Plus, users don’t need to wade through as many results. What types of WITH filters does SOSL offer? Well, here they are:
2023-04-04 12:17:05,282 - INFO - No related goals found
2023-04-04 12:17:07,306 - INFO - Processed paragraph 11 in d11.txt: Resource	Example
WITH DIVISION	
FIND {Cloud Kicks} RETURNING Account (Name, Industry)
    WITH DIVISION = 'Global'
WITH DATA CATEGORY 	
FIND {race} RETURNING KnowledgeArticleVersion
    (Id, Title WHERE PublishStatus='online' and language='en_US')
    WITH DATA CATEGORY Location__c AT America__c
WITH NETWORK	
FIND {first place} RETURNING User (Id, Name),
FeedItem (id, ParentId WHERE CreatedDate = THIS_YEAR Order by CreatedDate DESC)
WITH NETWORK = '00000000000001'
WITH PRICEBOOK	
Find {shoe} RETURNING Product2 WITH PricebookId = '01sxx0000002MffAAE'
Starting to get the picture? Seems like you’re ready to tackle how this works in SOQL. The good news is that it’s pretty much the same. SOQL has similar syntaxes under SELECT that accomplish the same thing as SOSL. The full list of syntaxes, including how to limit by data category or network, is in the developer docs. Here’s a handy comparison table of some of the syntaxes that we discussed.
2023-04-04 12:17:07,307 - INFO - No related goals found
2023-04-04 12:17:08,594 - INFO - Processed paragraph 12 in d11.txt: I want to...	SOSL	SOQL
Limit the data that is searched	IN SearchGroup	WHERE
Specify the data to be returned in the response	Returning FieldSpec	SELECT
Sort results	ORDER BYLIMITOFFSET	ORDER BYLIMITOFFSET
Filter by data category	WITH DATA CATEGORY	WITH DATA CATEGORY
Display Suggested Results
Remember all the way back in the first unit when we talked about record auto-suggestion and the finer art of searching for information about trail running? Let’s revisit that concept in a little more detail.
2023-04-04 12:17:08,594 - INFO - No related goals found
2023-04-04 12:17:09,621 - INFO - Processed paragraph 13 in d11.txt: As a refresher, you can use APIs so that suggestions appear as the user types into the search bar. Suggestions return records that have a title that matches what the user is typing. This feature gets your users to where they want to go faster, which is the whole goal of search, isn’t it?
2023-04-04 12:17:09,621 - INFO - No related goals found
2023-04-04 12:17:11,015 - INFO - Processed paragraph 14 in d11.txt: To take advantage of this feature, here are your go-to REST resources. Each resource has similar syntax and parameters, but use the one that best fits your use case.
2023-04-04 12:17:11,015 - INFO - No related goals found
2023-04-04 12:17:11,962 - INFO - Processed paragraph 15 in d11.txt: Search Suggested Records—Returns a list of suggested records whose names match the user’s search string. The suggestions resource provides a shortcut for users to navigate directly to likely relevant records, before performing a full search.
Search Suggested Article Title Matches—Returns a list of Salesforce Knowledge articles whose titles match the user’s search query string. Provides a shortcut to navigate directly to likely relevant articles before the user performs a search.
SObject Suggested Articles for Case—Returns a list of suggested Salesforce Knowledge articles for a case.
Let’s use the Search Suggested Article Title Matches option as an example of how suggestion works. Here’s the basic syntax, but check out the API docs for the full list of parameters available.
2023-04-04 12:17:11,962 - INFO - No related goals found
2023-04-04 12:17:12,979 - INFO - Processed paragraph 16 in d11.txt: /vXX.X/search/suggestTitleMatches?q=search string&language=article language&publishStatus=article publication status
Now we use that syntax but with a specific example. The request looks like the following.
2023-04-04 12:17:12,979 - INFO - No related goals found
2023-04-04 12:17:14,021 - INFO - Processed paragraph 17 in d11.txt: /vXX.X/search/suggestTitleMatches?q=race+tips&language=en_US&publishStatus=Online
And the JSON response.
2023-04-04 12:17:14,021 - INFO - No related goals found
2023-04-04 12:17:15,875 - INFO - Processed paragraph 18 in d11.txt: {
  "autoSuggestResults" : [ {
    "attributes" : {
    "type" : "KnowledgeArticleVersion",
    "url" : "/services/data/v30.0/sobjects/KnowledgeArticleVersion/ka0D00000004CcQ"
    },
  "Id" : "ka0D00000004CcQ",
  "UrlName" : "tips-for-your-first-trail-race",
  "Title" : "race tips",
  "KnowledgeArticleId" : "kA0D00000004Cfz",
  "isMasterLanguage" : "1",
  } ],
  "hasMoreResults" : false
}
Work with Admins
Optimizing search results is a team sport. Luckily, you know the best person for the assist: your MVP admin. Here’s the play for winning some easy points on enhancing search results by working with your admin.
2023-04-04 12:17:15,875 - INFO - No related goals found
2023-04-04 12:17:16,915 - INFO - Processed paragraph 19 in d11.txt: The first step is setting up and optimizing synonym groups, which have words or phrases that are treated equally in searches. A search for one term in a synonym group returns results for all terms in the group. For example, a search for USB returns results for all terms in the synonym group, which contains USB, thumb drive, flash stick, and memory stick. You’re probably seeing the value of synonym groups already. Users can search using one term and still get the results they want even if they don’t use the “right” search term. No renaming of products required.
2023-04-04 12:17:16,915 - INFO - No related goals found
2023-04-04 12:17:17,957 - INFO - Processed paragraph 20 in d11.txt: Creating synonym groups is easy.
From Setup, enter Synonyms in the Quick Find box, then select Synonyms.
Under Custom Synonym Groups, click New to start a synonym group or Edit next to an existing group.
Add two to six synonyms per group. A synonym can be any word or phrase. No special characters.
Note
Standard synonym groups, which are provided by Salesforce, are enabled by default.
2023-04-04 12:17:17,957 - INFO - No related goals found
2023-04-04 12:17:19,306 - INFO - Processed paragraph 21 in d11.txt: Have tons of synonyms to import? Take advantage of the metadata API listed in the references section.
2023-04-04 12:17:19,306 - INFO - No related goals found
2023-04-04 12:17:20,304 - INFO - Processed paragraph 22 in d11.txt: Now that you’ve got synonym groups handled, the next step is promoted search terms for Knowledge articles.
2023-04-04 12:17:20,304 - INFO - No related goals found
2023-04-04 12:17:21,360 - INFO - Processed paragraph 23 in d11.txt: Promoted search terms are useful for getting more eyeballs on an article that you know is commonly used to resolve a support issue. Getting it set up is simple. Admins find the perfect article and then add terms to the Promoted Search Terms related list. Users who enter those keywords see the chosen article at the top in search results.
2023-04-04 12:17:21,360 - INFO - No related goals found
2023-04-04 12:17:22,323 - INFO - Processed paragraph 24 in d11.txt: For example, your support team has crafted the absolutely perfect article on how to return shoes that don’t fit. The admin goes in and updates that article to include promoted search terms of return and doesn’t fit. When users search for those terms, the article pops up.
2023-04-04 12:17:22,324 - INFO - No related goals found
2023-04-04 12:17:23,378 - INFO - Processed paragraph 25 in d11.txt: A couple things to help your admin fine-tune promoted search terms.
2023-04-04 12:17:23,378 - INFO - No related goals found
2023-04-04 12:17:24,423 - INFO - Processed paragraph 26 in d11.txt: The maximum number of characters per term is 100. For best results when matching users’ search terms, limit each promoted term to a few keywords.
Don’t go overboard. For best results, use them selectively, which means create a limited number of promoted terms and a limited number of promoted articles per term. Adding too many promoted search terms could affect the relevance ranking for users, leading to unwanted results. Your organization can create a maximum of 2,000 promoted terms.
Article search matches a promoted term whenever all keywords within the term occur within the user’s search terms, in any sequence. Each keyword must match exactly.
2023-04-04 12:17:24,424 - INFO - No related goals found
2023-04-04 12:17:26,874 - INFO - Processed paragraph 0 in d12.txt: Plan for Changes to Your Org
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:17:26,874 - INFO - No related goals found
2023-04-04 12:17:27,955 - INFO - Processed paragraph 1 in d12.txt: Describe how you manage change using the org development model.
Identify the tools that you need for org development.
Explain the benefits of using a source control system.
Calvin’s Journey Continues
Do you remember Calvin Green from Zephyrus Relocation Services? Using Salesforce, Zephyrus helps customers relocate internationally for their jobs.
2023-04-04 12:17:27,955 - INFO - No related goals found
2023-04-04 12:17:29,991 - INFO - Processed paragraph 2 in d12.txt: As we walk you through how the org development model facilitates team development, we reference the process the team followed for change set development. Before you continue the journey with Calvin and his team, did you already complete the Change Set Development Model module? Go ahead. It’s okay. We’ll be here when you get back.
2023-04-04 12:17:29,991 - INFO - No related goals found
2023-04-04 12:17:30,999 - INFO - Processed paragraph 3 in d12.txt: Meanwhile, Back at Zephyrus Relocation Services
As you can imagine, Calvin’s world is getting more complex. He’s managing a growing number of requested customizations to their Relocation Services software. When the projects were smaller, Calvin and his colleague, Ella, used change sets to deploy changes.
2023-04-04 12:17:31,000 - INFO - No related goals found
2023-04-04 12:17:32,362 - INFO - Processed paragraph 4 in d12.txt: Zephyrus continues to deliver more options and value to its customers. Calvin and his team need a way to make sure that the Sales team is aware of all the new and exciting product offerings. They can’t offer their clients these great new courses and services if they don’t know about them.
2023-04-04 12:17:32,362 - INFO - No related goals found
2023-04-04 12:17:33,487 - INFO - Processed paragraph 5 in d12.txt: Before they begin work on the next release, Calvin is looking for a process and development lifecycle that scale with this growth. As his team grows, he needs a process that supports multiple contributors developing on the Lightning Platform simultaneously.
2023-04-04 12:17:33,487 - INFO - No related goals found
2023-04-04 12:17:36,180 - INFO - Processed paragraph 6 in d12.txt: Calvin meets with his development team to discuss how they can work more effectively as the team grows. In the past, they’ve encountered challenges with:
2023-04-04 12:17:36,181 - INFO - No related goals found
2023-04-04 12:17:37,296 - INFO - Processed paragraph 7 in d12.txt: Tracking everyone’s changes
Keeping all the development and testing environments in sync
Creating and deploying change sets multiple times because of errors and differences among environments
The new lead developer, Juan Garcia, has been investigating some of the new Salesforce DX tools and development models. He thinks the org development model can help to mitigate some of the pain points they’re experiencing.
2023-04-04 12:17:37,297 - INFO - No related goals found
2023-04-04 12:17:38,303 - INFO - Processed paragraph 8 in d12.txt: Calvin and his growing team in a conference room, sitting around a table.
Move to Org Development
With multiple developers and admins contributing to a release, the team agrees they need a new development model. Enter org development, a model that uses some different tools that provide 1) greater flexibility and scalability, 2) new ways to track and manage change, and 3) a different method of deployment.
2023-04-04 12:17:38,303 - INFO - No related goals found
2023-04-04 12:17:39,418 - INFO - Processed paragraph 9 in d12.txt: Juan likes that the org development model uses a source control repository to store changes and project files. A source repo can help to mitigate the pain point of keeping environments in sync. By externalizing the changes for each release, the team knows that the source repo reflects what they are delivering and isn’t affected by environment differences. This consistency ensures a smoother process as they move through the different development, testing, and staging environments.
2023-04-04 12:17:39,418 - INFO - No related goals found
2023-04-04 12:17:40,481 - INFO - Processed paragraph 10 in d12.txt: Similar to change sets, the release artifact is a set of metadata changes to apply to the production org. To ensure they're identifying dependencies from all contributors, the team uses change tracking mechanisms that capture the changes made to components versus changes made directly in the org through the Setup UI.
2023-04-04 12:17:40,481 - INFO - No related goals found
2023-04-04 12:17:46,156 - INFO - Processed paragraph 11 in d12.txt: Juan also suggests that they use the Salesforce Extensions for VS Code to retrieve metadata from their development environments. Then they store the changes they make in the source control system. Once changes are in source control, they can create automated processes for testing and deploying to production.
2023-04-04 12:17:46,156 - INFO - Related goals: 1, 2, 9, 19, 22
2023-04-04 12:17:47,214 - INFO - Processed paragraph 12 in d12.txt: After several testing and integration cycles, Juan deploys the changes, stored in source control, to production. This process mitigates another pain point: creating and deploying change sets multiple times because of errors and differences between environments.
2023-04-04 12:17:47,214 - INFO - No related goals found
2023-04-04 12:17:49,017 - INFO - Processed paragraph 13 in d12.txt: Prepare the Release Environments
The team accesses the same development and testing environments they’ve used before. Juan’s team uses sandboxes in each step of the application lifecycle.
2023-04-04 12:17:49,017 - INFO - No related goals found
2023-04-04 12:17:51,297 - INFO - Processed paragraph 14 in d12.txt: Develop and test: Each team member has their own Developer sandbox to create their assigned customization. Developer sandboxes contain no production data.
Build release: Each team member migrates their customizations from their respective Developer sandboxes to a shared Developer Pro sandbox for integration. Developer Pro sandboxes don’t contain production data, but you can seed them with testing data.
Test release: For user-acceptance testing, the team uses a partial sandbox to create a complete replica of production (without production data).
Release: After the release is in production, the team can use the full sandbox to train users without the risk of altering production data. A full sandbox includes a copy of production data.
The steps in the application development lifecycle: develop and test with Developer sandboxes; integrate with a Developer Pro sandbox; test and validate with a Full sandbox; and release to production. All changes are stored in the source control repository.
Manage Change Like a Boss
Calvin and his team use many of the tools they are already familiar with as they begin to follow the org development model. However, some new tools enhance their productivity during specific release stages. They are critical for moving to a more agile team development model.
2023-04-04 12:17:51,297 - INFO - No related goals found
2023-04-04 12:17:52,356 - INFO - Processed paragraph 15 in d12.txt: Salesforce DX Project
The Salesforce DX project contains the source and files that comprise your changes. A DX project has a specific project structure and source format.
2023-04-04 12:17:52,356 - INFO - No related goals found
2023-04-04 12:17:54,811 - INFO - Processed paragraph 16 in d12.txt: In addition to source files, the project contains a configuration file, sfdx-project.json. This file contains project information and enables you to leverage Salesforce DX tools for many of your development tasks.
2023-04-04 12:17:54,813 - INFO - No related goals found
2023-04-04 12:17:55,811 - INFO - Processed paragraph 17 in d12.txt: A DX project has this structure:
2023-04-04 12:17:55,811 - INFO - No related goals found
2023-04-04 12:17:57,979 - INFO - Processed paragraph 18 in d12.txt: The Salesforce DX project structure files and directories include .sfdx file, .vscode file, config directory, force-app directory (which contains the changes in source format), manifest directory (which contains the package.xml), .forceignore file, and sfdx-project.json file (which is the configuration file for the project).
You can think of the DX project as your outbound change set, where you’re managing and collecting the changes that you want to send to your production org.
2023-04-04 12:17:57,980 - INFO - Related goals: 2, 20
2023-04-04 12:17:59,406 - INFO - Processed paragraph 19 in d12.txt: Deployment Artifact (.zip File)
After testing the changes, Juan creates the deployment artifact, a .zip file that contains changes to deploy. He deploys the release artifact to the Full (staging) sandbox first, and then finally to production. You can think of the deployment artifact as the inbound change set. The changes don’t take effect until they are deployed.
2023-04-04 12:17:59,407 - INFO - No related goals found
2023-04-04 12:18:00,415 - INFO - Processed paragraph 20 in d12.txt: Source Control System
All changes are merged and stored in a source control system, which contains the Salesforce DX project. A source control system provides several benefits.
2023-04-04 12:18:00,415 - INFO - No related goals found
2023-04-04 12:18:02,050 - INFO - Processed paragraph 21 in d12.txt: Real-time collaboration increases efficiency and drives consensus.
The team can work on the same files at the same time without fear of overwriting changes or losing work.
Revision history shows who made which changes.
You can revert to earlier versions of any file. It’s like having your very own time machine where you can go back and save the universe from destruction.
When you save work you provide a commit description, which provides historical context for the work.
Salesforce CLI
Salesforce CLI is a powerful command-line interface that you can use for every phase of the org development lifecycle. It improves productivity by providing a single interface for all your development, test, and automation use cases. You can:
2023-04-04 12:18:02,050 - INFO - No related goals found
2023-04-04 12:18:03,160 - INFO - Processed paragraph 22 in d12.txt: Authorize sandboxes (headless or web flow)
Create and manage DX projects
Import and export test data
Retrieve and deploy metadata
Run and automate tests
Salesforce Extensions for Visual Studio (VS) Code
Salesforce Extensions for VS Code is built on top of Salesforce CLI and VS Code. Together, they are an integrated development environment that’s created for custom development on Lightning Platform. Best of all, you can run Salesforce CLI commands directly from the command palette or terminal. The development team installs the Salesforce Extension Pack so they can use these VS Code extensions:
2023-04-04 12:18:03,160 - INFO - No related goals found
2023-04-04 12:18:13,525 - INFO - Processed paragraph 23 in d12.txt: Salesforce CLI Integration—interacts with Salesforce CLI to provide core functionality.
Apex—uses the Apex Language Server to provide features such as syntax highlighting and code completion.
Apex Replay Debugger—enables VS Code to replay Apex execution from Apex debug logs.
Aura Components—supports Aura component bundles.
Visualforce—supports Visualforce pages and components.
Change Management Mechanisms
The development team benefits from having some formal change-tracking tools in place, including a team change list, deployment run list, and project management system.
2023-04-04 12:18:13,526 - INFO - Related goals: 2, 20
2023-04-04 12:18:14,661 - INFO - Processed paragraph 24 in d12.txt: Tool	Description
Change list	A developer uses this simple list, table, or spreadsheet to track changes they make in their own dev org so they know what to externalize.
Deployment run list	A developer lists any manual changes required in the org pre- and post-deployment. These changes include metadata that can't be deployed, for example, profile and permission set assignments.
Project management tools	Tools such as Agile Accelerator and Jira help a team embrace Agile development practices, track business requirements, feature work, and bugs. Project management tools also help a team manage sprints and groom its backlog (future work items).
Install the Tools
Juan and Ella both use Salesforce Extensions for VS Code to perform development and testing tasks, and GitHub as their source control system. They complete these steps.
2023-04-04 12:18:14,661 - INFO - No related goals found
2023-04-04 12:18:16,467 - INFO - Processed paragraph 25 in d12.txt: Install Salesforce CLI.
Install VS Code and Salesforce Extensions for Visual Studio Code.
Install Git.
Set up Git.
Create a GitHub account.
Because Ella has never used Visual Studio before, she installs the tools, then completes Quick Start: Visual Studio Code for Salesforce Development.
2023-04-04 12:18:16,467 - INFO - No related goals found
2023-04-04 12:18:17,537 - INFO - Processed paragraph 0 in d13.txt: Develop and Test Changes Locally
2023-04-04 12:18:17,537 - INFO - No related goals found
2023-04-04 12:18:19,580 - INFO - Processed paragraph 1 in d13.txt: Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:18:19,580 - INFO - No related goals found
2023-04-04 12:18:23,415 - INFO - Processed paragraph 2 in d13.txt: Create a branch and commit changes to a source control repository.
Authorize a sandbox using Salesforce Extensions for VS Code.
Retrieve changes from a sandbox.
Set Up a Code Repository
The Zephyrus Relocation Services development team hosts their code and reviews their work in GitHub. Previously, a team member could accidentally overwrite someone’s changes by deploying a change set right over an existing change set. Now they commit changes to the source repository to identify and merge any customization conflicts before they continue.
2023-04-04 12:18:23,415 - INFO - Related goals: 2, 20
2023-04-04 12:18:24,877 - INFO - Processed paragraph 3 in d13.txt: Important: The main goal of this module is to demonstrate the org development model workflow. This module doesn’t have a hands-on challenge. However, we understand that trailblazers don’t tend to sit on the sidelines. If you try the steps demonstrated in this module, we provide guideposts (notes) when your instructions differ from Ella and Juan’s. Keep your sandboxes for “real” development work. Before you begin, sign up for a Developer Edition org or Trailhead playground to use in place of each sandbox.
2023-04-04 12:18:24,877 - INFO - No related goals found
2023-04-04 12:18:28,192 - INFO - Processed paragraph 4 in d13.txt: Create the Source Control Repository
The repository is where Juan organizes the source files for the development project. Juan then creates a Salesforce DX project and adds it to the repo.
2023-04-04 12:18:28,193 - INFO - Related goals: 2, 20
2023-04-04 12:18:29,333 - INFO - Processed paragraph 5 in d13.txt: Name the repo something descriptive to reflect its purpose. Because this in an internal development project, Juan creates a private repository using Zephyrus’s enterprise account called language-courses.
2023-04-04 12:18:29,333 - INFO - No related goals found
2023-04-04 12:18:32,283 - INFO - Processed paragraph 6 in d13.txt: Create a Salesforce DX Project
Open VS Code.
From the menu, select View | Command Palette.
In the command palette search box, enter sfdx project.
Select SFDX: Create Project with Manifest.
Use the same name as your GitHub repo, language-courses, then click Enter.
Click Create Project.
Add Project Files to the Repo in GitHub
In VS Code, open the DX project directory, then click the Source Control icon Source Control icon.
Click Initialize Repository.
Hover over Changes, then click the + to stage all changes.
Accept the default branch in which to commit the repo, such as main.
Enter a commit message, then click the Commit icon, checkmark Commit icon.
Click Publish Branch.
Confirm where you want to publish it.
Create Customizations for New Requirements
Calvin has met with the Sales team to gather new requirements for the next release. The Sales team wants to be notified when a language course is added or changed, and they want to know who is teaching each course.
2023-04-04 12:18:32,283 - INFO - No related goals found
2023-04-04 12:18:34,251 - INFO - Processed paragraph 7 in d13.txt: Juan thinks this request is a great way for the team to get comfortable with the org development model. Although it can handle far more complex development scenarios, this simple set of steps can help the team understand the model workflow.
2023-04-04 12:18:34,252 - INFO - No related goals found
2023-04-04 12:18:36,414 - INFO - Processed paragraph 8 in d13.txt: Ella’s assignment is to create a custom object for language course instructor and to link it to the course record. Juan creates a trigger that sends a notification email to the Sales team alias. These are the steps:
2023-04-04 12:18:36,415 - INFO - No related goals found
2023-04-04 12:18:37,486 - INFO - Processed paragraph 9 in d13.txt: Clone the Repo
First, Ella clones the GitHub repo and creates her own branch.
2023-04-04 12:18:37,486 - INFO - No related goals found
2023-04-04 12:18:40,088 - INFO - Processed paragraph 10 in d13.txt: Go to the repo you want to clone, for example, https://github.com/zephyrus/language-courses.
This repo doesn’t exist. It’s meant for illustrative purposes only. If you plan to follow along, substitute the sample repo you created in these steps. Also, you’ll be simulating the work of two developer personas, Juan and Ella. We suggest creating two separate parent directories to keep their development work separate. For example, if you’re doing Ella’s development work, you clone the repo in an org-dev-ella folder. When you’re doing Juan’s development work, you clone the repo in an org-dev-juan folder.
Click Clone or download.
Copy the HTTPS URL.
From the command palette in VS Code, select Git: Clone.
In Repository URL, paste the URL to the repo, then click Enter. Ella clones the repo that Juan created: https://github.com/zephyrus/language-courses.git.
On your local file system, navigate to the place you want to put the GitHub repo, then click Select Repository Location.
Click Open Repository.
From the command palette, select Git: Create Branch.
Enter your branch name. Ella calls her branch ella-custom-object. Now she’s working in her own branch.
Authorize and Log In to the Sandbox
Next, Ella authorizes (logs in) to her Developer sandbox using VS Code.
2023-04-04 12:18:40,089 - INFO - No related goals found
2023-04-04 12:18:41,182 - INFO - Processed paragraph 11 in d13.txt: Note
If you’re following along, use a Developer Edition org or Trailhead Playground. In step 3, select Project Default to use login.salesforce.com as the login URL.
2023-04-04 12:18:41,183 - INFO - No related goals found
2023-04-04 12:18:44,104 - INFO - Processed paragraph 12 in d13.txt: From the command palette search box, enter sfdx authorize.
Select SFDX: Authorize an Org.
Select Sandbox for the login URL.
Enter an alias for the sandbox—for example, dev_sandbox.
Log in with the sandbox username and password.
Create the Custom Object
Then, Ella creates the Language Instructor custom object in her Developer sandbox.
2023-04-04 12:18:44,104 - INFO - Related goals: 1, 2, 9, 19, 22
2023-04-04 12:18:45,785 - INFO - Processed paragraph 13 in d13.txt: From Setup, click the Object Manager tab.
Click Create | Custom Object in the top-right corner.
For Label, enter Language Course Instructor. Notice that the Object Name and Record Name fields auto-fill.
For Plural Label, enter Language Course Instructors.
Check the box for Launch New Custom Tab Wizard, then click Save.
Select your desired tab style (Ella chooses Presenter), and click Next until you can save the object.
Define the Custom Field
Next, Ella defines the custom object field on the Language Course object that references the Language Course Instructor object.
2023-04-04 12:18:45,785 - INFO - No related goals found
2023-04-04 12:18:46,808 - INFO - Processed paragraph 14 in d13.txt: Note
If you’re following along, Ella created the Language Course object in Develop and Test Changes Locally in the Change Set Development Model module. This module assumes this object already exists in Ella’s Developer sandbox. Create this custom object before continuing.
2023-04-04 12:18:46,808 - INFO - No related goals found
2023-04-04 12:18:50,463 - INFO - Processed paragraph 15 in d13.txt: From Setup, go to Object Manager | Language Course.
Click Fields & Relationships. Notice that some fields are already there, including a name field.
Click New.
For data type, select Master-Detail Relationship, then click Next.
From Related To, select Language Course Instructor, then click Next.
Fill out the following:
Field Label: Course Instructor
Description: Teacher for the language course
Click Next until you can save the field.
Track the Changes in a Change List
Ella creates a change list for the project to capture her changes.
2023-04-04 12:18:50,463 - INFO - Related goals: 3
2023-04-04 12:18:53,240 - INFO - Processed paragraph 16 in d13.txt: Metadata Entity	Object	Change Type (Create, Update, Delete)	Details
CustomObject	Language_Course_Instructor__c	Create	Object to capture the name of the person teaching the course
CustomField	Course_Instructor__c	Create	Master-detail relationship with Language_Course__c custom object
Retrieve the Changes from the Developer Sandbox
Ella retrieves the changes from the sandbox to her local DX project. Because Ella tracks her changes along the way, she knows what to retrieve from her Developer sandbox.
2023-04-04 12:18:53,240 - INFO - No related goals found
2023-04-04 12:18:56,814 - INFO - Processed paragraph 17 in d13.txt: Because Ella retrieves only a few components from her sandbox, she decides to use the Terminal in VS Code to run the Salesforce CLI force:source:retrieve command. Based on the default directory specified in the DX project, the CLI places the source in the force-app folder. Because you can’t add an empty folder in GitHub, Ella creates the force-app folder in the DX project on her local file system.
2023-04-04 12:18:56,814 - INFO - Related goals: 1, 9, 19
2023-04-04 12:18:59,009 - INFO - Processed paragraph 18 in d13.txt: In the DX project on the local file system, create a force-app folder.
In the VS Code Terminal, run the CLI command to retrieve the new custom object and custom field:
sfdx force:source:retrieve --metadata CustomObject:Language_Course_Instructor__c,CustomField:Language_Course__c.Course_Instructor__c
Ella uses --metadata instead of --sourcepath because --sourcepath can retrieve only files that already exist on the file system. The custom object appears in the force-app/main/default/objects directory. In VS Code, the left side shows the new directory structure created after the source:retrieve command: force-app/main/default/objects. The right side shows the Terminal window where the command was run as well as the resulting CLI output.
Commit the Changes to the Source Control Repository
Ella commits her changes to the repo, then creates a pull request to inform Juan that her changes are ready to review.
2023-04-04 12:18:59,010 - INFO - Related goals: 2, 20
2023-04-04 12:19:00,148 - INFO - Processed paragraph 19 in d13.txt: In VS Code, select the Source Control icon Source Control icon.
Enter a commit comment, then click the Commit icon Commit icon.
Click Yes to add and commit the files.
From the VS Code command palette, select Git: Push To.
Select the origin repository.
Review the Code
Note
If you’re following along, you can skip this section.
2023-04-04 12:19:00,148 - INFO - No related goals found
2023-04-04 12:19:01,169 - INFO - Processed paragraph 20 in d13.txt: Create a pull request. In the GitHub repo, click Compare & pull request.
Assign reviewers. Ella assigns Juan to review and approve her changes.
Enter a comment for your reviewers.
Click Create pull request.
After Juan reviews and approves the code, Ella merges the pull request. Juan knows that he can begin his trigger work.
2023-04-04 12:19:01,169 - INFO - No related goals found
2023-04-04 12:19:05,802 - INFO - Processed paragraph 21 in d13.txt: Create the Trigger
The trigger notifies the Sales team when a course is updated or a new course is added. A trigger is a piece of Apex code that executes before or after records of a particular type are inserted, updated, or deleted from the Lightning Platform database.
2023-04-04 12:19:05,802 - INFO - Related goals: 9
2023-04-04 12:19:07,885 - INFO - Processed paragraph 22 in d13.txt: Juan clones the GitHub repo that contains the new custom object, creating his own branch. Juan creates his trigger and its corresponding test in VS Code.
2023-04-04 12:19:07,886 - INFO - Related goals: 1, 9, 19
2023-04-04 12:19:08,943 - INFO - Processed paragraph 23 in d13.txt: Deploy the Project Repo to the Developer Sandbox
First, Juan deploys Ella’s changes to his Developer sandbox so that both their environments are in sync.
2023-04-04 12:19:08,944 - INFO - No related goals found
2023-04-04 12:19:10,320 - INFO - Processed paragraph 24 in d13.txt: Note
If you’re following along, perform these steps in the folder you created for Juan’s development work, such as org-dev-juan. Use a new Developer Edition org or Trailhead playground for Juan’s Developer sandbox.
2023-04-04 12:19:10,320 - INFO - No related goals found
2023-04-04 12:19:12,385 - INFO - Processed paragraph 25 in d13.txt: Clone the GitHub repo.
In VS Code, select Git: Create Branch, then provide a name for the branch. Juan names his branch juan_apex_trigger.
Select SFDX: Authorize an Org.
Select Sandbox for the login URL (test.salesforce.com).
Enter an alias for the sandbox—for example, dev_sandbox.
Log in with the sandbox username and password.
Deploy Ella’s changes to his developer sandbox. Right-click the objects folder, then select SFDX: Deploy Source to Org. Alternately, Juan can run the Salesforce CLI command in the Terminal.
sfdx force:source:deploy --metadata CustomObject:Language_Course_Instructor__c, \
CustomField:Language_Course__c.Course_Instructor__c
Develop the Trigger
In the juan_apex_trigger branch in VS Code, create the directory to put the trigger.
Expand the force-app folder.
Right click default, then select New Folder.
Enter triggers.
Right-click the triggers folder, then click SFDX: Create Apex Trigger.
Enter LanguageCourseTrigger for the trigger name.Enter the code for the trigger:
trigger LanguageCourseTrigger on Language_Course__c (after insert, after update, after delete) {
// <write your own notification code>
}
Save the file.
Create a test for the trigger called TestLanguageCourseTrigger. As a seasoned developer, Juan makes sure that code coverage requirements are met.
Deploy the Changes to the Developer Sandbox
Juan deploys the trigger to validate and compile it, and then tests that it’s working correctly with the new object.
2023-04-04 12:19:12,386 - INFO - Related goals: 2, 20
2023-04-04 12:19:14,050 - INFO - Processed paragraph 26 in d13.txt: In the VS Code Terminal, right-click the triggers folder, then select SFDX: Deploy Source to Org.Alternately, Juan can run the CLI command from the Terminal.
sfdx force:source:deploy --sourcepath force-app/main/default/triggers
In VS Code, the left side shows the new directory structure created after the source:deploy command for the trigger: force-app/main/default/triggers. The right side shows the Terminal window where the command was run as well as the resulting CLI output.
Juan verifies that he captured all the changes and they work in the sandbox.
Juan adds his changes to the change list.
Metadata Entity	Object	Change Type (Create, Update, Delete)	Details
CustomObject	Language_Course_Instructor__c	Create	Object to capture who is teaching the course
CustomField	Course_Instructor__c	Create	Master-detail relationship with Language_Course__c custom object
ApexTrigger	LanguageCourseTrigger	Create	Emails Sales team when Language_Course__c object is created, updated, or deleted
ApexClass	TestLanguageCourseTrigger	Create	Apex test coverage for the trigger
Commit the Changes to the Source Control Repository
Juan commits his changes to the repo, then creates a pull request. Ella performs the code review.
2023-04-04 12:19:14,051 - INFO - Related goals: 2, 22
2023-04-04 12:19:16,043 - INFO - Processed paragraph 27 in d13.txt: Plan the Next Release
Juan and Ella follow the same process for future customizations. If they develop customizations in VS Code, such as Juan’s trigger work, they deploy them to their Developer sandboxes for validation and testing.
2023-04-04 12:19:16,043 - INFO - No related goals found
2023-04-04 12:19:18,509 - INFO - Processed paragraph 28 in d13.txt: They use Setup for everything else, so they can take advantage of builders and wizards and declarative interfaces. And then they retrieve those changes from the sandbox to their local file systems. They commit their changes to source control, create a pull request, and request a code review before merging their changes to the master branch.
2023-04-04 12:19:18,509 - INFO - No related goals found
2023-04-04 12:19:20,234 - INFO - Processed paragraph 29 in d13.txt: Resources
2023-04-04 12:19:20,234 - INFO - No related goals found
2023-04-04 12:19:21,632 - INFO - Processed paragraph 0 in d14.txt: Test and Deploy Changes
2023-04-04 12:19:21,632 - INFO - No related goals found
2023-04-04 12:19:24,371 - INFO - Processed paragraph 1 in d14.txt: Learning Objectives
After completing this unit, you’ll be able to:
Convert your source to the proper format to deploy to production.
Explain the commands used to deploy changes to your org.
Describe how to speed up deployments with Quick Deploy.
Create the Release Artifact
Now that they’ve finished their development tasks, Juan and Ella move their changes to an environment they share with the rest of the development team. They transition to the build release phase to integrate their changes in a Developer Pro sandbox.
2023-04-04 12:19:24,372 - INFO - No related goals found
2023-04-04 12:19:26,454 - INFO - Processed paragraph 2 in d14.txt: After they’re done with these tests, Juan builds the final release artifact, the metadata source that contains all their changes, and they perform user-acceptance testing in a Full sandbox. Juan and Ella run a final verification to make sure that everything looks good. Finally, they plan and execute the deployment to production.
2023-04-04 12:19:26,454 - INFO - Related goals: 2, 22
2023-04-04 12:19:27,472 - INFO - Processed paragraph 3 in d14.txt: Pull the Changes from the Repo
Juan knows the source of truth (all the changes for this release) now lives in their GitHub repo.
2023-04-04 12:19:27,472 - INFO - No related goals found
2023-04-04 12:19:29,689 - INFO - Processed paragraph 4 in d14.txt: In VS Code, click the Source Control icon (1). Pull all changes from the Git repo by 1) click Source Control icon, 2) click More Actions icon, and then 3) select Pull from.
Click the More Actions icon (2), then select Pull from (3).
Select origin.
The repository contains the new custom object, custom field, and triggers. All of Ella’s and Juan’s changes are here.The repository displays the language-courses project structure. The new custom object and custom field appear in force-app/main/default/objects, and the new trigger appears in force-app/main/default/triggers.
Authorize the Developer Pro Sandbox
Note
If you’re following along, sign up for a Developer Edition org or Trailhead playground to use in place of the Developer Pro sandbox.
2023-04-04 12:19:29,689 - INFO - No related goals found
2023-04-04 12:19:32,073 - INFO - Processed paragraph 5 in d14.txt: In VS Code, log in to the Developer Pro sandbox. Select SFDX: Authorize an Org.
Select Sandbox for the login URL (test.salesforce.com).
Enter an alias for the sandbox, for example, dev_pro_sandbox.
Log in with the sandbox username and password.
Build the Release Artifact
Juan’s first task is to build the release artifact so he can deploy the changes to the Developer Pro sandbox. The Zephyrus repo contains the components in DX source format, a granular, decomposed file format to facilitate team development.
2023-04-04 12:19:32,074 - INFO - Related goals: 2, 22
2023-04-04 12:19:36,697 - INFO - Processed paragraph 6 in d14.txt: First, Juan converts the source that he wants to deploy to metadata format, the format required for deploying to an org using the force:mdapi command. He uses a terminal or command window to run Salesforce CLI commands to convert the source and build the release artifact.
2023-04-04 12:19:36,697 - INFO - Related goals: 1, 9, 19
2023-04-04 12:19:42,107 - INFO - Processed paragraph 7 in d14.txt: From a command window, make sure you’re in the Salesforce DX project directory.
On the command line, view the help for the source:convert command.
sfdx force:source:convert --help
The --help tells Juan the format for the command. He indicates in which directory the source exists, and where to put the converted source. He then runs the command to build the .zip artifact.
Run the source:convert command and create an archive of the output:
sfdx force:source:convert --rootdir force-app --outputdir tmp_convert
Create the .zip file of your changes:For Windows:
jar -cfM winter19.zip tmp_convert
For Unix/Linux:
zip -r winter19.zip tmp_convert
For Mac:
zip -r -X winter19.zip tmp_convert
Delete the output directory, tmp_convert. You can remove it quickly on the command line, or use Windows Explorer or Finder if you prefer.For Windows:
rmdir /s tmp_convert
For Mac/Unix/Linux:
rm -r tmp_convert
Test the release artifact in the Developer Pro sandbox.
The .zip file is the release artifact. The command also creates a manifest in the output directory (package.xml). The manifest indicates what changes to include in the build artifact.
2023-04-04 12:19:42,107 - INFO - Related goals: 2, 20
2023-04-04 12:19:43,141 - INFO - Processed paragraph 8 in d14.txt: Note
If you’re following along, your journey ends here. The next steps require the test class, TestLanguageCourseTrigger, which is beyond the scope of this module.
2023-04-04 12:19:43,141 - INFO - No related goals found
2023-04-04 12:19:44,163 - INFO - Processed paragraph 9 in d14.txt: Why Should I Use mdapi:deploy to Deploy My Changes from This Point Forward?
The force:source:deploy command is meant for development use cases when you are interacting with a sandbox for development and local testing. The command is not transactional and attempts to deploy all components. If any change in your project has errors but other changes are valid, the command deploys all changes that are valid and compile. Those changes that can’t compile are not deployed, but the overall command completes successfully.
2023-04-04 12:19:44,163 - INFO - No related goals found
2023-04-04 12:19:48,069 - INFO - Processed paragraph 10 in d14.txt: Instead Juan uses the Salesforce CLI force:mdapi:deploy command to perform integration testing and staging, and then deployment to production. If any component has errors, the command rolls back the entire deployment. This transactional process maintains the integrity of your staging and production environments.
2023-04-04 12:19:48,070 - INFO - Related goals: 2, 22
2023-04-04 12:19:52,510 - INFO - Processed paragraph 11 in d14.txt: Test the Release Artifact in the Test (Partial) Sandbox
Juan once again uses a command window or terminal to run a Salesforce CLI command to deploy the changes to the test sandbox. Juan deploys his changes using a new command, force:mdapi:deploy.
2023-04-04 12:19:52,510 - INFO - Related goals: 1, 9, 19
2023-04-04 12:19:54,661 - INFO - Processed paragraph 12 in d14.txt: Authorize to the Partial sandbox.
Make sure you’re in the Salesforce DX project directory.
On the command line, view the help for the deploy command.
sfdx force:mdapi:deploy --help 
The --help tells Juan the format of the command, and which parameters to include.
Run the deploy command that mimics what you’ll deploy to production:
sfdx force:mdapi:deploy --zipfile winter19.zip --targetusername partial-sandbox \
--testlevel RunSpecifiedTests --runtests TestLanguageCourseTrigger
Run your UI tests, such as selenium tests, if needed.
Open the sandbox:
sfdx force:org:open --targetusername partial-sandbox
Perform user-acceptance tests.
At this stage in the process, Juan cares only about the tests related to the application or changes being deployed. He runs only the tests for the code that is in the deployment artifact.
2023-04-04 12:19:54,661 - INFO - Related goals: 2, 20
2023-04-04 12:19:55,777 - INFO - Processed paragraph 13 in d14.txt: If Juan’s testing passes, he moves to the test release phase, where he conducts regression tests in the staging sandbox.
2023-04-04 12:19:55,778 - INFO - No related goals found
2023-04-04 12:19:57,074 - INFO - Processed paragraph 14 in d14.txt: Test the Release Artifact in the Staging (Full) Sandbox
If Juan makes no changes based on the integration testing, the next step is to stage the changes in a Full sandbox. Juan follows a similar process to deploy the changes to the Full sandbox. This phase includes regression testing and mimics how Juan will release the changes to production.
2023-04-04 12:19:57,074 - INFO - No related goals found
2023-04-04 12:19:58,223 - INFO - Processed paragraph 15 in d14.txt: Because Juan doesn’t find any errors during the test phase, he uses the same artifact (.zip file). If he found errors during the test phase, he’d fix them and create a new release artifact.
2023-04-04 12:19:58,224 - INFO - No related goals found
2023-04-04 12:19:59,236 - INFO - Processed paragraph 16 in d14.txt: First he runs a regression analysis by doing a check-only deploy to the org that executes all tests. After he runs all the regression tests, he runs a quick deploy to mimic exactly the steps he’ll take to deploy to production. He does this all using the CLI.
2023-04-04 12:19:59,236 - INFO - No related goals found
2023-04-04 12:20:00,257 - INFO - Processed paragraph 17 in d14.txt: By validating the components successfully in the staging environment, Juan has a shorter maintenance window that blocks user access to the system when the customizations get deployed to production.
2023-04-04 12:20:00,257 - INFO - No related goals found
2023-04-04 12:20:01,343 - INFO - Processed paragraph 18 in d14.txt: Authorize to the Full sandbox.
Run all local (regression) tests to validate the deployment without saving the components in the target org. A validation enables you to verify the results of tests that would be executed in a deployment, but doesn’t commit any changes.
sfdx force:mdapi:deploy --checkonly --zipfile winter19.zip --targetusername full-sandbox \
--testlevel RunLocalTests
Test the actual production deployment steps in the staging sandbox. Juan sets up the same quick deploy that he plans to execute against the production org.
sfdx force:mdapi:deploy --checkonly --zipfile winter19.zip --targetusername full-sandbox \
--testlevel RunSpecifiedTests --runtests TestLanguageCourseTrigger
This command returns a job ID that you’ll need to reference in the quick deploy.
Next, he tests the quick deploy using the job ID returned in the previous step.
sfdx force:mdapi:deploy --targetusername full-sandbox --validateddeployrequestid jobID
Release to Production
Juan and his team are in the home stretch. Now that all their tests have passed in the Full sandbox, they are ready to deploy to production. The Sales team is very excited to see their vision become a reality.
2023-04-04 12:20:01,343 - INFO - No related goals found
2023-04-04 12:20:02,369 - INFO - Processed paragraph 19 in d14.txt: Juan checks the deployment run list and sees that he doesn’t have any pre-deployment tasks to complete. He’s good to go. Once he runs the quick deploy, he has 10 days to perform the deployment to production. Juan sets up the quick deploy for the production org to guarantee there aren’t any issues caused by differences with the staging sandbox. To minimize customer impact, he runs the check-only quick deploy on one evening, and then deploys to production the next evening.
2023-04-04 12:20:02,369 - INFO - No related goals found
2023-04-04 12:20:05,046 - INFO - Processed paragraph 20 in d14.txt: Authorize to the production org.
Set up the quick deploy:
sfdx force:mdapi:deploy --checkonly --zipfile winter19.zip --targetusername production-org \
--testlevel RunSpecifiedTests --runtests TestLanguageCourseTrigger
This command returns a job ID that you’ll need to reference in the quick deploy.
Run the quick deploy:
sfdx force:mdapi:deploy --targetusername production-org --validateddeployrequestid jobID
Once the tests are run, Juan verifies that all the Apex tests have passed, and that the tests cover at least 75% of the code being deployed.
Open the production org.
Perform Post-Deployment Tasks Listed in Deployment Run List
Juan looks at the deployment run list again to review which post-deployment tasks to perform in the production org.
2023-04-04 12:20:05,046 - INFO - No related goals found
2023-04-04 12:20:06,086 - INFO - Processed paragraph 21 in d14.txt: Stage (Pre- or Post-)	Entity/Component	Notes	Steps
Pre-deployment	N/A	No tasks required	N/A
Post-deployment	Sales profile	Update permissions so Sales team can view custom object and custom field.	In Setup, edit the Sales team profile. Provide Read access for Language Course Instructors.
Another Successful Rollout!
Calvin does a quick sanity check in the production org. He adds an instructor to one of the courses and validates that the notification email arrives in his inbox.
2023-04-04 12:20:06,086 - INFO - No related goals found
2023-04-04 12:20:07,530 - INFO - Processed paragraph 22 in d14.txt: With all changes reflected in the source control system, the team can provide Calvin with a definitive list of changes to document in the release notes.
2023-04-04 12:20:07,530 - INFO - No related goals found
2023-04-04 12:20:08,560 - INFO - Processed paragraph 23 in d14.txt: Calvin tells the Sales team that the new notification feature is ready to go. He congratulates Ella and Juan on the successful rollout of a key feature that will help the Zephyrus Sales team stay informed with the latest course information. He’s pleased that changes are now stored in a repository, and sees the benefits the repo provides as the team takes on more work.
2023-04-04 12:20:08,560 - INFO - No related goals found
2023-04-04 12:20:10,612 - INFO - Processed paragraph 0 in d2.txt: Understand Execution Context
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:20:10,613 - INFO - No related goals found
2023-04-04 12:20:11,657 - INFO - Processed paragraph 1 in d2.txt: Know which methods to use to invoke Apex
Write a trigger for a Salesforce object
Observe how execution context works by executing code in Developer Console
Understand how governor limits impact design patterns
Understand the importance of working with bulk operations
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-04 12:20:11,658 - INFO - No related goals found
2023-04-04 12:20:13,085 - INFO - Processed paragraph 2 in d2.txt: 
2023-04-04 12:20:13,085 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 12:20:14,154 - INFO - Processed paragraph 3 in d2.txt: (This clip starts at the 16:36 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-04 12:20:14,154 - INFO - No related goals found
2023-04-04 12:20:16,674 - INFO - Processed paragraph 4 in d2.txt: What Is Execution Context?
For ASP.NET applications, code is executed in the context of an application domain. In the Lightning Platform world, code executes within an execution context. In a nutshell, this context represents the time between when the code is executed and when it ends. The important thing for you to understand is that the Apex code you write is not always the only code that is executing.
2023-04-04 12:20:16,674 - INFO - No related goals found
2023-04-04 12:20:18,827 - INFO - Processed paragraph 5 in d2.txt: To understand how this works, you need to know all the ways Apex code can be executed on the platform.
2023-04-04 12:20:18,827 - INFO - No related goals found
2023-04-04 12:20:20,318 - INFO - Processed paragraph 6 in d2.txt: Methods of Invoking Apex
2023-04-04 12:20:20,318 - INFO - No related goals found
2023-04-04 12:20:25,481 - INFO - Processed paragraph 7 in d2.txt: Method	Description
Database Trigger	Invoked for a specific event on a custom or standard object.
Anonymous Apex	Code snippets executed on the fly in Dev Console & other tools.
Asynchronous Apex	Occurs when executing a future or queueable Apex, running a batch job, or scheduling Apex to run at a specified interval.
Web Services	Code that is exposed via SOAP or REST web services.
Email Services	Code that is set up to process inbound email.
Visualforce or Lightning Pages	Visualforce controllers and Lightning components can execute Apex code automatically or when a user initiates an action, such as clicking a button. Lightning components can also be executed by Lightning processes and flows.
Besides invoking Apex code, actions, such as creating a new task, sending an email, performing a field update, or sending an outbound message, can all be triggered by one of the declarative platform features. These actions also run within an execution context.
2023-04-04 12:20:25,481 - INFO - Related goals: 1, 3, 5, 13
2023-04-04 12:20:28,391 - INFO - Processed paragraph 8 in d2.txt: Another important consideration is the context of the user executing the Apex code. By default, Apex executes in system context. Apex code has access to all objects and fields. Object permissions, field-level security, and sharing rules aren’t applied for the current user. You can use the with sharing keyword to specify that the sharing rules for the current user be taken into account for a class. This topic is important, so check out Using the with sharing or without sharing keywords.
2023-04-04 12:20:28,391 - INFO - Related goals: 1, 6, 16, 16
2023-04-04 12:20:30,266 - INFO - Processed paragraph 9 in d2.txt: Trigger Essentials
Before learning more about the execution context, let’s take a step back to introduce you to the world of database triggers. Similar to triggers in SQL Server, Apex database triggers execute programming logic before or after events to records in Salesforce. When defining the trigger, you can specify more than one of the following events:
2023-04-04 12:20:30,266 - INFO - No related goals found
2023-04-04 12:20:32,212 - INFO - Processed paragraph 10 in d2.txt: before insert
before update
before delete
after insert
after update
after delete
after undelete
The basic syntax for a trigger looks like the following:
2023-04-04 12:20:32,212 - INFO - No related goals found
2023-04-04 12:20:33,308 - INFO - Processed paragraph 11 in d2.txt: trigger TriggerName on ObjectName (trigger_events) {
   // code_block
}
Now, we know how much .NET developers love to solve problems with code, but we have a super big productivity tip for you here. You only want to resort to using a trigger when you are absolutely sure that the same thing cannot be accomplished with one of our point-and-click automation tools.
2023-04-04 12:20:33,308 - INFO - No related goals found
2023-04-04 12:20:34,372 - INFO - Processed paragraph 12 in d2.txt: To make your life easier, the Salesforce platform includes a powerful automation tool, Flow Builder, for managing business logic without writing code. In most cases, tasks that could once upon a time only be accomplished with a trigger are now better suited for one of the automation tools.
2023-04-04 12:20:34,373 - INFO - No related goals found
2023-04-04 12:20:35,428 - INFO - Processed paragraph 13 in d2.txt: Note
Note
If you’re a developer new to the platform, definitely take the time to check out the Approve Records with Approval Processes module in the Developer Beginner trail before creating a trigger. We’re pretty sure that you don’t want to be known as the guy or gal who brought a lot of unnecessary technical overhead into the Salesforce org.
2023-04-04 12:20:35,428 - INFO - No related goals found
2023-04-04 12:20:37,381 - INFO - Processed paragraph 14 in d2.txt: Mark Execution Context
To better understand execution context, let’s walk through creating an Apex database trigger that creates an opportunity when a new account is entered. This trigger calls a method from a handler class, so we first need to create that.
2023-04-04 12:20:37,381 - INFO - Related goals: 9
2023-04-04 12:20:40,526 - INFO - Processed paragraph 15 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > New > Apex Class.
Enter AccountHandler for the class name and click OK.
Delete the existing code, and insert the following snippet:
public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            insert opp;
        }
    }
}
Press Ctrl + S to save your class.
Note
Note
It’s considered a best practice to use only one trigger per object, which you see in the following example. You can then use context-specific handler methods within triggers to create logic-less triggers. By adopting this practice, you can avoid the common pitfalls that new developers fall into. To learn more about these techniques, check out Trigger Frameworks and Apex Trigger Best Practices.
2023-04-04 12:20:40,526 - INFO - Related goals: 9
2023-04-04 12:20:41,956 - INFO - Processed paragraph 16 in d2.txt: So now that we have the handler class, we create the Account trigger.
2023-04-04 12:20:41,956 - INFO - No related goals found
2023-04-04 12:20:43,722 - INFO - Processed paragraph 17 in d2.txt: In Developer Console, select File > New > Apex Trigger.
Enter AccountTrigger as the name, and select Account as the sObject.
Click Submit.
Delete the existing code, and insert the following snippet:
trigger AccountTrigger on Account (before insert, before update, before
    delete, after insert, after update, after delete,  after undelete) {
    if (Trigger.isAfter && Trigger.isInsert) {
        AccountHandler.CreateNewOpportunity(Trigger.New);
    }
}
Press Ctrl + S to save your trigger.
To complete the walkthrough, we execute anonymous code to simulate a user entering a new Account using the Salesforce interface. Remember, Apex code can be executed a number of different ways.
2023-04-04 12:20:43,723 - INFO - No related goals found
2023-04-04 12:20:46,141 - INFO - Processed paragraph 18 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
Account acct = new Account(
    Name='Test Account 2',
    Phone='(415)555-8989',
    NumberOfEmployees=50,
    BillingCity='San Francisco');
insert acct;
Make sure that the Open Log option is selected and click Execute. A new tab shows the execution log. Keep it open so that you can examine it carefully.
Examining the Execution Log
Notice that the first line in the execution log marks the EXECUTION_STARTED event and that the last line is the EXECUTION_FINISHED event. Everything in between is the execution context.
2023-04-04 12:20:46,141 - INFO - Related goals: 1, 2, 21
2023-04-04 12:20:47,225 - INFO - Processed paragraph 19 in d2.txt: Let’s take a closer look at what happens. A CODE_UNIT_STARTED event marks when the code from the Execute Anonymous window was kicked off. This line is highlighted in red in the image below.
2023-04-04 12:20:47,226 - INFO - No related goals found
2023-04-04 12:20:49,429 - INFO - Processed paragraph 20 in d2.txt: Screenshot of the Debug Log in Developer Console, highlighting the code_unit_started events
2023-04-04 12:20:49,429 - INFO - No related goals found
2023-04-04 12:20:50,478 - INFO - Processed paragraph 21 in d2.txt: The second CODE_UNIT_STARTED line that is highlighted represents when code for the BeforeInsert event was executed.
2023-04-04 12:20:50,478 - INFO - No related goals found
2023-04-04 12:20:53,056 - INFO - Processed paragraph 22 in d2.txt: You can’t see this in the image, but if you’re following along with your own instance of Developer Console, scroll down further in the results and look for other instances of CODE_UNIT_STARTED. You should see at least one more instance representing when code for the AfterInsert event was executed. If you had created workflow rules that fired when a new account was created, they too would show up in the execution log. All this code operates under the same execution context, and thus, is subject to the same set of governor limits.
2023-04-04 12:20:53,056 - INFO - No related goals found
2023-04-04 12:20:55,671 - INFO - Processed paragraph 23 in d2.txt: You may be asking yourself, why is this so important to understand? Well, because Salesforce is a multi-tenanted environment, those governor limits are vital in keeping each instance of a Salesforce org from consuming too many resources. Essentially, they keep the whole system from crashing.
2023-04-04 12:20:55,671 - INFO - Related goals: 2
2023-04-04 12:21:00,354 - INFO - Processed paragraph 24 in d2.txt: Working with Limits
And this brings us back to the subject of working with limits. The two limits you will probably be the most concerned with involve the number of SOQL queries or DML statements. These tend to trip up developers new to the platform, so we wanted to spend some extra time focusing on how to avoid them.
2023-04-04 12:21:00,354 - INFO - Related goals: 8
2023-04-04 12:21:01,862 - INFO - Processed paragraph 25 in d2.txt: Note
Note
There are lots of limits to be aware of, and they tend to change with each major release. Additionally, it’s not uncommon for limits to get looser rather than tighter, so be sure to check out the latest by looking at the Execution Governors and Limits link in Resources.
2023-04-04 12:21:01,862 - INFO - No related goals found
2023-04-04 12:21:06,295 - INFO - Processed paragraph 26 in d2.txt: Working in Bulk
Many developers fall into a common trap of designing their code to work with a single record. They quickly learn that on the Lightning Platform this can be a huge mistake.
2023-04-04 12:21:06,295 - INFO - Related goals: 1, 8, 18
2023-04-04 12:21:08,095 - INFO - Processed paragraph 27 in d2.txt: Apex triggers can receive up to 200 records at once. Currently, the synchronous limit for the total number of SOQL queries is 100, and 150 for the total number of DML statements issued So, if you have a trigger that performs a SOQL query or DML statement inside of a loop and that trigger was fired for a bulk operation, guess what?
2023-04-04 12:21:08,095 - INFO - Related goals: 1, 10
2023-04-04 12:21:09,178 - INFO - Processed paragraph 28 in d2.txt: BOOM!!!
2023-04-04 12:21:09,178 - INFO - No related goals found
2023-04-04 12:21:10,930 - INFO - Processed paragraph 29 in d2.txt: That’s right, you’re going to get a limits error. It’s possible to deploy code and have it run fine for a while before the limit is discovered. The developer then has to quickly go back and figure out how to “bulkify” the code. It’s not uncommon for this second attempt to take longer than the initial design. To avoid this scenario, design your Apex code to handle bulk operations from the very start. Learn about ways to do this from the Bulk Apex Triggers module.
2023-04-04 12:21:10,931 - INFO - Related goals: 9
2023-04-04 12:21:11,991 - INFO - Processed paragraph 30 in d2.txt: Maybe you noticed, maybe you didn’t, but the trigger handler code we created earlier didn’t use a bulk pattern, and therefore it’s prone to limits errors. To remind you, below is what the original code looked like.
2023-04-04 12:21:11,991 - INFO - No related goals found
2023-04-04 12:21:16,933 - INFO - Processed paragraph 31 in d2.txt: public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            insert opp;
        }
    }
}
Notice that the insert DML operation is inside the for loop. This is bad, very bad, and something to always avoid.
2023-04-04 12:21:16,933 - INFO - Related goals: 1, 9, 10
2023-04-04 12:21:18,032 - INFO - Processed paragraph 32 in d2.txt: Luckily for us, we can fix this code by changing it to write to a list variable inside of the loop and then insert the contents of the list in one step.
2023-04-04 12:21:18,033 - INFO - No related goals found
2023-04-04 12:21:23,503 - INFO - Processed paragraph 33 in d2.txt: From Setup, select Your Name > Developer Console to open Developer Console.
In Developer Console, select File > Open.
For the entity type, select Classes. Select AccountHandler as the entity.
Click Open.
Delete the existing code, and insert the following snippet:
public with sharing class AccountHandler {
    public static void CreateNewOpportunity(List<Account> accts) {
        List<Opportunity> opps = new List<Opportunity>();
        for (Account a : accts) {
            Opportunity opp = new Opportunity();
            opp.Name = a.Name + ' Opportunity';
            opp.AccountId = a.Id;
            opp.StageName = 'Prospecting';
            opp.CloseDate = System.Today().addMonths(1);
            opps.add(opp);
        }
        if (opps.size() > 0) {
            insert opps;
        }
    }
}
Press Ctrl + S to save your class.
Now that we fixed the trigger handler code, let’s test to make sure that the trigger can handle a load of 200 records. As we’re sure you know, writing unit tests to ensure that the code works is a best practice.
2023-04-04 12:21:23,503 - INFO - Related goals: 1, 2, 8, 9, 18, 19, 21
2023-04-04 12:21:25,543 - INFO - Processed paragraph 34 in d2.txt: In Developer Console, select File > New > Apex Class.
Enter AccountTrigger_Test for the class name and click OK.
Delete the existing code, and insert the following snippet:
@isTest
private class AccountTrigger_Test {
    @isTest static void TestCreateNewAccountInBulk() {
        // Test Setup data
        // Create 200 new Accounts
        List<Account> accts = new List<Account>();
        for(Integer i=0; i < 200; i++) {
            Account acct = new Account(Name='Test Account ' + i);
            accts.add(acct);
        }              
        // Perform Test
        Test.startTest();
        insert accts;                               
        Test.stopTest();
        // Verify that 200 new Accounts were inserted
        List<Account> verifyAccts = [SELECT Id FROM Account];
        System.assertEquals(200, verifyAccts.size());    
        // Also verify that 200 new Opportunities were inserted
        List<Opportunity> verifyOpps = [SELECT Id FROM Opportunity];                              
        System.assertEquals(200, verifyOpps.size());                             
    }
}
Press Ctrl + S to save your class.
Select Test > New Run.
Select AccountTrigger_Test as the TestClass, and TestCreateNewAccountInBulk as the test method.
Click Run.
Select the Tests tab and verify that the test runs to completion with no failures, as indicated by a green checkmark in the Status column.
Note
Note
Although we haven’t yet talked about unit tests, don’t worry. They work much the same way in the Lightning Platform as they do in .NET, with just a few different keywords. You’ll catch on pretty quickly as to how they’re structured. Learn more about testing Apex triggers by checking out the link in Resources.
2023-04-04 12:21:25,544 - INFO - Related goals: 1, 9, 19
2023-04-04 12:21:26,995 - INFO - Processed paragraph 35 in d2.txt: Tell Me More
Apex uses a familiar try-catch-finally block to handle exceptions. But your catch statement and possible rollback could differ depending on where the Apex code is executed. Check out the link in Resources about best practices when dealing with try, catch, and rollback in Apex.
2023-04-04 12:21:26,995 - INFO - No related goals found
2023-04-04 12:21:28,058 - INFO - Processed paragraph 36 in d2.txt: There is no such thing as an application or session variable in the Lightning Platform. If you need data to persist between classes, you do have static variables, but keep in mind that static variables in the Lightning Platform don’t work the same as they do in .NET. In the Lightning Platform world, a static variable can only persist information within a single execution context, although other options for maintaining data across trigger invocations are available. Check out the Advanced Apex links in Internet Resources to learn more.
2023-04-04 12:21:28,058 - INFO - No related goals found
2023-04-04 12:21:29,113 - INFO - Processed paragraph 37 in d2.txt: When working with limits, there are many tradeoffs to consider, especially for developers of managed packages. By the way, Salesforce partners typically use managed packages to distribute and sell applications. In this module, we just skimmed the surface of what you need to know. If you’re serious about Apex development, check out the Advanced Apex links in Internet Resources.
2023-04-04 12:21:29,113 - INFO - No related goals found
2023-04-04 12:21:30,923 - INFO - Processed paragraph 0 in d3.txt: Use Asynchronous Apex
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:21:30,924 - INFO - No related goals found
2023-04-04 12:21:32,034 - INFO - Processed paragraph 1 in d3.txt: Know when to use Asynchronous Apex
Use future methods to handle a web callout
Work with the batchable interface to process a large number of records
Understand the advantages of using the queueable interface when you need to meet in the middle
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-04 12:21:32,034 - INFO - No related goals found
2023-04-04 12:21:38,586 - INFO - Processed paragraph 2 in d3.txt: 
2023-04-04 12:21:38,586 - INFO - Related goals: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21
2023-04-04 12:21:39,695 - INFO - Processed paragraph 3 in d3.txt: (This clip starts at the 32:07 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-04 12:21:39,695 - INFO - No related goals found
2023-04-04 12:21:40,722 - INFO - Processed paragraph 4 in d3.txt: When to Go Asynchronous
As a .NET developer, you probably have already been exposed to the world of asynchronous programming. We’ll assume that you know what it is and understand the benefits to using this type of programming model. What you might not know is when to use asynchronous programming on the Lightning Platform.
2023-04-04 12:21:40,722 - INFO - No related goals found
2023-04-04 12:21:41,756 - INFO - Processed paragraph 5 in d3.txt: The following three reasons are usually behind choosing asynchronous programming.
2023-04-04 12:21:41,757 - INFO - No related goals found
2023-04-04 12:21:43,269 - INFO - Processed paragraph 6 in d3.txt: Processing a very large number of records. This reason is unique to the multi-tenanted world of the Lightning Platform where limits rule. The limits associated with asynchronous processes are higher than those with synchronous processes. Therefore, if you need to process thousands or even millions of records, asynchronous processing is your best bet.
Making callouts to external web services. Callouts can take a long time to process, but in the Lightning Platform, triggers can’t make callouts directly.
Creating a better and faster user experience by offloading some processing to asynchronous calls. Why do everything at once? If it can wait, let it.
Future Methods
In situations where you need to make a callout to a web service or want to offload simple processing to an asynchronous task, creating a future method could be the way to go.
2023-04-04 12:21:43,269 - INFO - Related goals: 5
2023-04-04 12:21:47,593 - INFO - Processed paragraph 7 in d3.txt: Changing a method from synchronous to asynchronous processing is amazingly easy. Essentially, you just add the @future annotation to your method. Other than that, just make sure that the method is static and returns only a void type. For example, to create a method for performing a web service callout, we could do something like this:
2023-04-04 12:21:47,594 - INFO - Related goals: 7
2023-04-04 12:21:53,160 - INFO - Processed paragraph 8 in d3.txt: public class MyFutureClass {
    // Include callout=true when making callouts
    @future(callout=true)    
    static void myFutureMethod(Set<Id> ids) {
        // Get the list of contacts in the future method since
        // you cannot pass objects as arguments to future methods
        List<Contact> contacts = [SELECT Id, LastName, FirstName, Email
            FROM Contact WHERE Id IN :ids];
        // Loop through the results and call a method
        // which contains the code to do the actual callout
        for (Contact con: contacts) {
            String response = anotherClass.calloutMethod(con.Id,
                con.FirstName,
                con.LastName,
                con.Email);
            // May want to add some code here to log
            // the response to a custom object
        }
    }
}
We could then call it just like we would any other static method. Easy peasy!
2023-04-04 12:21:53,160 - INFO - Related goals: 1, 9, 19
2023-04-04 12:21:54,591 - INFO - Processed paragraph 9 in d3.txt: Future Limitations
Future methods have been around for several years. Although they offer a great option for Salesforce developers, they’re not without drawbacks. Here are some limitations to consider before using a future method.
2023-04-04 12:21:54,592 - INFO - No related goals found
2023-04-04 12:21:55,569 - INFO - Processed paragraph 10 in d3.txt: You can’t track execution because no Apex job ID is returned.
Parameters must be primitive data types, arrays of primitive data types, or collections of primitive data types. Future methods can’t take objects as arguments.
You can’t chain future methods and have one call another.
Although asynchronous calls are sometimes done to avoid limits, you still need to consider limits. Check out the link concerning Execution Governors and Limits in Resources.
2023-04-04 12:21:55,569 - INFO - No related goals found
2023-04-04 12:21:59,706 - INFO - Processed paragraph 11 in d3.txt: Batch or Scheduled Apex
Another long-used asynchronous tool is the batchable interface. The No. 1 reason to use it is if you need to process a large number of records. For example, if you want to clean up or archive up to 50 million records, the batchable interface is your answer. You can even schedule your batches to run at a particular time.
2023-04-04 12:21:59,706 - INFO - Related goals: 1, 8, 18
2023-04-04 12:22:01,347 - INFO - Processed paragraph 12 in d3.txt: To use it, your class implements the Database.Batchable interface. You also define start(), execute(), and finish() methods. You can then invoke a batch class using the Database.executeBatch method. For example, the following code creates a batchable class that processes all accounts in an org and then sends an email when it is done.
2023-04-04 12:22:01,348 - INFO - No related goals found
2023-04-04 12:22:06,026 - INFO - Processed paragraph 13 in d3.txt: global class MyBatchableClass implements
            Database.Batchable<sObject>,
            Database.Stateful {  
    // Used to record the total number of Accounts processed
    global Integer numOfRecs = 0;
    // Used to gather the records that will be passed to the interface method
    // This method will only be called once and will return either a
    // Database.QueryLocator object or an Iterable that contains the records
    // or objects passed to the job.            
    global Database.QueryLocator start(Database.BatchableContext bc) {
        return Database.getQueryLocator('SELECT Id, Name FROM Account');                
    }
    // This is where the actual processing occurs as data is chunked into
    // batches and the default batch size is 200.
    global void execute(Database.BatchableContext bc, List<Account> scope) {
        for (Account acc : scope) {
            // Do some processing here
            // and then increment the counter variable
            numOfRecs = numOfRecs + 1;
        }     
    }
    // Used to execute any post-processing that may need to happen. This
    // is called only once and after all the batches have finished.
    global void finish(Database.BatchableContext bc) {
        EmailManager.sendMail('someAddress@somewhere.com',
                              numOfRecs + ' Accounts were processed!',
                              'Meet me at the bar for drinks to celebrate');            
    }
}
You could then invoke the batch class using anonymous code such as this:
2023-04-04 12:22:06,027 - INFO - Related goals: 1, 9, 19
2023-04-04 12:22:07,807 - INFO - Processed paragraph 14 in d3.txt: MyBatchableClass myBatchObject = new MyBatchableClass();
Database.executeBatch(myBatchObject);
Note
Note
We didn’t specifically cover Scheduled Apex in this unit, but it’s similar to the batchable interface. It implements the schedulable interface, and you can use it to invoke Apex at specific times. Learn more about it by checking out the Asynchronous Apex  module.
2023-04-04 12:22:07,807 - INFO - No related goals found
2023-04-04 12:22:08,901 - INFO - Processed paragraph 15 in d3.txt: Batchable Limitations
The batchable interface is great, but as with just about everything, consider its limitations.
2023-04-04 12:22:08,901 - INFO - No related goals found
2023-04-04 12:22:09,919 - INFO - Processed paragraph 16 in d3.txt: Troubleshooting can be troublesome.
Jobs are queued and subject to server availability, which can sometimes take longer than anticipated.
Have we talked about limits yet?
And Then There Was Queueable Apex
For a long time, future methods and the batchable interface were the primary ways developers had to do asynchronous processing. But remember all those limitations we talked about? Well, they were causing problems for some developers, so there was an outcry for a better solution.
2023-04-04 12:22:09,919 - INFO - No related goals found
2023-04-04 12:22:10,931 - INFO - Processed paragraph 17 in d3.txt: In Winter ’15, Salesforce responded with Queueable Apex. It represents the best of future methods and the batchable interface, all rolled up into one super-duper asynchronous tool. Developers forced to use the slower batchable interface to get around limitations of future methods could now return to a tool that made more sense. Queueable Apex provides the following benefits to future methods.
2023-04-04 12:22:10,931 - INFO - No related goals found
2023-04-04 12:22:11,989 - INFO - Processed paragraph 18 in d3.txt: Non-primitive types - Classes can accept parameter variables of non-primitive data types, such as sObjects or custom Apex types.
Monitoring - When you submit your job, a jobId is returned that you can use to identify the job and monitor its progress.
Chaining jobs - You can chain one job to another job by starting a second job from a running job. Chaining jobs is useful for sequential processing.
So how does it work? Glad you asked.
2023-04-04 12:22:11,990 - INFO - No related goals found
2023-04-04 12:22:13,350 - INFO - Processed paragraph 19 in d3.txt: Because Queueable Apex includes the best of future methods, it’s much easier to implement than Batch Apex. It just doesn’t have those pesky limitations we talked about. To demonstrate how it works, let’s take the sample code that used a future method to do a web callout and implement it using Queueable Apex.
2023-04-04 12:22:13,350 - INFO - No related goals found
2023-04-04 12:22:19,117 - INFO - Processed paragraph 20 in d3.txt: public class MyQueueableClass implements Queueable {
    private List<Contact> contacts;
    // Constructor for the class, where we pass
    // in the list of contacts that we want to process
    public MyQueueableClass(List<Contact> myContacts) {
        contacts = myContacts;
    }
    public void execute(QueueableContext context) {
        // Loop through the contacts passed in through
        // the constructor and call a method
        // which contains the code to do the actual callout
        for (Contact con: contacts) {
            String response = anotherClass.calloutMethod(con.Id,
                    con.FirstName,
                    con.LastName,
                    con.Email);
            // May still want to add some code here to log
            // the response to a custom object
        }
    }
}
To invoke Queueable Apex, you need something like the following:
2023-04-04 12:22:19,118 - INFO - Related goals: 1, 8, 18
2023-04-04 12:22:25,037 - INFO - Processed paragraph 21 in d3.txt: List<Contact> contacts = [SELECT Id, LastName, FirstName, Email
    FROM Contact WHERE Is_Active__c = true];
Id jobId = System.enqueueJob(new MyQueueableClass(contacts));
Tell Me More
Along with queueable interfaces, Salesforce also introduced the Apex Flex Queue in Spring ’15, which eliminated the limitation of five concurrent batches. It also allows developers to monitor and manage the order of queued jobs. Check the links in Resources for more info.
2023-04-04 12:22:25,038 - INFO - Related goals: 1, 3, 5, 13, 15
2023-04-04 12:22:26,064 - INFO - Processed paragraph 22 in d3.txt: This module introduced .NET developers to the asynchronous options available on the Lightning Platform. For a deep dive on this topic, including testing, monitoring jobs, and best practices, check out the Asynchronous Apex module.
2023-04-04 12:22:26,064 - INFO - No related goals found
2023-04-04 12:22:27,141 - INFO - Processed paragraph 0 in d4.txt: Debug and Run Diagnostics
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:22:27,142 - INFO - No related goals found
2023-04-04 12:22:29,230 - INFO - Processed paragraph 1 in d4.txt: Understand which debugging features are available on the Lightning Platform
Use the Log Inspector in Developer Console to examine debug logs
Follow Along with Trail Together
Want to follow along with an expert as you work through this step? Take a look at this video, part of the Trail Together series.
2023-04-04 12:22:29,230 - INFO - No related goals found
2023-04-04 12:22:37,239 - INFO - Processed paragraph 2 in d4.txt: 
2023-04-04 12:22:37,239 - INFO - Related goals: 1, 8, 18
2023-04-04 12:22:38,265 - INFO - Processed paragraph 3 in d4.txt: (This clip starts at the 40:30 minute mark, in case you want to rewind and watch the beginning of the step again.)
2023-04-04 12:22:38,265 - INFO - No related goals found
2023-04-04 12:22:39,224 - INFO - Processed paragraph 4 in d4.txt: Taking a Step Back
We’re not going to try and tell you that debugging on the Lightning Platform is just as easy as it is in Visual Studio. To be perfectly honest, it’s not even close. Debugging in a multi-tenant cloud environment presents unique challenges. That doesn’t mean you can’t do debugging and diagnostic work on the Lightning Platform. It’s just that debugging is different from what you’re used to. The good news is that in this area Salesforce has made enormous strides recently, and more is coming with every release.
2023-04-04 12:22:39,225 - INFO - No related goals found
2023-04-04 12:22:40,253 - INFO - Processed paragraph 5 in d4.txt: Your Friend, the Debug Log
In the world of the Lightning Platform, the debug log is where you find most of what you need to debug and analyze your code. You’ve already seen how you can write to the debug log. That is done with something like the following.
2023-04-04 12:22:40,253 - INFO - No related goals found
2023-04-04 12:22:42,854 - INFO - Processed paragraph 6 in d4.txt: System.debug('My Debug Message');
You can also specify one of the following logging levels.
2023-04-04 12:22:42,855 - INFO - No related goals found
2023-04-04 12:22:43,888 - INFO - Processed paragraph 7 in d4.txt: NONE
ERROR
WARN
INFO
DEBUG
FINE
FINER
FINEST
These levels run from lowest to highest and are cumulative. So if you pick the finest level, you get all messages that are logged as error, warn, info, and so on. There are also several debug log categories, and the amount of information logged depends on the log level. Learn more about debugging for different users by checking out the links in Resources.
2023-04-04 12:22:43,888 - INFO - No related goals found
2023-04-04 12:22:45,837 - INFO - Processed paragraph 8 in d4.txt: And why is all this so important to know?
2023-04-04 12:22:45,837 - INFO - No related goals found
2023-04-04 12:22:46,979 - INFO - Processed paragraph 9 in d4.txt: Ok, so we know you’ve heard a lot about limits, but understanding limits are critical to your success, so bear with us. Each debug log must be 20 MB or smaller. If it exceeds this amount, you won’t see everything you need. Additionally, each org can retain up to 1,000 MB of debug logs. The oldest logs are overwritten.
2023-04-04 12:22:46,979 - INFO - No related goals found
2023-04-04 12:22:49,363 - INFO - Processed paragraph 10 in d4.txt: Because debug logs are your primary way of getting debug information about your application, you want to make sure to not exceed these limits. If you never see an error message, you can’t possibly do anything to address it. Check out the links in Resources about Advanced Apex Debugging and Best Practices for tips on how to avoid these kinds of issues.
2023-04-04 12:22:49,363 - INFO - No related goals found
2023-04-04 12:22:50,401 - INFO - Processed paragraph 11 in d4.txt: Use the Log Inspector
Developer Console has grown quite a bit in the past few releases. One of its more useful features is the Log Inspector. To see how it works, let’s walk through running some anonymous code and viewing the results.
2023-04-04 12:22:50,401 - INFO - No related goals found
2023-04-04 12:22:54,883 - INFO - Processed paragraph 12 in d4.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select Debug > Change Log Levels.
Click the Add/Change link in General Trace Setting for You.
Select INFO as the debug level for all columns.
Click Done.
Click Done.
Select Debug > Perspective Manager.
Select All (Predefined) and click Set Default.
Click Yes to change this to your default perspective.
Close the Developer Console Perspective window.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
System.debug(LoggingLevel.INFO, 'My Info Debug Message');
System.debug(LoggingLevel.FINE, 'My Fine Debug Message');
List<Account> accts = [SELECT Id, Name FROM Account];
for(Account a : accts) {
    System.debug('Account Name: ' + a.name);
    System.debug('Account Id: ' + a.Id);
}
Make sure that Open Log is selected, and click Execute.
Select Debug > Switch Perspective > All (Predefined).
Examine the results in the Timeline and Executed Units tabs.
Under Execution Log, select the Filter option, and enter FINE. Because we set the debug level to INFO for Apex Code, no results appear.
Select Debug > Change Log Levels.
Click the Add/Change link in General Trace Setting for You.
Change the DebugLevel for ApexCode and Profiling to FINEST.
Click Done.
Click Done.
Select Debug > Open Execute Anonymous Window.
Leave the code that is currently there, and click Execute.
Under Execution Log, select the Filter option, and enter FINE. The filter search is case sensitive. You now see "My Fine Debug Message" displayed. You should also notice a size difference between the two latest logs in the Logs tab.
Set Checkpoints
As a .NET developer, you’re used to setting breakpoints in your applications. But in a cloud-based, multi-tenanted environment where everyone is sharing resources, allowing everyone to halt execution and keep database connections open is disastrous.
2023-04-04 12:22:54,884 - INFO - Related goals: 1, 2, 21
2023-04-04 12:22:55,968 - INFO - Processed paragraph 13 in d4.txt: Checkpoints are similar to breakpoints in that they reveal a lot of detailed execution information about a line of code. They just don’t stop execution on that line.
2023-04-04 12:22:55,968 - INFO - No related goals found
2023-04-04 12:22:56,995 - INFO - Processed paragraph 14 in d4.txt: To see how they work, let’s walk through setting a checkpoint on a line of code that you created in an earlier unit on Understanding Execution Context. If you haven’t created the handler and trigger code for the AccountTrigger, go back to that unit and complete that section before continuing.
2023-04-04 12:22:56,995 - INFO - No related goals found
2023-04-04 12:23:00,484 - INFO - Processed paragraph 15 in d4.txt: From Setup, select Your Name > Developer Console to open Developer Console.
Select File > Open.
Select Classes as the entity type, and AccountHandler as the entity.
Click Open.
Position your cursor over line 10 in the left margin and click once. A red dot appears next to the line number.
Double-click the latest entry in the Logs panel to open the debug log.
Select Debug > Open Execute Anonymous Window.
Delete the existing code, and insert the following snippet:
Account acct = new Account(
    Name='Test Account 3',
    Phone='(415)555-8989',
    NumberOfEmployees=30,
    BillingCity='San Francisco');
insert acct;
Make sure that Open Log is selected, and click Execute.
Click the Checkpoints tab, and double-click the first entry that appears. The Checkpoint Inspector appears.
On the Symbols tab, expand the nodes within the execution tree. Notice the Key and Value columns.
Click the Heap tab. Notice the Count and Total Size columns.
What's Next?
Now that you have a grasp of Apex basics you are ready to continue to your Salesforce journey. Head on over to our Developer Beginner Trail to leverage your existing development skills to build apps fast on the Salesforce Platform.
2023-04-04 12:23:00,485 - INFO - Related goals: 1, 2, 21
2023-04-04 12:23:02,251 - INFO - Processed paragraph 16 in d4.txt: Resources
Debug Log in the Apex Code Developer’s Guide
Working with Logs in the Apex Code Developer’s Guide
Examples of Using the Log Inspector
Setting Checkpoints in Apex Code
2023-04-04 12:23:02,251 - INFO - No related goals found
2023-04-04 12:23:04,333 - INFO - Processed paragraph 0 in d5.txt: Import Data
2023-04-04 12:23:04,333 - INFO - No related goals found
2023-04-04 12:23:05,426 - INFO - Processed paragraph 1 in d5.txt: Learning Objectives
After completing this unit, you'll be able to:
Describe and compare the different options for importing data into Salesforce.
List the steps involved in preparing and importing data from a sample .csv file using the Data Import Wizard.
Note
Accessibility
This unit requires some additional instructions for screen reader users. To access a detailed screen reader version of this unit, click the link below:
2023-04-04 12:23:05,426 - INFO - No related goals found
2023-04-04 12:23:06,457 - INFO - Processed paragraph 2 in d5.txt: Open Trailhead screen reader instructions.
2023-04-04 12:23:06,457 - INFO - No related goals found
2023-04-04 12:23:07,578 - INFO - Processed paragraph 3 in d5.txt: Introduction to Data Import
You can easily import external data into Salesforce. Supported data sources include any program that can save data in the comma delimited text format (.csv).
2023-04-04 12:23:07,578 - INFO - No related goals found
2023-04-04 12:23:08,616 - INFO - Processed paragraph 4 in d5.txt: Salesforce offers two main methods for importing data.
2023-04-04 12:23:08,616 - INFO - No related goals found
2023-04-04 12:23:10,247 - INFO - Processed paragraph 5 in d5.txt: Data Import Wizard—this tool, accessible through the Setup menu, lets you import data in common standard objects, such as contacts, leads, accounts, as well as data in custom objects. It can import up to 50,000 records at a time. It provides a simple interface to specify the configuration parameters, data sources, and the field mappings that map the field names in your import file with the field names in Salesforce.
Data Loader—this is a client application that can import up to five million records at a time, of any data type, either from files or a database connection. It can be operated either through the user interface or the command line. In the latter case, you need to specify data sources, field mappings, and other parameters via configuration files. This makes it possible to automate the import process, using API calls.
Note
With both methods, the number of records you can import depends on your permissions, the type of data you’re importing, and the overall data storage limits for your organization. The type of objects you can import depends on your edition.
2023-04-04 12:23:10,248 - INFO - Related goals: 4
2023-04-04 12:23:11,653 - INFO - Processed paragraph 6 in d5.txt: Use the Data Import Wizard When:
You need to load less than 50,000 records.
The objects you need to import are supported by the wizard.
You don’t need the import process to be automated.
Use Data Loader When:
You need to load 50,000 to five million records. If you need to load more than 5 million records, we recommend you work with a Salesforce partner or visit the AppExchange for a suitable partner product.
You need to load into an object that is not supported by the Data Import Wizard.
You want to schedule regular data loads, such as nightly imports.
Note
Data Loader uses the SOAP API to process records. For faster processing, you can configure it to use the Bulk API instead. The Bulk API is optimized to load a large number of records simultaneously. It is faster than the SOAP API due to parallel processing and fewer network round-trips.
2023-04-04 12:23:11,654 - INFO - Related goals: 4
2023-04-04 12:23:13,414 - INFO - Processed paragraph 7 in d5.txt: Prepare for Data Import
Cloud Kicks manufactures custom sneakers, designed and personalized for their customers. Sales superstars Candace and Jose are always eager to get fresh air and exercise, so they schedule a walking meeting with Linda, the company’s Salesforce admin. They want Linda’s help to bring their CRM data into Salesforce. Because they have fewer than 50,000 records, Linda decides to use the Data Import Wizard. When she gets back to her desk after the walk, she preps the data for import.
2023-04-04 12:23:13,414 - INFO - Related goals: 4
2023-04-04 12:23:15,058 - INFO - Processed paragraph 8 in d5.txt: Jose and Candace talk to Linda about importing their data
2023-04-04 12:23:15,058 - INFO - No related goals found
2023-04-04 12:23:16,565 - INFO - Processed paragraph 9 in d5.txt: Follow these steps before you start importing any data.
Use your existing software to create an export file. You'll use this exported data file to now import the data into Salesforce.
Clean up the import file for accuracy and consistency. This involves updating the data to remove duplicates, delete unnecessary information, correct spelling and other errors, and enforce naming conventions.
Compare your data fields with the Salesforce fields you can import into, and verify that your data will be mapped into the appropriate Salesforce fields. You might need to fine-tune the mapping before starting the import. For details, see Field Mapping for Data Sources in the online help.
Make any configuration changes required in Salesforce to handle the imported data. For example, you might need to create new custom fields, add new values to picklists, or temporarily deactivate workflow rules.
Note
Salesforce recommends you import using a small test file first to make sure you’ve prepared your source data correctly.
2023-04-04 12:23:16,565 - INFO - Related goals: 4
2023-04-04 12:23:17,626 - INFO - Processed paragraph 10 in d5.txt: View the second video "Data Import: Clean Up Your Import File" in the How To Import Data into Salesforce Series for more information on cleaning up your import file.
2023-04-04 12:23:17,626 - INFO - No related goals found
2023-04-04 12:23:19,128 - INFO - Processed paragraph 11 in d5.txt: Use the Data Import Wizard
Once you have created an export file and cleaned up the data for import, follow these steps to import data using the Data Import Wizard.
Start the wizard.
From Setup, enter Data Import Wizard in the Quick Find box, then select Data Import Wizard. 
Review the information provided on the welcome page, then click Launch Wizard!
Choose the data that you want to import.
To import accounts, contacts, leads, solutions, person accounts, or campaign members, click Standard Objects. To import custom objects, click Custom Objects.
Specify whether you want to add new records to Salesforce, update existing records, or add and update records simultaneously.
Specify matching and other criteria as necessary. Hover over the question marks for more information about each option.
Specify the file that contains your data. You can specify your data file by dragging the CSV to the upload area of the page or by clicking the CSV category you’re using and then navigating to and selecting the file.
Choose a character encoding method for your file. Most users can accept the default character encoding.
Click Next. 
Map your data fields to Salesforce data fields. The Data Import Wizard tries to map as many of your data fields as possible to standard Salesforce data fields. If Salesforce can’t automatically map fields, however, you do it manually. Unmapped fields are not imported into Salesforce. To see a list of standard Salesforce data fields, from Setup, at the top of the page, click Object Manager. Click the object whose fields you’re interested in, and click Fields & Relationships. For example, if you want to see a list of standard Salesforce fields for leads, click Object Manager | Lead | Fields & Relationships.
Scan the list of mapped data fields and locate any unmapped fields.
Click Map to the left of each unmapped field.
In the Map Your Field dialog box, choose the Salesforce fields you want to map to and click Map. The Map Your Field dialog box also gives you the option of saving data from unmapped fields in a general notes field for accounts and contacts. To do so, choose Account Note or Contact Note from the Map To drop-down list and click Map.
To change mappings that Salesforce performed automatically, click Change to the left of the appropriate field, then choose the Salesforce fields you want to map to and click Map.
Click Next.
Review and start your import.
Review your import information on the Review page. If you still have unmapped fields that you want to import, click Previous to return to the previous page and specify your mappings.
Click Start Import.
Check import status. From Setup, enter “Bulk Data Load Jobs” in the Quick Find box, then select Bulk Data Load Jobs.  The user who starts the data import receives a status email when the import is completed.
Note
Use the zoom option in your browser to adjust (shrink) the size of the content if you can't see the Map button.
The user who starts the data import receives a status email when the import is completed.
2023-04-04 12:23:19,129 - INFO - Related goals: 4
2023-04-04 12:23:20,556 - INFO - Processed paragraph 12 in d5.txt: Tell Me More...
This information can help you integrate your imported data into Salesforce.
New Values for Picklists and Multi-Select Picklists—If you import a picklist value that doesn’t match an existing picklist value:
For an unrestricted picklist, the Data Import Wizard uses the value that’s in the import file.
For a restricted picklist, the Data Import Wizard uses the picklist’s default value.
Multi-Select Picklists—To import multiple values into a multi-select picklist, separate the values by a semicolon in your import file.
Checkboxes—To import data into a checkbox field, use 1 for checked values and 0 for unchecked values.
Default Values—For picklist, multi-select picklist, and checkbox fields, if you do not map the field in the import wizard, the default value for the field, if any, is automatically inserted into the new or updated record.
Date/Time Fields—Ensure that the format of any date/time fields you are importing matches how they display in Salesforce per your locale setting.
Formula Fields—Formula fields cannot accept imported data because they are read-only.
Field Validation Rules—Salesforce runs validation rules on records before they are imported. Records that fail validation aren’t imported. Consider deactivating the appropriate validation rules before running an import if they affect the records you are importing.
2023-04-04 12:23:20,557 - INFO - Related goals: 4
2023-04-04 12:23:21,596 - INFO - Processed paragraph 0 in d6.txt: Export Data
2023-04-04 12:23:21,596 - INFO - No related goals found
2023-04-04 12:23:23,266 - INFO - Processed paragraph 1 in d6.txt: Learning Objectives
After completing this unit, you'll be able to:
Describe and compare the two methods of exporting data from Salesforce.
Export data manually using the Data Export Service.
Set up automatic export of data on a weekly or monthly schedule.
Introduction to Data Export
You can easily export data from Salesforce, either manually or on an automatic schedule. The data is exported as a set of comma-separated values (CSV) files. Data export tools provide a convenient way to obtain a copy of your Salesforce data, either for backup or for importing into a different system.
2023-04-04 12:23:23,267 - INFO - Related goals: 4
2023-04-04 12:23:24,306 - INFO - Processed paragraph 2 in d6.txt: Salesforce offers two main methods for exporting data.
2023-04-04 12:23:24,306 - INFO - No related goals found
2023-04-04 12:23:25,959 - INFO - Processed paragraph 3 in d6.txt: Data Export Service—an in-browser service, accessible through the Setup menu. It allows you to export data manually once every 7 days (for weekly export) or 29 days (for monthly export). You can also export data automatically at weekly or monthly intervals. Weekly exports are available in Enterprise, Performance, and Unlimited Editions. In Professional Edition and Developer Edition, you can generate backup files only every 29 days, or automatically at monthly intervals only.
Data Loader—a client application that you must install separately. It can be operated either through the user interface or the command line. The latter option is useful if you want to automate the export process, or use APIs to integrate with another system.
Using the Data Export Service
Get Cloudy is a high-tech consulting firm specializing in CRM implementations. Charnice Jones-Bauer, Get Cloudy’s financial analyst, knows that data loss can have a serious financial impact on the business, so she sets up a meeting in the employee cafe with Salesforce admin Chinua Toure to talk about backups. Chinua explains that he automates weekly backups with the Data Export Service.
2023-04-04 12:23:25,960 - INFO - Related goals: 4
2023-04-04 12:23:26,978 - INFO - Processed paragraph 4 in d6.txt: Charnice and Chinua talk about data backups
2023-04-04 12:23:26,978 - INFO - No related goals found
2023-04-04 12:23:28,654 - INFO - Processed paragraph 5 in d6.txt: Follow these steps to export data using the Data Export Service.
2023-04-04 12:23:28,654 - INFO - No related goals found
2023-04-04 12:23:30,384 - INFO - Processed paragraph 6 in d6.txt: From Setup, enter Data Export in the Quick Find box, then select Data Export and Export Now or Schedule Export.
The Export Now option prepares your files for export immediately. This option is only available if enough time has passed since your last export.
The Schedule Export option allows you to schedule the export process for weekly or monthly intervals.
Select the desired encoding for your export file.
If you want images, documents, attachments, and so on included in your data, select the appropriate options.
Select Replace carriage returns with spaces to have spaces instead of carriage returns or line breaks in your export files. This is useful if you plan to use your export files for importing or other integrations.
If you're scheduling your export, select the frequency (only available for organizations with monthly exports), start and end dates, and time of day for your scheduled export.
Under Exported Data, select the types of data to include in your export. We recommend that you select Include all data if you’re not familiar with the terminology used for some of the types of data.
Click Start Export or Save. Salesforce creates a zip archive of CSV files and emails you when it's ready. Exports will complete as soon as possible, however we can't guarantee the date and time the export will complete. Large exports are broken up into multiple files. Follow the link in the email or click Data Export to download the zip file. Zip files are deleted 48 hours after the email is sent.
2023-04-04 12:23:30,384 - INFO - Related goals: 4
2023-04-04 12:23:31,341 - INFO - Processed paragraph 0 in d7.txt: Customize How Records Get Approved
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:23:31,341 - INFO - No related goals found
2023-04-04 12:23:32,670 - INFO - Processed paragraph 1 in d7.txt: Define an approval process, and list its key components.
Plan the automation of a business process using an approval process.
Note
Accessibility
This unit requires some additional instructions for screen reader users. To access a detailed screen reader version of this unit, click the link below:
2023-04-04 12:23:32,670 - INFO - No related goals found
2023-04-04 12:23:33,676 - INFO - Processed paragraph 2 in d7.txt: Open Trailhead screen reader instructions.
2023-04-04 12:23:33,676 - INFO - No related goals found
2023-04-04 12:23:34,659 - INFO - Processed paragraph 3 in d7.txt: Get Started with Approvals
An approval process automates how Salesforce records are approved in your org. In an approval process, you specify:
2023-04-04 12:23:34,659 - INFO - No related goals found
2023-04-04 12:23:36,507 - INFO - Processed paragraph 4 in d7.txt: The steps necessary for a record to be approved and who approves it at each step. For example, when an employee creates a time-off request, have Salesforce automatically send an approval request to the employee’s manager.
The actions to take based on what happens during the approval process. For example, if a time-off request is approved, update fields on the employee’s record. But if the request is rejected, send a notification to the employee.
Let’s look at an example approval process to see how a record moves through various steps of the process. In this example, a user submits a request for a new position in a company.
2023-04-04 12:23:36,507 - INFO - Related goals: 1, 3, 13
2023-04-04 12:23:40,527 - INFO - Processed paragraph 5 in d7.txt: Chart that shows an example approval process
2023-04-04 12:23:40,528 - INFO - No related goals found
2023-04-04 12:23:42,664 - INFO - Processed paragraph 6 in d7.txt: When a user first requests approval for a new position, initial submission actions occur. The default initial submission action locks the record. This action ensures that other users (except for approvers and admins) can’t change the record while it's pending approval. Other possible submission actions include sending an email alert, updating a field on a record, creating a task, and sending an outbound message.
2023-04-04 12:23:42,665 - INFO - No related goals found
2023-04-04 12:23:43,732 - INFO - Processed paragraph 7 in d7.txt: Approval steps assign approval requests to various users and define the chain of approval for a particular approval process. In this example, the first step assigns the approval request to the submitter's direct manager.
2023-04-04 12:23:43,732 - INFO - No related goals found
2023-04-04 12:23:46,314 - INFO - Processed paragraph 8 in d7.txt: If the direct manager rejects the request, the final rejection actions are executed, setting the position’s approval status to Rejected.
2023-04-04 12:23:46,315 - INFO - No related goals found
2023-04-04 12:23:48,453 - INFO - Processed paragraph 9 in d7.txt: If the direct manager approves the request, the record moves to the next step—approval from the CEO. If the CEO rejects the position, the same final rejection actions occur.
2023-04-04 12:23:48,453 - INFO - No related goals found
2023-04-04 12:23:49,475 - INFO - Processed paragraph 10 in d7.txt: If the CEO approves the position, final approval actions are executed. They set the approval status to Approved, unlock the record for future updates, and notify the employee who requested the new position.
2023-04-04 12:23:49,475 - INFO - No related goals found
2023-04-04 12:23:50,601 - INFO - Processed paragraph 11 in d7.txt: Final approval actions occur only when a record is approved and there are no further approval steps.
2023-04-04 12:23:50,601 - INFO - No related goals found
2023-04-04 12:23:51,611 - INFO - Processed paragraph 0 in d8.txt: Build an Approval Process
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:23:51,611 - INFO - No related goals found
2023-04-04 12:23:55,802 - INFO - Processed paragraph 1 in d8.txt: Set up an approval process that emails the initial approvers.
Set up an approval process that allows users to approve or reject opportunity records.
Note
Accessibility
This unit requires some additional instructions for screen reader users. To access a detailed screen reader version of this unit, click the link below:
2023-04-04 12:23:55,802 - INFO - No related goals found
2023-04-04 12:23:57,215 - INFO - Processed paragraph 2 in d8.txt: Open Trailhead screen reader instructions.
2023-04-04 12:23:57,215 - INFO - No related goals found
2023-04-04 12:23:58,225 - INFO - Processed paragraph 3 in d8.txt: Create an Email Template
First create your email template to notify the record owner’s manager that an opportunity has been discounted more than 40%.
2023-04-04 12:23:58,225 - INFO - No related goals found
2023-04-04 12:24:00,392 - INFO - Processed paragraph 4 in d8.txt: From Setup, enter Templates in the Quick Find box, and then select Classic Email Templates.
Click New Template.
Select Text as the template type, and click Next.
Configure the email template.
Field	Value
Folder	Unfiled Public Classic Email Templates
Available for Use	Selected
Email Template Name	Approve Opportunity Discount
Encoding	General US & Western Europe
Subject	Please approve this discounted opportunity
Email Body	{!User.Manager}, The {!Opportunity.Name} has been discounted. Please approve this discount. Thank you.
Including the merge field {!Opportunity.Name} helps the approver by providing a link to the opportunity record. This allows them to review the record before responding to the request.
Click Save.
Add Custom Fields
Now let’s create custom fields so that we can track the discount percentage and approval status for each opportunity.
2023-04-04 12:24:00,393 - INFO - No related goals found
2023-04-04 12:24:02,615 - INFO - Processed paragraph 5 in d8.txt: From Setup, enter Object Manager in the Quick Find box, and then select Object Manager.
Click Opportunity.
Select Fields & Relationships and click New.
In the Data Type column, select Percent and then click Next.
Add a Percent field with these values.
Field	Value
Field Label	Discount Percent
Length	Leave default
Decimal Places	Leave default
Required	Selected
Click Next.
Click Next.
Click Save & New.
In the Data Type column, select Picklist and then click Next.
Add a Picklist field with these values.
Field	Value
Field Label	Discount Percent Status
Values	Enter values, one value per line
Picklist Values	Approved
Not Approved
Click Next.
Click Next.
Click Save.
Great! You’ve created an email template to notify approvers and you’ve set up an object with the required fields to support your approval process.
2023-04-04 12:24:02,615 - INFO - Related goals: 3
2023-04-04 12:24:04,069 - INFO - Processed paragraph 6 in d8.txt: Create an Approval Process
Now that our org is ready, let’s create the approval process.
2023-04-04 12:24:04,069 - INFO - No related goals found
2023-04-04 12:24:07,849 - INFO - Processed paragraph 7 in d8.txt: From Setup, enter Approval in the Quick Find box, and then select Approval Processes.
In Manage Approval Processes For, select Opportunity.
Click Create New Approval Process | Use Jump Start Wizard. The Jump Start Wizard helps you create a simple approval process by making some decisions for you.
Configure the approval process.
Field	Value
Name	Approve Opportunity Discount
Approval Assignment Email Template	Approve Opportunity Discount
Specify Entry Criteria	Opportunity: Discount Percent greater than 0.4
Select Approver	Let the submitter choose the approver manually
Save the approval process.
Click View Approval Process Detail Page.
Under Final Approval Actions, click Add New | Field Update, and configure it with these values.
Field	Value
Name	Approved
Field to Update	Discount Percent Status
A Specific value	Approved
Click Save.
Under Final Rejection Actions, click Add New | Field Update, and configure it with these values.
Field	Value
Name	Not Approved
Field to Update	Discount Percent Status
A Specific value	Not Approved
Click Save.
Great job! To start evaluating discounted opportunities, simply activate the approval process.
2023-04-04 12:24:07,850 - INFO - Related goals: 2
2023-04-04 12:24:08,834 - INFO - Processed paragraph 8 in d8.txt: Make Sure That Records Are Submitted
You've done a bunch of work to automate what happens when a record gets submitted for approval. Now, when users click Submit for Approval on an opportunity, it goes through your approval process. But what if—the horror—users forget to click the button?
2023-04-04 12:24:08,834 - INFO - No related goals found
2023-04-04 12:24:09,890 - INFO - Processed paragraph 9 in d8.txt: Enter Flow Builder. One of the available actions in the Action element is Submit for Approval, which means you can build a flow that automatically submits a record for approval. And that means your users don’t have to remember to submit opportunities for approval. For example, in a flow that runs when an opportunity is created or edited:
2023-04-04 12:24:09,891 - INFO - No related goals found
2023-04-04 12:24:12,796 - INFO - Processed paragraph 10 in d8.txt: Add a Decision element that checks whether Discount Percent is greater than 0.4.
Add an Action element, set to Submit for Approval, that submits the opportunity for approval.
2023-04-04 12:24:12,797 - INFO - Related goals: 1, 3, 13
2023-04-04 12:24:13,854 - INFO - Processed paragraph 0 in d9.txt: Choose the Right Search Solution
Learning Objectives
After completing this unit, you’ll be able to:
2023-04-04 12:24:13,854 - INFO - No related goals found
2023-04-04 12:24:20,356 - INFO - Processed paragraph 1 in d9.txt: Explain when to create a customized search solution.
Describe the difference between SOSL and SOQL.
Identify which API protocols are available for search.
Search, the Salesforce Way
Do you know what the No. 1 most-used Salesforce feature is? If you said search, you’re right. Search is how users expect to find the one record they want among the thousands of other pieces of data.
2023-04-04 12:24:20,356 - INFO - Related goals: 1, 3, 8, 13
2023-04-04 12:24:21,483 - INFO - Processed paragraph 2 in d9.txt: In this Trailhead module, you learn a bit about how Salesforce search works and how to determine whether a custom search solution is right for you. You also learn how to jump-start (or rebuild) a custom solution using the Salesforce API for some common use cases. Finally, you learn how to optimize search queries for more targeted, relevant results. In short, you’ll come away with a great understanding of search and how it can help users be more productive.
2023-04-04 12:24:21,484 - INFO - No related goals found
2023-04-04 12:24:23,281 - INFO - Processed paragraph 3 in d9.txt: To get started, let’s discuss how this whole search thing actually works.
2023-04-04 12:24:23,281 - INFO - No related goals found
2023-04-04 12:24:24,462 - INFO - Processed paragraph 4 in d9.txt: All records are stored as data fields in the org’s database. When you update or create a record, the search engine comes along, makes a copy of the data, and breaks up the content into smaller pieces called tokens. We store these tokens in the search index, along with a link back to the original record.
2023-04-04 12:24:24,462 - INFO - No related goals found
2023-04-04 12:24:25,519 - INFO - Processed paragraph 5 in d9.txt: From the user’s perspective, the search process is similar to when a record is created. When users enter a term in the search field (1), the search engine breaks up the search term into tokens (2). It matches those tokens to the record information stored in the search index (3), ranks the associated records by relevance (4), and returns the results that users have access to (5).
2023-04-04 12:24:25,519 - INFO - No related goals found
2023-04-04 12:24:26,514 - INFO - Processed paragraph 6 in d9.txt: Search Index
2023-04-04 12:24:26,515 - INFO - No related goals found
2023-04-04 12:24:27,549 - INFO - Processed paragraph 7 in d9.txt: Let’s take a moment to consider the search index. Why go to all the trouble to make tokens when we could search the org database? Well, the reason is that the search index is super smart about which results to return to the user.
2023-04-04 12:24:27,549 - INFO - No related goals found
2023-04-04 12:24:28,610 - INFO - Processed paragraph 8 in d9.txt: The search index and tokens allow the search engine to apply advanced features like spell correction, nicknames, lemmatization, and synonym groups. All this means we can present records that include variations on the user’s search term to widen the net of results. (Also, in case you were wondering, lemmatization has nothing to do with fuzzy lemmings. It has more to do with identifying and returning variants of the search term, such as add, adding, and added, in search results.)
2023-04-04 12:24:28,610 - INFO - No related goals found
2023-04-04 12:24:29,664 - INFO - Processed paragraph 9 in d9.txt: The search index also provides the opportunity to introduce relevance ranking into the mix. This is how search finds and ranks the records users are looking for. What’s involved? Things like search term frequency, order, and uniqueness; record activity; access permissions; and a handful of other factors.
2023-04-04 12:24:29,664 - INFO - No related goals found
2023-04-04 12:24:31,764 - INFO - Processed paragraph 10 in d9.txt: Let’s do a comparison. A database search for bunny slippers only returns records with the exact match for bunny slippers. But with the search index, you get records with bunny slippers, yes. But you also see records with similar terms like rabbit slippers or bunny slipper (singular). Plus, let’s say you entered slippers bunny or mis-spelled bunny (it happens). With out-of-order matching and spell check, you still see relevant results. And all the results are ordered by what is relevant to the specific user who performed the search.
2023-04-04 12:24:31,764 - INFO - No related goals found
2023-04-04 12:24:33,139 - INFO - Processed paragraph 11 in d9.txt: Maybe you’re thinking: The out-of-the-box Salesforce search sure sounds great (and it is) and works for most use cases. So, when would you need a custom solution?
2023-04-04 12:24:33,140 - INFO - No related goals found
2023-04-04 12:24:36,209 - INFO - Processed paragraph 12 in d9.txt: In general, you need a custom search solution when your org uses a custom UI instead of the standard Salesforce UI. Examples of home grown UIs are a customer-facing knowledge base or an internal product data site for your employees. Just a word of caution: Building a custom user interface isn’t for everyone and requires extra work. The good news is that a custom search still allows you to take advantage of some of the advanced features of Salesforce search. So, if your company has decided to build a custom UI and needs a custom search, this is the module for you.
2023-04-04 12:24:36,209 - INFO - No related goals found
2023-04-04 12:24:37,204 - INFO - Processed paragraph 13 in d9.txt: Now that we’ve covered Salesforce Search 101, let’s talk about the APIs that let you find records in your custom search solution.
2023-04-04 12:24:37,204 - INFO - No related goals found
2023-04-04 12:24:38,569 - INFO - Processed paragraph 14 in d9.txt: Connect to Search with APIs
Keep in mind two main APIs. (We talk about two additional APIs a little later.)
2023-04-04 12:24:38,569 - INFO - No related goals found
2023-04-04 12:24:41,081 - INFO - Processed paragraph 15 in d9.txt: Salesforce Object Query Language (SOQL)
Salesforce Object Search Language (SOSL)
Both SOQL and SOSL format text queries in a given API. But that’s where the similarities end. A SOQL query is the equivalent of a SELECT SQL statement and searches the org database. On the other hand, SOSL is a programmatic way of performing a text-based search against the search index. SOSL uses all the great, previously mentioned features of the search index.
2023-04-04 12:24:41,082 - INFO - No related goals found
2023-04-04 12:24:42,021 - INFO - Processed paragraph 16 in d9.txt: SOQL and SOSL also have different syntaxes. We’ve included links to developer docs in the resource section for your reference. But here are some guidelines on when to use SOQL or SOSL.
2023-04-04 12:24:42,021 - INFO - No related goals found
2023-04-04 12:24:43,422 - INFO - Processed paragraph 17 in d9.txt: Use SOQL when you know in which objects or fields the data resides and you want to:
2023-04-04 12:24:43,422 - INFO - No related goals found
2023-04-04 12:24:45,137 - INFO - Processed paragraph 18 in d9.txt: Retrieve data from a single object or from multiple objects that are related to one another.
Count the number of records that meet specified criteria.
Sort results as part of the query.
Retrieve data from number, date, or checkbox fields.
Use SOSL when you don’t know in which object or field the data resides and you want to:
2023-04-04 12:24:45,137 - INFO - Related goals: 8
2023-04-04 12:24:48,750 - INFO - Processed paragraph 19 in d9.txt: Retrieve data for a specific term that you know exists within a field. Because SOSL can tokenize multiple terms within a field and build a search index from this, SOSL searches are faster and can return more relevant results.
Retrieve multiple objects and fields efficiently, and the objects might or might not be related to one another.
Retrieve data for a particular division in an organization using the divisions feature, and you want to find it in the most efficient way possible.
Now let’s look at two additional API types.
2023-04-04 12:24:48,750 - INFO - Related goals: 1, 5, 8, 15
2023-04-04 12:24:49,756 - INFO - Processed paragraph 20 in d9.txt: First up, suggested records API. Perhaps you already know suggested records by its aliases: auto-suggestion, instant results, or type-ahead. You’re probably familiar with the behavior, too. Let’s say you’re using a website that sells the coolest running shoes available. It uses a customized Salesforce search solution for its knowledge base to encourage a community of runners. You want to know which shoes to buy for trail running. You start typing “trail running” in the search bar, and it presents options for articles that include the search terms in the title.
2023-04-04 12:24:49,756 - INFO - No related goals found
2023-04-04 12:24:50,809 - INFO - Processed paragraph 21 in d9.txt: The search box knew exactly what you wanted to read!
2023-04-04 12:24:50,809 - INFO - No related goals found
2023-04-04 12:24:52,884 - INFO - Processed paragraph 22 in d9.txt: Search Suggested Records and Search Suggested Articles REST methods are available for you to use to bring your own users the same immediate satisfaction. We show you more about how to use those methods later.
2023-04-04 12:24:52,884 - INFO - No related goals found
2023-04-04 12:24:53,905 - INFO - Processed paragraph 23 in d9.txt: We’ve been talking a lot about how to find records inside Salesforce. But what if you have records stored outside of Salesforce that users access for their jobs? Well, we’ve got a solution for that too: Salesforce Federated Search. It’s the new way for users to search for items stored outside of Salesforce—all while remaining inside Salesforce Classic, Salesforce Console, or Lightning Experience.
2023-04-04 12:24:53,905 - INFO - No related goals found
2023-04-04 12:24:54,910 - INFO - Processed paragraph 24 in d9.txt: Salesforce Federated Search allows you to make the global search box an external search engine. When Federated Search is set up, we transfer the user’s query to the external engine, which searches the external sources. The results are returned right in the Salesforce search results. We do this through the Salesforce Federated Search connector. The connector is built using the OpenSearch specification, so you can plug in any search engine that conforms to this industry standard.
2023-04-04 12:24:54,911 - INFO - No related goals found
2023-04-04 12:24:57,011 - INFO - Processed paragraph 25 in d9.txt: It’s important to know that Salesforce Federated Search doesn’t go through the Salesforce search index, meaning that all those cool Salesforce advanced features aren’t applied. Instead, results are returned according to the external search provider, which is cool too.
2023-04-04 12:24:57,011 - INFO - No related goals found
2023-04-04 12:24:58,407 - INFO - Processed paragraph 26 in d9.txt: Next, let’s look at how to use protocols to send SOSL and SOQL queries.
2023-04-04 12:24:58,408 - INFO - No related goals found
2023-04-04 12:24:59,874 - INFO - Processed paragraph 27 in d9.txt: Send Queries with Protocols
You can write all the beautiful search queries that you want. But they aren’t any good unless you use an API protocol like REST, SOAP, or Apex to actually send them.
2023-04-04 12:24:59,875 - INFO - No related goals found
2023-04-04 12:25:01,642 - INFO - Processed paragraph 28 in d9.txt: Keep in mind that some protocols get along better with some APIs than others. In general, we talk about queries with SOQL and searches with SOSL.
2023-04-04 12:25:01,642 - INFO - Related goals: 8
2023-04-04 12:25:03,254 - INFO - Processed paragraph 29 in d9.txt: Query (REST) and query() (SOAP)—Executes a SOQL query against the specified object and returns data that matches the specified criteria.
Search (REST) and search() (SOAP)—Executes a SOSL text string search against your org’s data.
More resources to perform other common search tasks, like auto-suggesting records, articles, and queries, are also available. And, if you’d rather not use SOSL or SOQL, consider Parameterized Search in REST. Instead of a search string in the URL, you use parameters (hence the name) in the URL.
2023-04-04 12:25:03,255 - INFO - Related goals: 8
2023-04-04 12:25:04,993 - INFO - Processed paragraph 30 in d9.txt: As for Apex, you can use SOQL or SOSL on the fly by surrounding the statement in square brackets. You can also use a Search Class to perform dynamic SOSL queries and a Search Namespace for getting search results and suggestion results.
2023-04-04 12:25:04,993 - INFO - Related goals: 8
2023-04-04 12:25:06,352 - INFO - Processed paragraph 31 in d9.txt: We’ve included a handy list in the resources section of this unit. And we’re going to give you an introduction to using the protocols in the next unit to get you started. Be sure to read up on the developer docs for all the information and examples.
2023-04-04 12:25:06,352 - INFO - No related goals found
